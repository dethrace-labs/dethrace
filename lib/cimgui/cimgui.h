// THIS FILE HAS BEEN AUTO-GENERATED BY THE 'DEAR BINDINGS' GENERATOR.
// **DO NOT EDIT DIRECTLY**
// https://github.com/dearimgui/dear_bindings

// dear imgui, v1.89.1
// (headers)

// Help:
// - Read FAQ at http://dearimgui.org/faq
// - Newcomers, read 'Programmer guide' in imgui.cpp for notes on how to setup Dear ImGui in your codebase.
// - Call and read ImGui::ShowDemoWindow() in imgui_demo.cpp. All applications in examples/ are doing that.
// Read imgui.cpp for details, links and comments.

// Resources:
// - FAQ                   http://dearimgui.org/faq
// - Homepage & latest     https://github.com/ocornut/imgui
// - Releases & changelog  https://github.com/ocornut/imgui/releases
// - Gallery               https://github.com/ocornut/imgui/issues/5243 (please post your screenshots/video there!)
// - Wiki                  https://github.com/ocornut/imgui/wiki (lots of good stuff there)
// - Glossary              https://github.com/ocornut/imgui/wiki/Glossary
// - Issues & support      https://github.com/ocornut/imgui/issues

// Getting Started?
// - For first-time users having issues compiling/linking/running or issues loading fonts:
//   please post in https://github.com/ocornut/imgui/discussions if you cannot find a solution in resources above.

// Library Version
// (Integer encoded as XYYZZ for use in #if preprocessor conditionals, e.g. '#if IMGUI_VERSION_NUM > 12345')
#define IMGUI_VERSION               "1.89.1 WIP"
#define IMGUI_VERSION_NUM           18910
#define IMGUI_HAS_TABLE

/*

Index of this file:
// [SECTION] Header mess
// [SECTION] Forward declarations and basic types
// [SECTION] Dear ImGui end-user API functions
// [SECTION] Flags & Enumerations
// [SECTION] Helpers: Memory allocations macros, ImVector<>
// [SECTION] ImGuiStyle
// [SECTION] ImGuiIO
// [SECTION] Misc data structures (ImGuiInputTextCallbackData, ImGuiSizeCallbackData, ImGuiPayload, ImGuiTableSortSpecs, ImGuiTableColumnSortSpecs)
// [SECTION] Helpers (ImGuiOnceUponAFrame, ImGuiTextFilter, ImGuiTextBuffer, ImGuiStorage, ImGuiListClipper, ImColor)
// [SECTION] Drawing API (ImDrawCallback, ImDrawCmd, ImDrawIdx, ImDrawVert, ImDrawChannel, ImDrawListSplitter, ImDrawFlags, ImDrawListFlags, ImDrawList, ImDrawData)
// [SECTION] Font API (ImFontConfig, ImFontGlyph, ImFontGlyphRangesBuilder, ImFontAtlasFlags, ImFontAtlas, ImFont)
// [SECTION] Viewports (ImGuiViewportFlags, ImGuiViewport)
// [SECTION] Platform Dependent Interfaces (ImGuiPlatformImeData)
// [SECTION] Obsolete functions and types

*/

#pragma once

#ifdef __cplusplus
extern "C"
{
#endif
// Configuration file with compile-time options
// (edit imconfig.h or '#define IMGUI_USER_CONFIG "myfilename.h" from your build system')
#ifdef IMGUI_USER_CONFIG
#include IMGUI_USER_CONFIG
#endif // #ifdef IMGUI_USER_CONFIG
#include "imconfig.h"  //-----------------------------------------------------------------------------
#ifndef IMGUI_DISABLE
// [SECTION] Header mess
//-----------------------------------------------------------------------------

// Includes
#include <stdbool.h>
// Define attributes of all API symbols declarations (e.g. for DLL under Windows)
// CIMGUI_API is used for core imgui functions, IMGUI_IMPL_API is used for the default backends files (imgui_impl_xxx.h)
// Using dear imgui via a shared library is not recommended, because we don't guarantee backward nor forward ABI compatibility (also function call overhead, as dear imgui is a call-heavy API)
#ifndef CIMGUI_API
#define CIMGUI_API
#endif // #ifndef CIMGUI_API
#ifndef IMGUI_IMPL_API
#define IMGUI_IMPL_API              CIMGUI_API
#endif // #ifndef IMGUI_IMPL_API
// Helper Macros
#ifndef IM_ASSERT
#include <assert.h>
#define IM_ASSERT(_EXPR)            assert(_EXPR)                                // You can override the default assert handler by editing imconfig.h
#endif // #ifndef IM_ASSERT
#define IM_ARRAYSIZE(_ARR)          ((int)(sizeof(_ARR) / sizeof(*(_ARR))))      // Size of a static C-style array. Don't use on pointers!
#define IM_UNUSED(_VAR)             ((void)(_VAR))                               // Used to silence "unused variable warnings". Often useful as asserts may be stripped out from final builds.
#define IM_OFFSETOF(_TYPE,_MEMBER)  offsetof(_TYPE, _MEMBER)                     // Offset of _MEMBER within _TYPE. Standardized as offsetof() in C++11
#define IMGUI_CHECKVERSION()        ImGui::DebugCheckVersionAndDataLayout(IMGUI_VERSION, sizeof(ImGuiIO), sizeof(ImGuiStyle), sizeof(ImVec2), sizeof(ImVec4), sizeof(ImDrawVert), sizeof(ImDrawIdx))

// Helper Macros - IM_FMTARGS, IM_FMTLIST: Apply printf-style warnings to our formatting functions.
#if !defined(IMGUI_USE_STB_SPRINTF)&& defined(__MINGW32__)&&!defined(__clang__)
#define IM_FMTARGS(FMT)             __attribute__((format(gnu_printf, FMT, FMT+1)))
#define IM_FMTLIST(FMT)             __attribute__((format(gnu_printf, FMT, 0)))
#else
#if !defined(IMGUI_USE_STB_SPRINTF)&&(defined(__clang__)|| defined(__GNUC__))
#define IM_FMTARGS(FMT)             __attribute__((format(printf, FMT, FMT+1)))
#define IM_FMTLIST(FMT)             __attribute__((format(printf, FMT, 0)))
#else
#define IM_FMTARGS(FMT)
#define IM_FMTLIST(FMT)
#endif // #if !defined(IMGUI_USE_STB_SPRINTF)&&(defined(__clang__)|| defined(__GNUC__))
#endif // #if !defined(IMGUI_USE_STB_SPRINTF)&& defined(__MINGW32__)&&!defined(__clang__)
// Disable some of MSVC most aggressive Debug runtime checks in function header/footer (used in some simple/low-level functions)
#if defined(_MSC_VER)&&!defined(__clang__)&&!defined(__INTEL_COMPILER)&&!defined(IMGUI_DEBUG_PARANOID)
#define IM_MSVC_RUNTIME_CHECKS_OFF      __pragma(runtime_checks("",off))     __pragma(check_stack(off)) __pragma(strict_gs_check(push,off))
#define IM_MSVC_RUNTIME_CHECKS_RESTORE  __pragma(runtime_checks("",restore)) __pragma(check_stack())    __pragma(strict_gs_check(pop))
#else
#define IM_MSVC_RUNTIME_CHECKS_OFF
#define IM_MSVC_RUNTIME_CHECKS_RESTORE
#endif // #if defined(_MSC_VER)&&!defined(__clang__)&&!defined(__INTEL_COMPILER)&&!defined(IMGUI_DEBUG_PARANOID)
// Warnings
#ifdef _MSC_VER
#pragma warning (push)
#pragma warning (disable: 26495)     // [Static Analyzer] Variable 'XXX' is uninitialized. Always initialize a member variable (type.6).
#endif // #ifdef _MSC_VER
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wold-style-cast"
#if __has_warning("-Wzero-as-null-pointer-constant")
#pragma clang diagnostic ignored "-Wzero-as-null-pointer-constant"
#endif // #if __has_warning("-Wzero-as-null-pointer-constant")
#else
#if defined(__GNUC__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpragmas"           // warning: unknown option after '#pragma GCC diagnostic' kind
#pragma GCC diagnostic ignored "-Wclass-memaccess"   // [__GNUC__ >= 8] warning: 'memset/memcpy' clearing/writing an object of type 'xxxx' with no trivial copy-assignment; use assignment or value-initialization instead
#endif // #if defined(__GNUC__)
#endif // #if defined(__clang__)
//-----------------------------------------------------------------------------
// [SECTION] Forward declarations and basic types
//-----------------------------------------------------------------------------

// Auto-generated forward declarations for C header
typedef struct ImVec2_t ImVec2;
typedef struct ImVec4_t ImVec4;
typedef struct ImVector_ImWchar_t ImVector_ImWchar;
typedef struct ImVector_ImGuiTextFilter_ImGuiTextRange_t ImVector_ImGuiTextFilter_ImGuiTextRange;
typedef struct ImVector_char_t ImVector_char;
typedef struct ImVector_ImGuiStorage_ImGuiStoragePair_t ImVector_ImGuiStorage_ImGuiStoragePair;
typedef struct ImVector_ImDrawCmd_t ImVector_ImDrawCmd;
typedef struct ImVector_ImDrawIdx_t ImVector_ImDrawIdx;
typedef struct ImVector_ImDrawChannel_t ImVector_ImDrawChannel;
typedef struct ImVector_ImDrawVert_t ImVector_ImDrawVert;
typedef struct ImVector_ImVec4_t ImVector_ImVec4;
typedef struct ImVector_ImTextureID_t ImVector_ImTextureID;
typedef struct ImVector_ImVec2_t ImVector_ImVec2;
typedef struct ImVector_ImU32_t ImVector_ImU32;
typedef struct ImVector_ImFontPtr_t ImVector_ImFontPtr;
typedef struct ImVector_ImFontAtlasCustomRect_t ImVector_ImFontAtlasCustomRect;
typedef struct ImVector_ImFontConfig_t ImVector_ImFontConfig;
typedef struct ImVector_float_t ImVector_float;
typedef struct ImVector_ImFontGlyph_t ImVector_ImFontGlyph;
typedef struct ImGuiTextFilter_ImGuiTextRange_t ImGuiTextFilter_ImGuiTextRange;
typedef struct ImGuiStorage_ImGuiStoragePair_t ImGuiStorage_ImGuiStoragePair;
typedef struct ImDrawCmdHeader_t ImDrawCmdHeader;
typedef struct ImFontAtlasCustomRect_t ImFontAtlasCustomRect;
// Forward declarations
typedef struct ImDrawChannel_t ImDrawChannel;                            // Temporary storage to output draw commands out of order, used by ImDrawListSplitter and ImDrawList::ChannelsSplit()
typedef struct ImDrawCmd_t ImDrawCmd;                                    // A single draw command within a parent ImDrawList (generally maps to 1 GPU draw call, unless it is a callback)
typedef struct ImDrawData_t ImDrawData;                                  // All draw command lists required to render the frame + pos/size coordinates to use for the projection matrix.
typedef struct ImDrawList_t ImDrawList;                                  // A single draw command list (generally one per window, conceptually you may see this as a dynamic "mesh" builder)
typedef struct ImDrawListSharedData_t ImDrawListSharedData;              // Data shared among multiple draw lists (typically owned by parent ImGui context, but you may create one yourself)
typedef struct ImDrawListSplitter_t ImDrawListSplitter;                  // Helper to split a draw list into different layers which can be drawn into out of order, then flattened back.
typedef struct ImDrawVert_t ImDrawVert;                                  // A single vertex (pos + uv + col = 20 bytes by default. Override layout with IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT)
typedef struct ImFont_t ImFont;                                          // Runtime data for a single font within a parent ImFontAtlas
typedef struct ImFontAtlas_t ImFontAtlas;                                // Runtime data for multiple fonts, bake multiple fonts into a single texture, TTF/OTF font loader
typedef struct ImFontBuilderIO_t ImFontBuilderIO;                        // Opaque interface to a font builder (stb_truetype or FreeType).
typedef struct ImFontConfig_t ImFontConfig;                              // Configuration data when adding a font or merging fonts
typedef struct ImFontGlyph_t ImFontGlyph;                                // A single font glyph (code point + coordinates within in ImFontAtlas + offset)
typedef struct ImFontGlyphRangesBuilder_t ImFontGlyphRangesBuilder;      // Helper to build glyph ranges from text/string data
typedef struct ImColor_t ImColor;                                        // Helper functions to create a color that can be converted to either u32 or float4 (*OBSOLETE* please avoid using)
typedef struct ImGuiContext_t ImGuiContext;                              // Dear ImGui context (opaque structure, unless including imgui_internal.h)
typedef struct ImGuiIO_t ImGuiIO;                                        // Main configuration and I/O between your application and ImGui
typedef struct ImGuiInputTextCallbackData_t ImGuiInputTextCallbackData;  // Shared state of InputText() when using custom ImGuiInputTextCallback (rare/advanced use)
typedef struct ImGuiKeyData_t ImGuiKeyData;                              // Storage for ImGuiIO and IsKeyDown(), IsKeyPressed() etc functions.
typedef struct ImGuiListClipper_t ImGuiListClipper;                      // Helper to manually clip large list of items
typedef struct ImGuiPayload_t ImGuiPayload;                              // User data payload for drag and drop operations
typedef struct ImGuiPlatformImeData_t ImGuiPlatformImeData;              // Platform IME data for io.SetPlatformImeDataFn() function.
typedef struct ImGuiSizeCallbackData_t ImGuiSizeCallbackData;            // Callback data when using SetNextWindowSizeConstraints() (rare/advanced use)
typedef struct ImGuiStorage_t ImGuiStorage;                              // Helper for key->value storage
typedef struct ImGuiStyle_t ImGuiStyle;                                  // Runtime data for styling/colors
typedef struct ImGuiTableSortSpecs_t ImGuiTableSortSpecs;                // Sorting specifications for a table (often handling sort specs for a single column, occasionally more)
typedef struct ImGuiTableColumnSortSpecs_t ImGuiTableColumnSortSpecs;    // Sorting specification for one column of a table
typedef struct ImGuiTextBuffer_t ImGuiTextBuffer;                        // Helper to hold and append into a text buffer (~string builder)
typedef struct ImGuiTextFilter_t ImGuiTextFilter;                        // Helper to parse and apply text filters (e.g. "aaaaa[,bbbbb][,ccccc]")
typedef struct ImGuiViewport_t ImGuiViewport;                            // A Platform Window (always only one in 'master' branch), in the future may represent Platform Monitor

// Enumerations
// - We don't use strongly typed enums much because they add constraints (can't extend in private code, can't store typed in bit fields, extra casting on iteration)
// - Tip: Use your programming IDE navigation facilities on the names in the _central column_ below to find the actual flags/enum lists!
//   In Visual Studio IDE: CTRL+comma ("Edit.GoToAll") can follow symbols in comments, whereas CTRL+F12 ("Edit.GoToImplementation") cannot.
//   With Visual Assist installed: ALT+G ("VAssistX.GoToImplementation") can also follow symbols in comments.
typedef int ImGuiKey;            // -> enum ImGuiKey              // Enum: A key identifier (ImGuiKey_XXX or ImGuiMod_XXX value)
typedef int ImGuiCol;            // -> enum ImGuiCol_             // Enum: A color identifier for styling
typedef int ImGuiCond;           // -> enum ImGuiCond_            // Enum: A condition for many Set*() functions
typedef int ImGuiDataType;       // -> enum ImGuiDataType_        // Enum: A primary data type
typedef int ImGuiDir;            // -> enum ImGuiDir_             // Enum: A cardinal direction
typedef int ImGuiMouseButton;    // -> enum ImGuiMouseButton_     // Enum: A mouse button identifier (0=left, 1=right, 2=middle)
typedef int ImGuiMouseCursor;    // -> enum ImGuiMouseCursor_     // Enum: A mouse cursor shape
typedef int ImGuiSortDirection;  // -> enum ImGuiSortDirection_   // Enum: A sorting direction (ascending or descending)
typedef int ImGuiStyleVar;       // -> enum ImGuiStyleVar_        // Enum: A variable identifier for styling
typedef int ImGuiTableBgTarget;  // -> enum ImGuiTableBgTarget_   // Enum: A color target for TableSetBgColor()

// Flags (declared as int for compatibility with old C++, to allow using as flags without overhead, and to not pollute the top of this file)
// - Tip: Use your programming IDE navigation facilities on the names in the _central column_ below to find the actual flags/enum lists!
//   In Visual Studio IDE: CTRL+comma ("Edit.GoToAll") can follow symbols in comments, whereas CTRL+F12 ("Edit.GoToImplementation") cannot.
//   With Visual Assist installed: ALT+G ("VAssistX.GoToImplementation") can also follow symbols in comments.
typedef int ImDrawFlags;            // -> enum ImDrawFlags_          // Flags: for ImDrawList functions
typedef int ImDrawListFlags;        // -> enum ImDrawListFlags_      // Flags: for ImDrawList instance
typedef int ImFontAtlasFlags;       // -> enum ImFontAtlasFlags_     // Flags: for ImFontAtlas build
typedef int ImGuiBackendFlags;      // -> enum ImGuiBackendFlags_    // Flags: for io.BackendFlags
typedef int ImGuiButtonFlags;       // -> enum ImGuiButtonFlags_     // Flags: for InvisibleButton()
typedef int ImGuiColorEditFlags;    // -> enum ImGuiColorEditFlags_  // Flags: for ColorEdit4(), ColorPicker4() etc.
typedef int ImGuiConfigFlags;       // -> enum ImGuiConfigFlags_     // Flags: for io.ConfigFlags
typedef int ImGuiComboFlags;        // -> enum ImGuiComboFlags_      // Flags: for BeginCombo()
typedef int ImGuiDragDropFlags;     // -> enum ImGuiDragDropFlags_   // Flags: for BeginDragDropSource(), AcceptDragDropPayload()
typedef int ImGuiFocusedFlags;      // -> enum ImGuiFocusedFlags_    // Flags: for IsWindowFocused()
typedef int ImGuiHoveredFlags;      // -> enum ImGuiHoveredFlags_    // Flags: for IsItemHovered(), IsWindowHovered() etc.
typedef int ImGuiInputTextFlags;    // -> enum ImGuiInputTextFlags_  // Flags: for InputText(), InputTextMultiline()
typedef int ImGuiKeyChord;          // -> ImGuiKey | ImGuiMod_XXX    // Flags: for storage only for now: an ImGuiKey optionally OR-ed with one or more ImGuiMod_XXX values.
typedef int ImGuiPopupFlags;        // -> enum ImGuiPopupFlags_      // Flags: for OpenPopup*(), BeginPopupContext*(), IsPopupOpen()
typedef int ImGuiSelectableFlags;   // -> enum ImGuiSelectableFlags_ // Flags: for Selectable()
typedef int ImGuiSliderFlags;       // -> enum ImGuiSliderFlags_     // Flags: for DragFloat(), DragInt(), SliderFloat(), SliderInt() etc.
typedef int ImGuiTabBarFlags;       // -> enum ImGuiTabBarFlags_     // Flags: for BeginTabBar()
typedef int ImGuiTabItemFlags;      // -> enum ImGuiTabItemFlags_    // Flags: for BeginTabItem()
typedef int ImGuiTableFlags;        // -> enum ImGuiTableFlags_      // Flags: For BeginTable()
typedef int ImGuiTableColumnFlags;  // -> enum ImGuiTableColumnFlags_// Flags: For TableSetupColumn()
typedef int ImGuiTableRowFlags;     // -> enum ImGuiTableRowFlags_   // Flags: For TableNextRow()
typedef int ImGuiTreeNodeFlags;     // -> enum ImGuiTreeNodeFlags_   // Flags: for TreeNode(), TreeNodeEx(), CollapsingHeader()
typedef int ImGuiViewportFlags;     // -> enum ImGuiViewportFlags_   // Flags: for ImGuiViewport
typedef int ImGuiWindowFlags;       // -> enum ImGuiWindowFlags_     // Flags: for Begin(), BeginChild()

// ImTexture: user data for renderer backend to identify a texture [Compile-time configurable type]
// - To use something else than an opaque void* pointer: override with e.g. '#define ImTextureID MyTextureType*' in your imconfig.h file.
// - This can be whatever to you want it to be! read the FAQ about ImTextureID for details.
#ifndef ImTextureID
typedef void* ImTextureID;  // Default: store a pointer or an integer fitting in a pointer (most renderer backends are ok with that)
#endif // #ifndef ImTextureID
// ImDrawIdx: vertex index. [Compile-time configurable type]
// - To use 16-bit indices + allow large meshes: backend need to set 'io.BackendFlags |= ImGuiBackendFlags_RendererHasVtxOffset' and handle ImDrawCmd::VtxOffset (recommended).
// - To use 32-bit indices: override with '#define ImDrawIdx unsigned int' in your imconfig.h file.
#ifndef ImDrawIdx
typedef unsigned short ImDrawIdx;  // Default: 16-bit (for maximum compatibility with renderer backends)
#endif // #ifndef ImDrawIdx
// Scalar data types
typedef unsigned int ImGuiID;      // A unique ID used by widgets (typically the result of hashing a stack of string)
typedef signed char ImS8;          // 8-bit signed integer
typedef unsigned char ImU8;        // 8-bit unsigned integer
typedef signed short ImS16;        // 16-bit signed integer
typedef unsigned short ImU16;      // 16-bit unsigned integer
typedef signed int ImS32;          // 32-bit signed integer == int
typedef unsigned int ImU32;        // 32-bit unsigned integer (often used to store packed colors)
typedef signed long long ImS64;    // 64-bit signed integer
typedef unsigned long long ImU64;  // 64-bit unsigned integer

// Character types
// (we generally use UTF-8 encoded string in the API. This is storage specifically for a decoded character used for keyboard input and display)
typedef unsigned short ImWchar16;                                         // A single decoded U16 character/code point. We encode them as multi bytes UTF-8 when used in strings.
typedef unsigned int ImWchar32;                                           // A single decoded U32 character/code point. We encode them as multi bytes UTF-8 when used in strings.
#ifdef IMGUI_USE_WCHAR32
typedef ImWchar32 ImWchar;
#else
typedef ImWchar16 ImWchar;
#endif// ImWchar [configurable type: override in imconfig.h with '#define IMGUI_USE_WCHAR32' to support Unicode planes 1-16]
// Callback and functions types
typedef int (*ImGuiInputTextCallback)(ImGuiInputTextCallbackData* data);  // Callback function for ImGui::InputText()
typedef void (*ImGuiSizeCallback)(ImGuiSizeCallbackData* data);           // Callback function for ImGui::SetNextWindowSizeConstraints()
typedef void* (*ImGuiMemAllocFunc)(size_t sz, void* user_data);           // Function signature for ImGui::SetAllocatorFunctions()
typedef void (*ImGuiMemFreeFunc)(void* ptr, void* user_data);             // Function signature for ImGui::SetAllocatorFunctions()

// ImVec2: 2D vector used to store positions, sizes etc. [Compile-time configurable type]
// This is a frequently used type in the API. Consider using IM_VEC2_CLASS_EXTRA to create implicit cast from/to our preferred type.
IM_MSVC_RUNTIME_CHECKS_OFF
typedef struct ImVec2_t
{
    float x, y;
} ImVec2;

// ImVec4: 4D vector used to store clipping rectangles, colors etc. [Compile-time configurable type]
typedef struct ImVec4_t
{
    float x, y, z, w;
} ImVec4;
IM_MSVC_RUNTIME_CHECKS_RESTORE

//-----------------------------------------------------------------------------
// [SECTION] Dear ImGui end-user API functions
// (Note that ImGui:: being a namespace, you can add extra ImGui:: functions in your own separate file. Please don't modify imgui source files!)
//-----------------------------------------------------------------------------

// Context creation and access
// - Each context create its own ImFontAtlas by default. You may instance one yourself and pass it to CreateContext() to share a font atlas between contexts.
// - DLL users: heaps and globals are not shared across DLL boundaries! You will need to call SetCurrentContext() + SetAllocatorFunctions()
//   for each static/DLL boundary you are calling from. Read "Context and Memory Allocators" section of imgui.cpp for details.
CIMGUI_API ImGuiContext* ImGui_CreateContext(ImFontAtlas* shared_font_atlas /* = NULL */);
CIMGUI_API void          ImGui_DestroyContext(ImGuiContext* ctx /* = NULL */);  // NULL = destroy current context
CIMGUI_API ImGuiContext* ImGui_GetCurrentContext(void);
CIMGUI_API void          ImGui_SetCurrentContext(ImGuiContext* ctx);

// Main
CIMGUI_API ImGuiIO*    ImGui_GetIO(void);        // access the IO structure (mouse/keyboard/gamepad inputs, time, various configuration options/flags)
CIMGUI_API ImGuiStyle* ImGui_GetStyle(void);     // access the Style structure (colors, sizes). Always use PushStyleCol(), PushStyleVar() to modify style mid-frame!
CIMGUI_API void        ImGui_NewFrame(void);     // start a new Dear ImGui frame, you can submit any command from this point until Render()/EndFrame().
CIMGUI_API void        ImGui_EndFrame(void);     // ends the Dear ImGui frame. automatically called by Render(). If you don't need to render data (skipping rendering) you may call EndFrame() without Render()... but you'll have wasted CPU already! If you don't need to render, better to not create any windows and not call NewFrame() at all!
CIMGUI_API void        ImGui_Render(void);       // ends the Dear ImGui frame, finalize the draw data. You can then get call GetDrawData().
CIMGUI_API ImDrawData* ImGui_GetDrawData(void);  // valid after Render() and until the next call to NewFrame(). this is what you have to render.

// Demo, Debug, Information
CIMGUI_API void        ImGui_ShowDemoWindow(bool* p_open /* = NULL */);       // create Demo window. demonstrate most ImGui features. call this to learn about the library! try to make it always available in your application!
CIMGUI_API void        ImGui_ShowMetricsWindow(bool* p_open /* = NULL */);    // create Metrics/Debugger window. display Dear ImGui internals: windows, draw commands, various internal state, etc.
CIMGUI_API void        ImGui_ShowDebugLogWindow(bool* p_open /* = NULL */);   // create Debug Log window. display a simplified log of important dear imgui events.
CIMGUI_API void        ImGui_ShowStackToolWindow(bool* p_open /* = NULL */);  // create Stack Tool window. hover items with mouse to query information about the source of their unique ID.
CIMGUI_API void        ImGui_ShowAboutWindow(bool* p_open /* = NULL */);      // create About window. display Dear ImGui version, credits and build/system information.
CIMGUI_API void        ImGui_ShowStyleEditor(ImGuiStyle* ref /* = NULL */);   // add style editor block (not a window). you can pass in a reference ImGuiStyle structure to compare to, revert to and save to (else it uses the default style)
CIMGUI_API bool        ImGui_ShowStyleSelector(const char* label);            // add style selector block (not a window), essentially a combo listing the default styles.
CIMGUI_API void        ImGui_ShowFontSelector(const char* label);             // add font selector block (not a window), essentially a combo listing the loaded fonts.
CIMGUI_API void        ImGui_ShowUserGuide(void);                             // add basic help/info block (not a window): how to manipulate ImGui as an end-user (mouse/keyboard controls).
CIMGUI_API const char* ImGui_GetVersion(void);                                // get the compiled version string e.g. "1.80 WIP" (essentially the value for IMGUI_VERSION from the compiled version of imgui.cpp)

// Styles
CIMGUI_API void ImGui_StyleColorsDark(ImGuiStyle* dst /* = NULL */);     // new, recommended style (default)
CIMGUI_API void ImGui_StyleColorsLight(ImGuiStyle* dst /* = NULL */);    // best used with borders and a custom, thicker font
CIMGUI_API void ImGui_StyleColorsClassic(ImGuiStyle* dst /* = NULL */);  // classic imgui style

// Windows
// - Begin() = push window to the stack and start appending to it. End() = pop window from the stack.
// - Passing 'bool* p_open != NULL' shows a window-closing widget in the upper-right corner of the window,
//   which clicking will set the boolean to false when clicked.
// - You may append multiple times to the same window during the same frame by calling Begin()/End() pairs multiple times.
//   Some information such as 'flags' or 'p_open' will only be considered by the first call to Begin().
// - Begin() return false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting
//   anything to the window. Always call a matching End() for each Begin() call, regardless of its return value!
//   [Important: due to legacy reason, this is inconsistent with most other functions such as BeginMenu/EndMenu,
//    BeginPopup/EndPopup, etc. where the EndXXX call should only be called if the corresponding BeginXXX function
//    returned true. Begin and BeginChild are the only odd ones out. Will be fixed in a future update.]
// - Note that the bottom of window stack always contains a window called "Debug".
CIMGUI_API bool ImGui_Begin(const char* name, bool* p_open /* = NULL */, ImGuiWindowFlags flags /* = 0 */);
CIMGUI_API void ImGui_End(void);

// Child Windows
// - Use child windows to begin into a self-contained independent scrolling/clipping regions within a host window. Child windows can embed their own child.
// - For each independent axis of 'size': ==0.0f: use remaining host window size / >0.0f: fixed size / <0.0f: use remaining window size minus abs(size) / Each axis can use a different mode, e.g. ImVec2(0,400).
// - BeginChild() returns false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting anything to the window.
//   Always call a matching EndChild() for each BeginChild() call, regardless of its return value.
//   [Important: due to legacy reason, this is inconsistent with most other functions such as BeginMenu/EndMenu,
//    BeginPopup/EndPopup, etc. where the EndXXX call should only be called if the corresponding BeginXXX function
//    returned true. Begin and BeginChild are the only odd ones out. Will be fixed in a future update.]
CIMGUI_API bool ImGui_BeginChild(const char* str_id, ImVec2 size /* = ImVec2(0, 0) */, bool border /* = false */, ImGuiWindowFlags flags /* = 0 */);
CIMGUI_API bool ImGui_BeginChildID(ImGuiID id, ImVec2 size /* = ImVec2(0, 0) */, bool border /* = false */, ImGuiWindowFlags flags /* = 0 */);
CIMGUI_API void ImGui_EndChild(void);

// Windows Utilities
// - 'current window' = the window we are appending into while inside a Begin()/End() block. 'next window' = next window we will Begin() into.
CIMGUI_API bool        ImGui_IsWindowAppearing(void);
CIMGUI_API bool        ImGui_IsWindowCollapsed(void);
CIMGUI_API bool        ImGui_IsWindowFocused(ImGuiFocusedFlags flags /* = 0 */);  // is current window focused? or its root/child, depending on flags. see flags for options.
CIMGUI_API bool        ImGui_IsWindowHovered(ImGuiHoveredFlags flags /* = 0 */);  // is current window hovered (and typically: not blocked by a popup/modal)? see flags for options. NB: If you are trying to check whether your mouse should be dispatched to imgui or to your app, you should use the 'io.WantCaptureMouse' boolean for that! Please read the FAQ!
CIMGUI_API ImDrawList* ImGui_GetWindowDrawList(void);                             // get draw list associated to the current window, to append your own drawing primitives
CIMGUI_API ImVec2      ImGui_GetWindowPos(void);                                  // get current window position in screen space (useful if you want to do your own drawing via the DrawList API)
CIMGUI_API ImVec2      ImGui_GetWindowSize(void);                                 // get current window size
CIMGUI_API float       ImGui_GetWindowWidth(void);                                // get current window width (shortcut for GetWindowSize().x)
CIMGUI_API float       ImGui_GetWindowHeight(void);                               // get current window height (shortcut for GetWindowSize().y)

// Window manipulation
// - Prefer using SetNextXXX functions (before Begin) rather that SetXXX functions (after Begin).
CIMGUI_API void ImGui_SetNextWindowPos(ImVec2 pos, ImGuiCond cond /* = 0 */);                                       // Implied pivot = ImVec2(0, 0)
CIMGUI_API void ImGui_SetNextWindowPosEx(ImVec2 pos, ImGuiCond cond /* = 0 */, ImVec2 pivot /* = ImVec2(0, 0) */);  // set next window position. call before Begin(). use pivot=(0.5f,0.5f) to center on given point, etc.
CIMGUI_API void ImGui_SetNextWindowSize(ImVec2 size, ImGuiCond cond /* = 0 */);                                     // set next window size. set axis to 0.0f to force an auto-fit on this axis. call before Begin()
CIMGUI_API void ImGui_SetNextWindowSizeConstraints(ImVec2 size_min, ImVec2 size_max, ImGuiSizeCallback custom_callback /* = NULL */, void* custom_callback_data /* = NULL */); // set next window size limits. use -1,-1 on either X/Y axis to preserve the current size. Sizes will be rounded down. Use callback to apply non-trivial programmatic constraints.
CIMGUI_API void ImGui_SetNextWindowContentSize(ImVec2 size);                                                        // set next window content size (~ scrollable client area, which enforce the range of scrollbars). Not including window decorations (title bar, menu bar, etc.) nor WindowPadding. set an axis to 0.0f to leave it automatic. call before Begin()
CIMGUI_API void ImGui_SetNextWindowCollapsed(bool collapsed, ImGuiCond cond /* = 0 */);                             // set next window collapsed state. call before Begin()
CIMGUI_API void ImGui_SetNextWindowFocus(void);                                                                     // set next window to be focused / top-most. call before Begin()
CIMGUI_API void ImGui_SetNextWindowScroll(ImVec2 scroll);                                                           // set next window scrolling value (use < 0.0f to not affect a given axis).
CIMGUI_API void ImGui_SetNextWindowBgAlpha(float alpha);                                                            // set next window background color alpha. helper to easily override the Alpha component of ImGuiCol_WindowBg/ChildBg/PopupBg. you may also use ImGuiWindowFlags_NoBackground.
CIMGUI_API void ImGui_SetWindowPos(ImVec2 pos, ImGuiCond cond /* = 0 */);                                           // (not recommended) set current window position - call within Begin()/End(). prefer using SetNextWindowPos(), as this may incur tearing and side-effects.
CIMGUI_API void ImGui_SetWindowSize(ImVec2 size, ImGuiCond cond /* = 0 */);                                         // (not recommended) set current window size - call within Begin()/End(). set to ImVec2(0, 0) to force an auto-fit. prefer using SetNextWindowSize(), as this may incur tearing and minor side-effects.
CIMGUI_API void ImGui_SetWindowCollapsed(bool collapsed, ImGuiCond cond /* = 0 */);                                 // (not recommended) set current window collapsed state. prefer using SetNextWindowCollapsed().
CIMGUI_API void ImGui_SetWindowFocus(void);                                                                         // (not recommended) set current window to be focused / top-most. prefer using SetNextWindowFocus().
CIMGUI_API void ImGui_SetWindowFontScale(float scale);                                                              // [OBSOLETE] set font scale. Adjust IO.FontGlobalScale if you want to scale all windows. This is an old API! For correct scaling, prefer to reload font + rebuild ImFontAtlas + call style.ScaleAllSizes().
CIMGUI_API void ImGui_SetWindowPosStr(const char* name, ImVec2 pos, ImGuiCond cond /* = 0 */);                      // set named window position.
CIMGUI_API void ImGui_SetWindowSizeStr(const char* name, ImVec2 size, ImGuiCond cond /* = 0 */);                    // set named window size. set axis to 0.0f to force an auto-fit on this axis.
CIMGUI_API void ImGui_SetWindowCollapsedStr(const char* name, bool collapsed, ImGuiCond cond /* = 0 */);            // set named window collapsed state
CIMGUI_API void ImGui_SetWindowFocusStr(const char* name);                                                          // set named window to be focused / top-most. use NULL to remove focus.

// Content region
// - Retrieve available space from a given point. GetContentRegionAvail() is frequently useful.
// - Those functions are bound to be redesigned (they are confusing, incomplete and the Min/Max return values are in local window coordinates which increases confusion)
CIMGUI_API ImVec2 ImGui_GetContentRegionAvail(void);      // == GetContentRegionMax() - GetCursorPos()
CIMGUI_API ImVec2 ImGui_GetContentRegionMax(void);        // current content boundaries (typically window boundaries including scrolling, or current column boundaries), in windows coordinates
CIMGUI_API ImVec2 ImGui_GetWindowContentRegionMin(void);  // content boundaries min for the full window (roughly (0,0)-Scroll), in window coordinates
CIMGUI_API ImVec2 ImGui_GetWindowContentRegionMax(void);  // content boundaries max for the full window (roughly (0,0)+Size-Scroll) where Size can be overridden with SetNextWindowContentSize(), in window coordinates

// Windows Scrolling
// - Any change of Scroll will be applied at the beginning of next frame in the first call to Begin().
// - You may instead use SetNextWindowScroll() prior to calling Begin() to avoid this delay, as an alternative to using SetScrollX()/SetScrollY().
CIMGUI_API float ImGui_GetScrollX(void);                                                     // get scrolling amount [0 .. GetScrollMaxX()]
CIMGUI_API float ImGui_GetScrollY(void);                                                     // get scrolling amount [0 .. GetScrollMaxY()]
CIMGUI_API void  ImGui_SetScrollX(float scroll_x);                                           // set scrolling amount [0 .. GetScrollMaxX()]
CIMGUI_API void  ImGui_SetScrollY(float scroll_y);                                           // set scrolling amount [0 .. GetScrollMaxY()]
CIMGUI_API float ImGui_GetScrollMaxX(void);                                                  // get maximum scrolling amount ~~ ContentSize.x - WindowSize.x - DecorationsSize.x
CIMGUI_API float ImGui_GetScrollMaxY(void);                                                  // get maximum scrolling amount ~~ ContentSize.y - WindowSize.y - DecorationsSize.y
CIMGUI_API void  ImGui_SetScrollHereX(float center_x_ratio /* = 0.5f */);                    // adjust scrolling amount to make current cursor position visible. center_x_ratio=0.0: left, 0.5: center, 1.0: right. When using to make a "default/current item" visible, consider using SetItemDefaultFocus() instead.
CIMGUI_API void  ImGui_SetScrollHereY(float center_y_ratio /* = 0.5f */);                    // adjust scrolling amount to make current cursor position visible. center_y_ratio=0.0: top, 0.5: center, 1.0: bottom. When using to make a "default/current item" visible, consider using SetItemDefaultFocus() instead.
CIMGUI_API void  ImGui_SetScrollFromPosX(float local_x, float center_x_ratio /* = 0.5f */);  // adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position.
CIMGUI_API void  ImGui_SetScrollFromPosY(float local_y, float center_y_ratio /* = 0.5f */);  // adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position.

// Parameters stacks (shared)
CIMGUI_API void ImGui_PushFont(ImFont* font);                             // use NULL as a shortcut to push default font
CIMGUI_API void ImGui_PopFont(void);
CIMGUI_API void ImGui_PushStyleColor(ImGuiCol idx, ImU32 col);            // modify a style color. always use this if you modify the style after NewFrame().
CIMGUI_API void ImGui_PushStyleColorImVec4(ImGuiCol idx, ImVec4 col);
CIMGUI_API void ImGui_PopStyleColor(void);                                // Implied count = 1
CIMGUI_API void ImGui_PopStyleColorEx(int count /* = 1 */);
CIMGUI_API void ImGui_PushStyleVar(ImGuiStyleVar idx, float val);         // modify a style float variable. always use this if you modify the style after NewFrame().
CIMGUI_API void ImGui_PushStyleVarImVec2(ImGuiStyleVar idx, ImVec2 val);  // modify a style ImVec2 variable. always use this if you modify the style after NewFrame().
CIMGUI_API void ImGui_PopStyleVar(void);                                  // Implied count = 1
CIMGUI_API void ImGui_PopStyleVarEx(int count /* = 1 */);
CIMGUI_API void ImGui_PushAllowKeyboardFocus(bool allow_keyboard_focus);  // == tab stop enable. Allow focusing using TAB/Shift-TAB, enabled by default but you can disable it for certain widgets
CIMGUI_API void ImGui_PopAllowKeyboardFocus(void);
CIMGUI_API void ImGui_PushButtonRepeat(bool repeat);                      // in 'repeat' mode, Button*() functions return repeated true in a typematic manner (using io.KeyRepeatDelay/io.KeyRepeatRate setting). Note that you can call IsItemActive() after any Button() to tell if the button is held in the current frame.
CIMGUI_API void ImGui_PopButtonRepeat(void);

// Parameters stacks (current window)
CIMGUI_API void  ImGui_PushItemWidth(float item_width);                       // push width of items for common large "item+label" widgets. >0.0f: width in pixels, <0.0f align xx pixels to the right of window (so -FLT_MIN always align width to the right side).
CIMGUI_API void  ImGui_PopItemWidth(void);
CIMGUI_API void  ImGui_SetNextItemWidth(float item_width);                    // set width of the _next_ common large "item+label" widget. >0.0f: width in pixels, <0.0f align xx pixels to the right of window (so -FLT_MIN always align width to the right side)
CIMGUI_API float ImGui_CalcItemWidth(void);                                   // width of item given pushed settings and current cursor position. NOT necessarily the width of last item unlike most 'Item' functions.
CIMGUI_API void  ImGui_PushTextWrapPos(float wrap_local_pos_x /* = 0.0f */);  // push word-wrapping position for Text*() commands. < 0.0f: no wrapping; 0.0f: wrap to end of window (or column); > 0.0f: wrap at 'wrap_pos_x' position in window local space
CIMGUI_API void  ImGui_PopTextWrapPos(void);

// Style read access
// - Use the style editor (ShowStyleEditor() function) to interactively see what the colors are)
CIMGUI_API ImFont*       ImGui_GetFont(void);                                              // get current font
CIMGUI_API float         ImGui_GetFontSize(void);                                          // get current font size (= height in pixels) of current font with current scale applied
CIMGUI_API ImVec2        ImGui_GetFontTexUvWhitePixel(void);                               // get UV coordinate for a while pixel, useful to draw custom shapes via the ImDrawList API
CIMGUI_API ImU32         ImGui_GetColorU32(ImGuiCol idx);                                  // Implied alpha_mul = 1.0f
CIMGUI_API ImU32         ImGui_GetColorU32Ex(ImGuiCol idx, float alpha_mul /* = 1.0f */);  // retrieve given style color with style alpha applied and optional extra alpha multiplier, packed as a 32-bit value suitable for ImDrawList
CIMGUI_API ImU32         ImGui_GetColorU32ImVec4(ImVec4 col);                              // retrieve given color with style alpha applied, packed as a 32-bit value suitable for ImDrawList
CIMGUI_API ImU32         ImGui_GetColorU32ImU32(ImU32 col);                                // retrieve given color with style alpha applied, packed as a 32-bit value suitable for ImDrawList
CIMGUI_API const ImVec4* ImGui_GetStyleColorVec4(ImGuiCol idx);                            // retrieve style color as stored in ImGuiStyle structure. use to feed back into PushStyleColor(), otherwise use GetColorU32() to get style color with style alpha baked in.

// Cursor / Layout
// - By "cursor" we mean the current output position.
// - The typical widget behavior is to output themselves at the current cursor position, then move the cursor one line down.
// - You can call SameLine() between widgets to undo the last carriage return and output at the right of the preceding widget.
// - Attention! We currently have inconsistencies between window-local and absolute positions we will aim to fix with future API:
//    Window-local coordinates:   SameLine(), GetCursorPos(), SetCursorPos(), GetCursorStartPos(), GetContentRegionMax(), GetWindowContentRegion*(), PushTextWrapPos()
//    Absolute coordinate:        GetCursorScreenPos(), SetCursorScreenPos(), all ImDrawList:: functions.
CIMGUI_API void   ImGui_Separator(void);                          // separator, generally horizontal. inside a menu bar or in horizontal layout mode, this becomes a vertical separator.
CIMGUI_API void   ImGui_SameLine(void);                           // Implied offset_from_start_x = 0.0f, spacing = -1.0f
CIMGUI_API void   ImGui_SameLineEx(float offset_from_start_x /* = 0.0f */, float spacing /* = -1.0f */); // call between widgets or groups to layout them horizontally. X position given in window coordinates.
CIMGUI_API void   ImGui_NewLine(void);                            // undo a SameLine() or force a new line when in a horizontal-layout context.
CIMGUI_API void   ImGui_Spacing(void);                            // add vertical spacing.
CIMGUI_API void   ImGui_Dummy(ImVec2 size);                       // add a dummy item of given size. unlike InvisibleButton(), Dummy() won't take the mouse click or be navigable into.
CIMGUI_API void   ImGui_Indent(void);                             // Implied indent_w = 0.0f
CIMGUI_API void   ImGui_IndentEx(float indent_w /* = 0.0f */);    // move content position toward the right, by indent_w, or style.IndentSpacing if indent_w <= 0
CIMGUI_API void   ImGui_Unindent(void);                           // Implied indent_w = 0.0f
CIMGUI_API void   ImGui_UnindentEx(float indent_w /* = 0.0f */);  // move content position back to the left, by indent_w, or style.IndentSpacing if indent_w <= 0
CIMGUI_API void   ImGui_BeginGroup(void);                         // lock horizontal starting position
CIMGUI_API void   ImGui_EndGroup(void);                           // unlock horizontal starting position + capture the whole group bounding box into one "item" (so you can use IsItemHovered() or layout primitives such as SameLine() on whole group, etc.)
CIMGUI_API ImVec2 ImGui_GetCursorPos(void);                       // cursor position in window coordinates (relative to window position)
CIMGUI_API float  ImGui_GetCursorPosX(void);                      //   (some functions are using window-relative coordinates, such as: GetCursorPos, GetCursorStartPos, GetContentRegionMax, GetWindowContentRegion* etc.
CIMGUI_API float  ImGui_GetCursorPosY(void);                      //    other functions such as GetCursorScreenPos or everything in ImDrawList::
CIMGUI_API void   ImGui_SetCursorPos(ImVec2 local_pos);           //    are using the main, absolute coordinate system.
CIMGUI_API void   ImGui_SetCursorPosX(float local_x);             //    GetWindowPos() + GetCursorPos() == GetCursorScreenPos() etc.)
CIMGUI_API void   ImGui_SetCursorPosY(float local_y);             //
CIMGUI_API ImVec2 ImGui_GetCursorStartPos(void);                  // initial cursor position in window coordinates
CIMGUI_API ImVec2 ImGui_GetCursorScreenPos(void);                 // cursor position in absolute coordinates (useful to work with ImDrawList API). generally top-left == GetMainViewport()->Pos == (0,0) in single viewport mode, and bottom-right == GetMainViewport()->Pos+Size == io.DisplaySize in single-viewport mode.
CIMGUI_API void   ImGui_SetCursorScreenPos(ImVec2 pos);           // cursor position in absolute coordinates
CIMGUI_API void   ImGui_AlignTextToFramePadding(void);            // vertically align upcoming text baseline to FramePadding.y so that it will align properly to regularly framed items (call if you have text on a line before a framed item)
CIMGUI_API float  ImGui_GetTextLineHeight(void);                  // ~ FontSize
CIMGUI_API float  ImGui_GetTextLineHeightWithSpacing(void);       // ~ FontSize + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of text)
CIMGUI_API float  ImGui_GetFrameHeight(void);                     // ~ FontSize + style.FramePadding.y * 2
CIMGUI_API float  ImGui_GetFrameHeightWithSpacing(void);          // ~ FontSize + style.FramePadding.y * 2 + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of framed widgets)

// ID stack/scopes
// Read the FAQ (docs/FAQ.md or http://dearimgui.org/faq) for more details about how ID are handled in dear imgui.
// - Those questions are answered and impacted by understanding of the ID stack system:
//   - "Q: Why is my widget not reacting when I click on it?"
//   - "Q: How can I have widgets with an empty label?"
//   - "Q: How can I have multiple widgets with the same label?"
// - Short version: ID are hashes of the entire ID stack. If you are creating widgets in a loop you most likely
//   want to push a unique identifier (e.g. object pointer, loop index) to uniquely differentiate them.
// - You can also use the "Label##foobar" syntax within widget label to distinguish them from each others.
// - In this header file we use the "label"/"name" terminology to denote a string that will be displayed + used as an ID,
//   whereas "str_id" denote a string that is only used as an ID and not normally displayed.
CIMGUI_API void    ImGui_PushID(const char* str_id);                                   // push string into the ID stack (will hash string).
CIMGUI_API void    ImGui_PushIDStr(const char* str_id_begin, const char* str_id_end);  // push string into the ID stack (will hash string).
CIMGUI_API void    ImGui_PushIDPtr(const void* ptr_id);                                // push pointer into the ID stack (will hash pointer).
CIMGUI_API void    ImGui_PushIDInt(int int_id);                                        // push integer into the ID stack (will hash integer).
CIMGUI_API void    ImGui_PopID(void);                                                  // pop from the ID stack.
CIMGUI_API ImGuiID ImGui_GetID(const char* str_id);                                    // calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself
CIMGUI_API ImGuiID ImGui_GetIDStr(const char* str_id_begin, const char* str_id_end);
CIMGUI_API ImGuiID ImGui_GetIDPtr(const void* ptr_id);

// Widgets: Text
CIMGUI_API void ImGui_TextUnformatted(const char* text);                                           // Implied text_end = NULL
CIMGUI_API void ImGui_TextUnformattedEx(const char* text, const char* text_end /* = NULL */);      // raw text without formatting. Roughly equivalent to Text("%s", text) but: A) doesn't require null terminated string if 'text_end' is specified, B) it's faster, no memory copy is done, no buffer size limits, recommended for long chunks of text.
CIMGUI_API void ImGui_Text(const char* fmt, ...) IM_FMTARGS(1);                                    // formatted text
CIMGUI_API void ImGui_TextV(const char* fmt, va_list args) IM_FMTLIST(1);
CIMGUI_API void ImGui_TextColored(ImVec4 col, const char* fmt, ...) IM_FMTARGS(2);                 // shortcut for PushStyleColor(ImGuiCol_Text, col); Text(fmt, ...); PopStyleColor();
CIMGUI_API void ImGui_TextColoredV(ImVec4 col, const char* fmt, va_list args) IM_FMTLIST(2);
CIMGUI_API void ImGui_TextDisabled(const char* fmt, ...) IM_FMTARGS(1);                            // shortcut for PushStyleColor(ImGuiCol_Text, style.Colors[ImGuiCol_TextDisabled]); Text(fmt, ...); PopStyleColor();
CIMGUI_API void ImGui_TextDisabledV(const char* fmt, va_list args) IM_FMTLIST(1);
CIMGUI_API void ImGui_TextWrapped(const char* fmt, ...) IM_FMTARGS(1);                             // shortcut for PushTextWrapPos(0.0f); Text(fmt, ...); PopTextWrapPos();. Note that this won't work on an auto-resizing window if there's no other widgets to extend the window width, yoy may need to set a size using SetNextWindowSize().
CIMGUI_API void ImGui_TextWrappedV(const char* fmt, va_list args) IM_FMTLIST(1);
CIMGUI_API void ImGui_LabelText(const char* label, const char* fmt, ...) IM_FMTARGS(2);            // display text+label aligned the same way as value+label widgets
CIMGUI_API void ImGui_LabelTextV(const char* label, const char* fmt, va_list args) IM_FMTLIST(2);
CIMGUI_API void ImGui_BulletText(const char* fmt, ...) IM_FMTARGS(1);                              // shortcut for Bullet()+Text()
CIMGUI_API void ImGui_BulletTextV(const char* fmt, va_list args) IM_FMTLIST(1);

// Widgets: Main
// - Most widgets return true when the value has been changed or when pressed/selected
// - You may also use one of the many IsItemXXX functions (e.g. IsItemActive, IsItemHovered, etc.) to query widget state.
CIMGUI_API bool ImGui_Button(const char* label);                                                               // Implied size = ImVec2(0, 0)
CIMGUI_API bool ImGui_ButtonEx(const char* label, ImVec2 size /* = ImVec2(0, 0) */);                           // button
CIMGUI_API bool ImGui_SmallButton(const char* label);                                                          // button with FramePadding=(0,0) to easily embed within text
CIMGUI_API bool ImGui_InvisibleButton(const char* str_id, ImVec2 size, ImGuiButtonFlags flags /* = 0 */);      // flexible button behavior without the visuals, frequently useful to build custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.)
CIMGUI_API bool ImGui_ArrowButton(const char* str_id, ImGuiDir dir);                                           // square button with an arrow shape
CIMGUI_API bool ImGui_Checkbox(const char* label, bool* v);
CIMGUI_API bool ImGui_CheckboxFlagsIntPtr(const char* label, int* flags, int flags_value);
CIMGUI_API bool ImGui_CheckboxFlagsUintPtr(const char* label, unsigned int* flags, unsigned int flags_value);
CIMGUI_API bool ImGui_RadioButton(const char* label, bool active);                                             // use with e.g. if (RadioButton("one", my_value==1)) { my_value = 1; }
CIMGUI_API bool ImGui_RadioButtonIntPtr(const char* label, int* v, int v_button);                              // shortcut to handle the above pattern when value is an integer
CIMGUI_API void ImGui_ProgressBar(float fraction, ImVec2 size_arg /* = ImVec2(-FLT_MIN, 0) */, const char* overlay /* = NULL */);
CIMGUI_API void ImGui_Bullet(void);                                                                            // draw a small circle + keep the cursor on the same line. advance cursor x position by GetTreeNodeToLabelSpacing(), same distance that TreeNode() uses

// Widgets: Images
// - Read about ImTextureID here: https://github.com/ocornut/imgui/wiki/Image-Loading-and-Displaying-Examples
CIMGUI_API void ImGui_Image(ImTextureID user_texture_id, ImVec2 size);                            // Implied uv0 = ImVec2(0, 0), uv1 = ImVec2(1, 1), tint_col = ImVec4(1, 1, 1, 1), border_col = ImVec4(0, 0, 0, 0)
CIMGUI_API void ImGui_ImageEx(ImTextureID user_texture_id, ImVec2 size, ImVec2 uv0 /* = ImVec2(0, 0) */, ImVec2 uv1 /* = ImVec2(1, 1) */, ImVec4 tint_col /* = ImVec4(1, 1, 1, 1) */, ImVec4 border_col /* = ImVec4(0, 0, 0, 0) */);
CIMGUI_API bool ImGui_ImageButton(const char* str_id, ImTextureID user_texture_id, ImVec2 size);  // Implied uv0 = ImVec2(0, 0), uv1 = ImVec2(1, 1), bg_col = ImVec4(0, 0, 0, 0), tint_col = ImVec4(1, 1, 1, 1)
CIMGUI_API bool ImGui_ImageButtonEx(const char* str_id, ImTextureID user_texture_id, ImVec2 size, ImVec2 uv0 /* = ImVec2(0, 0) */, ImVec2 uv1 /* = ImVec2(1, 1) */, ImVec4 bg_col /* = ImVec4(0, 0, 0, 0) */, ImVec4 tint_col /* = ImVec4(1, 1, 1, 1) */);

// Widgets: Combo Box (Dropdown)
// - The BeginCombo()/EndCombo() api allows you to manage your contents and selection state however you want it, by creating e.g. Selectable() items.
// - The old Combo() api are helpers over BeginCombo()/EndCombo() which are kept available for convenience purpose. This is analogous to how ListBox are created.
CIMGUI_API bool ImGui_BeginCombo(const char* label, const char* preview_value, ImGuiComboFlags flags /* = 0 */);
CIMGUI_API void ImGui_EndCombo(void);                                                                                                                                      // only call EndCombo() if BeginCombo() returns true!
CIMGUI_API bool ImGui_ComboChar(const char* label, int* current_item, const char*const items[], int items_count);                                                          // Implied popup_max_height_in_items = -1
CIMGUI_API bool ImGui_ComboCharEx(const char* label, int* current_item, const char*const items[], int items_count, int popup_max_height_in_items /* = -1 */);
CIMGUI_API bool ImGui_Combo(const char* label, int* current_item, const char* items_separated_by_zeros);                                                                   // Implied popup_max_height_in_items = -1
CIMGUI_API bool ImGui_ComboEx(const char* label, int* current_item, const char* items_separated_by_zeros, int popup_max_height_in_items /* = -1 */);                       // Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"
CIMGUI_API bool ImGui_ComboCallback(const char* label, int* current_item, bool (*items_getter)(void* data, int idx, const char** out_text), void* data, int items_count);  // Implied popup_max_height_in_items = -1
CIMGUI_API bool ImGui_ComboCallbackEx(const char* label, int* current_item, bool (*items_getter)(void* data, int idx, const char** out_text), void* data, int items_count, int popup_max_height_in_items /* = -1 */);

// Widgets: Drag Sliders
// - CTRL+Click on any drag box to turn them into an input box. Manually input values aren't clamped by default and can go off-bounds. Use ImGuiSliderFlags_AlwaysClamp to always clamp.
// - For all the Float2/Float3/Float4/Int2/Int3/Int4 versions of every function, note that a 'float v[X]' function argument is the same as 'float* v',
//   the array syntax is just a way to document the number of elements that are expected to be accessible. You can pass address of your first element out of a contiguous set, e.g. &myvector.x
// - Adjust format string to decorate the value with a prefix, a suffix, or adapt the editing and display precision e.g. "%.3f" -> 1.234; "%5.2f secs" -> 01.23 secs; "Biscuit: %.0f" -> Biscuit: 1; etc.
// - Format string may also be set to NULL or use the default format ("%f" or "%d").
// - Speed are per-pixel of mouse movement (v_speed=0.2f: mouse needs to move by 5 pixels to increase value by 1). For gamepad/keyboard navigation, minimum speed is Max(v_speed, minimum_step_at_given_precision).
// - Use v_min < v_max to clamp edits to given limits. Note that CTRL+Click manual input can override those limits if ImGuiSliderFlags_AlwaysClamp is not used.
// - Use v_max = FLT_MAX / INT_MAX etc to avoid clamping to a maximum, same with v_min = -FLT_MAX / INT_MIN to avoid clamping to a minimum.
// - We use the same sets of flags for DragXXX() and SliderXXX() functions as the features are the same and it makes it easier to swap them.
// - Legacy: Pre-1.78 there are DragXXX() function signatures that take a final `float power=1.0f' argument instead of the `ImGuiSliderFlags flags=0' argument.
//   If you get a warning converting a float to ImGuiSliderFlags, read https://github.com/ocornut/imgui/issues/3361
CIMGUI_API bool ImGui_DragFloat(const char* label, float* v);                                                 // Implied v_speed = 1.0f, v_min = 0.0f, v_max = 0.0f, format = "%.3f", flags = 0
CIMGUI_API bool ImGui_DragFloatEx(const char* label, float* v, float v_speed /* = 1.0f */, float v_min /* = 0.0f */, float v_max /* = 0.0f */, const char* format /* = "%.3f" */, ImGuiSliderFlags flags /* = 0 */); // If v_min >= v_max we have no bound
CIMGUI_API bool ImGui_DragFloat2(const char* label, float v[2]);                                              // Implied v_speed = 1.0f, v_min = 0.0f, v_max = 0.0f, format = "%.3f", flags = 0
CIMGUI_API bool ImGui_DragFloat2Ex(const char* label, float v[2], float v_speed /* = 1.0f */, float v_min /* = 0.0f */, float v_max /* = 0.0f */, const char* format /* = "%.3f" */, ImGuiSliderFlags flags /* = 0 */);
CIMGUI_API bool ImGui_DragFloat3(const char* label, float v[3]);                                              // Implied v_speed = 1.0f, v_min = 0.0f, v_max = 0.0f, format = "%.3f", flags = 0
CIMGUI_API bool ImGui_DragFloat3Ex(const char* label, float v[3], float v_speed /* = 1.0f */, float v_min /* = 0.0f */, float v_max /* = 0.0f */, const char* format /* = "%.3f" */, ImGuiSliderFlags flags /* = 0 */);
CIMGUI_API bool ImGui_DragFloat4(const char* label, float v[4]);                                              // Implied v_speed = 1.0f, v_min = 0.0f, v_max = 0.0f, format = "%.3f", flags = 0
CIMGUI_API bool ImGui_DragFloat4Ex(const char* label, float v[4], float v_speed /* = 1.0f */, float v_min /* = 0.0f */, float v_max /* = 0.0f */, const char* format /* = "%.3f" */, ImGuiSliderFlags flags /* = 0 */);
CIMGUI_API bool ImGui_DragFloatRange2(const char* label, float* v_current_min, float* v_current_max);         // Implied v_speed = 1.0f, v_min = 0.0f, v_max = 0.0f, format = "%.3f", format_max = NULL, flags = 0
CIMGUI_API bool ImGui_DragFloatRange2Ex(const char* label, float* v_current_min, float* v_current_max, float v_speed /* = 1.0f */, float v_min /* = 0.0f */, float v_max /* = 0.0f */, const char* format /* = "%.3f" */, const char* format_max /* = NULL */, ImGuiSliderFlags flags /* = 0 */);
CIMGUI_API bool ImGui_DragInt(const char* label, int* v);                                                     // Implied v_speed = 1.0f, v_min = 0, v_max = 0, format = "%d", flags = 0
CIMGUI_API bool ImGui_DragIntEx(const char* label, int* v, float v_speed /* = 1.0f */, int v_min /* = 0 */, int v_max /* = 0 */, const char* format /* = "%d" */, ImGuiSliderFlags flags /* = 0 */); // If v_min >= v_max we have no bound
CIMGUI_API bool ImGui_DragInt2(const char* label, int v[2]);                                                  // Implied v_speed = 1.0f, v_min = 0, v_max = 0, format = "%d", flags = 0
CIMGUI_API bool ImGui_DragInt2Ex(const char* label, int v[2], float v_speed /* = 1.0f */, int v_min /* = 0 */, int v_max /* = 0 */, const char* format /* = "%d" */, ImGuiSliderFlags flags /* = 0 */);
CIMGUI_API bool ImGui_DragInt3(const char* label, int v[3]);                                                  // Implied v_speed = 1.0f, v_min = 0, v_max = 0, format = "%d", flags = 0
CIMGUI_API bool ImGui_DragInt3Ex(const char* label, int v[3], float v_speed /* = 1.0f */, int v_min /* = 0 */, int v_max /* = 0 */, const char* format /* = "%d" */, ImGuiSliderFlags flags /* = 0 */);
CIMGUI_API bool ImGui_DragInt4(const char* label, int v[4]);                                                  // Implied v_speed = 1.0f, v_min = 0, v_max = 0, format = "%d", flags = 0
CIMGUI_API bool ImGui_DragInt4Ex(const char* label, int v[4], float v_speed /* = 1.0f */, int v_min /* = 0 */, int v_max /* = 0 */, const char* format /* = "%d" */, ImGuiSliderFlags flags /* = 0 */);
CIMGUI_API bool ImGui_DragIntRange2(const char* label, int* v_current_min, int* v_current_max);               // Implied v_speed = 1.0f, v_min = 0, v_max = 0, format = "%d", format_max = NULL, flags = 0
CIMGUI_API bool ImGui_DragIntRange2Ex(const char* label, int* v_current_min, int* v_current_max, float v_speed /* = 1.0f */, int v_min /* = 0 */, int v_max /* = 0 */, const char* format /* = "%d" */, const char* format_max /* = NULL */, ImGuiSliderFlags flags /* = 0 */);
CIMGUI_API bool ImGui_DragScalar(const char* label, ImGuiDataType data_type, void* p_data);                   // Implied v_speed = 1.0f, p_min = NULL, p_max = NULL, format = NULL, flags = 0
CIMGUI_API bool ImGui_DragScalarEx(const char* label, ImGuiDataType data_type, void* p_data, float v_speed /* = 1.0f */, const void* p_min /* = NULL */, const void* p_max /* = NULL */, const char* format /* = NULL */, ImGuiSliderFlags flags /* = 0 */);
CIMGUI_API bool ImGui_DragScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components);  // Implied v_speed = 1.0f, p_min = NULL, p_max = NULL, format = NULL, flags = 0
CIMGUI_API bool ImGui_DragScalarNEx(const char* label, ImGuiDataType data_type, void* p_data, int components, float v_speed /* = 1.0f */, const void* p_min /* = NULL */, const void* p_max /* = NULL */, const char* format /* = NULL */, ImGuiSliderFlags flags /* = 0 */);

// Widgets: Regular Sliders
// - CTRL+Click on any slider to turn them into an input box. Manually input values aren't clamped by default and can go off-bounds. Use ImGuiSliderFlags_AlwaysClamp to always clamp.
// - Adjust format string to decorate the value with a prefix, a suffix, or adapt the editing and display precision e.g. "%.3f" -> 1.234; "%5.2f secs" -> 01.23 secs; "Biscuit: %.0f" -> Biscuit: 1; etc.
// - Format string may also be set to NULL or use the default format ("%f" or "%d").
// - Legacy: Pre-1.78 there are SliderXXX() function signatures that take a final `float power=1.0f' argument instead of the `ImGuiSliderFlags flags=0' argument.
//   If you get a warning converting a float to ImGuiSliderFlags, read https://github.com/ocornut/imgui/issues/3361
CIMGUI_API bool ImGui_SliderFloat(const char* label, float* v, float v_min, float v_max);                                                                                       // Implied format = "%.3f", flags = 0
CIMGUI_API bool ImGui_SliderFloatEx(const char* label, float* v, float v_min, float v_max, const char* format /* = "%.3f" */, ImGuiSliderFlags flags /* = 0 */);                // adjust format to decorate the value with a prefix or a suffix for in-slider labels or unit display.
CIMGUI_API bool ImGui_SliderFloat2(const char* label, float v[2], float v_min, float v_max);                                                                                    // Implied format = "%.3f", flags = 0
CIMGUI_API bool ImGui_SliderFloat2Ex(const char* label, float v[2], float v_min, float v_max, const char* format /* = "%.3f" */, ImGuiSliderFlags flags /* = 0 */);
CIMGUI_API bool ImGui_SliderFloat3(const char* label, float v[3], float v_min, float v_max);                                                                                    // Implied format = "%.3f", flags = 0
CIMGUI_API bool ImGui_SliderFloat3Ex(const char* label, float v[3], float v_min, float v_max, const char* format /* = "%.3f" */, ImGuiSliderFlags flags /* = 0 */);
CIMGUI_API bool ImGui_SliderFloat4(const char* label, float v[4], float v_min, float v_max);                                                                                    // Implied format = "%.3f", flags = 0
CIMGUI_API bool ImGui_SliderFloat4Ex(const char* label, float v[4], float v_min, float v_max, const char* format /* = "%.3f" */, ImGuiSliderFlags flags /* = 0 */);
CIMGUI_API bool ImGui_SliderAngle(const char* label, float* v_rad);                                                                                                             // Implied v_degrees_min = -360.0f, v_degrees_max = +360.0f, format = "%.0f deg", flags = 0
CIMGUI_API bool ImGui_SliderAngleEx(const char* label, float* v_rad, float v_degrees_min /* = -360.0f */, float v_degrees_max /* = +360.0f */, const char* format /* = "%.0f deg" */, ImGuiSliderFlags flags /* = 0 */);
CIMGUI_API bool ImGui_SliderInt(const char* label, int* v, int v_min, int v_max);                                                                                               // Implied format = "%d", flags = 0
CIMGUI_API bool ImGui_SliderIntEx(const char* label, int* v, int v_min, int v_max, const char* format /* = "%d" */, ImGuiSliderFlags flags /* = 0 */);
CIMGUI_API bool ImGui_SliderInt2(const char* label, int v[2], int v_min, int v_max);                                                                                            // Implied format = "%d", flags = 0
CIMGUI_API bool ImGui_SliderInt2Ex(const char* label, int v[2], int v_min, int v_max, const char* format /* = "%d" */, ImGuiSliderFlags flags /* = 0 */);
CIMGUI_API bool ImGui_SliderInt3(const char* label, int v[3], int v_min, int v_max);                                                                                            // Implied format = "%d", flags = 0
CIMGUI_API bool ImGui_SliderInt3Ex(const char* label, int v[3], int v_min, int v_max, const char* format /* = "%d" */, ImGuiSliderFlags flags /* = 0 */);
CIMGUI_API bool ImGui_SliderInt4(const char* label, int v[4], int v_min, int v_max);                                                                                            // Implied format = "%d", flags = 0
CIMGUI_API bool ImGui_SliderInt4Ex(const char* label, int v[4], int v_min, int v_max, const char* format /* = "%d" */, ImGuiSliderFlags flags /* = 0 */);
CIMGUI_API bool ImGui_SliderScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max);                                             // Implied format = NULL, flags = 0
CIMGUI_API bool ImGui_SliderScalarEx(const char* label, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format /* = NULL */, ImGuiSliderFlags flags /* = 0 */);
CIMGUI_API bool ImGui_SliderScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_min, const void* p_max);                            // Implied format = NULL, flags = 0
CIMGUI_API bool ImGui_SliderScalarNEx(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_min, const void* p_max, const char* format /* = NULL */, ImGuiSliderFlags flags /* = 0 */);
CIMGUI_API bool ImGui_VSliderFloat(const char* label, ImVec2 size, float* v, float v_min, float v_max);                                                                         // Implied format = "%.3f", flags = 0
CIMGUI_API bool ImGui_VSliderFloatEx(const char* label, ImVec2 size, float* v, float v_min, float v_max, const char* format /* = "%.3f" */, ImGuiSliderFlags flags /* = 0 */);
CIMGUI_API bool ImGui_VSliderInt(const char* label, ImVec2 size, int* v, int v_min, int v_max);                                                                                 // Implied format = "%d", flags = 0
CIMGUI_API bool ImGui_VSliderIntEx(const char* label, ImVec2 size, int* v, int v_min, int v_max, const char* format /* = "%d" */, ImGuiSliderFlags flags /* = 0 */);
CIMGUI_API bool ImGui_VSliderScalar(const char* label, ImVec2 size, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max);                               // Implied format = NULL, flags = 0
CIMGUI_API bool ImGui_VSliderScalarEx(const char* label, ImVec2 size, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format /* = NULL */, ImGuiSliderFlags flags /* = 0 */);

// Widgets: Input with Keyboard
// - If you want to use InputText() with std::string or any custom dynamic string type, see misc/cpp/imgui_stdlib.h and comments in imgui_demo.cpp.
// - Most of the ImGuiInputTextFlags flags are only useful for InputText() and not for InputFloatX, InputIntX, InputDouble etc.
CIMGUI_API bool ImGui_InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags /* = 0 */);                              // Implied callback = NULL, user_data = NULL
CIMGUI_API bool ImGui_InputTextEx(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags /* = 0 */, ImGuiInputTextCallback callback /* = NULL */, void* user_data /* = NULL */);
CIMGUI_API bool ImGui_InputTextMultiline(const char* label, char* buf, size_t buf_size);                                                          // Implied size = ImVec2(0, 0), flags = 0, callback = NULL, user_data = NULL
CIMGUI_API bool ImGui_InputTextMultilineEx(const char* label, char* buf, size_t buf_size, ImVec2 size /* = ImVec2(0, 0) */, ImGuiInputTextFlags flags /* = 0 */, ImGuiInputTextCallback callback /* = NULL */, void* user_data /* = NULL */);
CIMGUI_API bool ImGui_InputTextWithHint(const char* label, const char* hint, char* buf, size_t buf_size, ImGuiInputTextFlags flags /* = 0 */);    // Implied callback = NULL, user_data = NULL
CIMGUI_API bool ImGui_InputTextWithHintEx(const char* label, const char* hint, char* buf, size_t buf_size, ImGuiInputTextFlags flags /* = 0 */, ImGuiInputTextCallback callback /* = NULL */, void* user_data /* = NULL */);
CIMGUI_API bool ImGui_InputFloat(const char* label, float* v);                                                                                    // Implied step = 0.0f, step_fast = 0.0f, format = "%.3f", flags = 0
CIMGUI_API bool ImGui_InputFloatEx(const char* label, float* v, float step /* = 0.0f */, float step_fast /* = 0.0f */, const char* format /* = "%.3f" */, ImGuiInputTextFlags flags /* = 0 */);
CIMGUI_API bool ImGui_InputFloat2(const char* label, float v[2]);                                                                                 // Implied format = "%.3f", flags = 0
CIMGUI_API bool ImGui_InputFloat2Ex(const char* label, float v[2], const char* format /* = "%.3f" */, ImGuiInputTextFlags flags /* = 0 */);
CIMGUI_API bool ImGui_InputFloat3(const char* label, float v[3]);                                                                                 // Implied format = "%.3f", flags = 0
CIMGUI_API bool ImGui_InputFloat3Ex(const char* label, float v[3], const char* format /* = "%.3f" */, ImGuiInputTextFlags flags /* = 0 */);
CIMGUI_API bool ImGui_InputFloat4(const char* label, float v[4]);                                                                                 // Implied format = "%.3f", flags = 0
CIMGUI_API bool ImGui_InputFloat4Ex(const char* label, float v[4], const char* format /* = "%.3f" */, ImGuiInputTextFlags flags /* = 0 */);
CIMGUI_API bool ImGui_InputInt(const char* label, int* v);                                                                                        // Implied step = 1, step_fast = 100, flags = 0
CIMGUI_API bool ImGui_InputIntEx(const char* label, int* v, int step /* = 1 */, int step_fast /* = 100 */, ImGuiInputTextFlags flags /* = 0 */);
CIMGUI_API bool ImGui_InputInt2(const char* label, int v[2], ImGuiInputTextFlags flags /* = 0 */);
CIMGUI_API bool ImGui_InputInt3(const char* label, int v[3], ImGuiInputTextFlags flags /* = 0 */);
CIMGUI_API bool ImGui_InputInt4(const char* label, int v[4], ImGuiInputTextFlags flags /* = 0 */);
CIMGUI_API bool ImGui_InputDouble(const char* label, double* v);                                                                                  // Implied step = 0.0, step_fast = 0.0, format = "%.6f", flags = 0
CIMGUI_API bool ImGui_InputDoubleEx(const char* label, double* v, double step /* = 0.0 */, double step_fast /* = 0.0 */, const char* format /* = "%.6f" */, ImGuiInputTextFlags flags /* = 0 */);
CIMGUI_API bool ImGui_InputScalar(const char* label, ImGuiDataType data_type, void* p_data);                                                      // Implied p_step = NULL, p_step_fast = NULL, format = NULL, flags = 0
CIMGUI_API bool ImGui_InputScalarEx(const char* label, ImGuiDataType data_type, void* p_data, const void* p_step /* = NULL */, const void* p_step_fast /* = NULL */, const char* format /* = NULL */, ImGuiInputTextFlags flags /* = 0 */);
CIMGUI_API bool ImGui_InputScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components);                                     // Implied p_step = NULL, p_step_fast = NULL, format = NULL, flags = 0
CIMGUI_API bool ImGui_InputScalarNEx(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_step /* = NULL */, const void* p_step_fast /* = NULL */, const char* format /* = NULL */, ImGuiInputTextFlags flags /* = 0 */);

// Widgets: Color Editor/Picker (tip: the ColorEdit* functions have a little color square that can be left-clicked to open a picker, and right-clicked to open an option menu.)
// - Note that in C++ a 'float v[X]' function argument is the _same_ as 'float* v', the array syntax is just a way to document the number of elements that are expected to be accessible.
// - You can pass the address of a first float element out of a contiguous structure, e.g. &myvector.x
CIMGUI_API bool ImGui_ColorEdit3(const char* label, float col[3], ImGuiColorEditFlags flags /* = 0 */);
CIMGUI_API bool ImGui_ColorEdit4(const char* label, float col[4], ImGuiColorEditFlags flags /* = 0 */);
CIMGUI_API bool ImGui_ColorPicker3(const char* label, float col[3], ImGuiColorEditFlags flags /* = 0 */);
CIMGUI_API bool ImGui_ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags flags /* = 0 */, const float* ref_col /* = NULL */);
CIMGUI_API bool ImGui_ColorButton(const char* desc_id, ImVec4 col, ImGuiColorEditFlags flags /* = 0 */);                                      // Implied size = ImVec2(0, 0)
CIMGUI_API bool ImGui_ColorButtonEx(const char* desc_id, ImVec4 col, ImGuiColorEditFlags flags /* = 0 */, ImVec2 size /* = ImVec2(0, 0) */);  // display a color square/button, hover for details, return true when pressed.
CIMGUI_API void ImGui_SetColorEditOptions(ImGuiColorEditFlags flags);                                                                         // initialize current options (generally on application startup) if you want to select a default format, picker type, etc. User will be able to change many settings, unless you pass the _NoOptions flag to your calls.

// Widgets: Trees
// - TreeNode functions return true when the node is open, in which case you need to also call TreePop() when you are finished displaying the tree node contents.
CIMGUI_API bool  ImGui_TreeNode(const char* label);
CIMGUI_API bool  ImGui_TreeNodeStr(const char* str_id, const char* fmt, ...) IM_FMTARGS(2);                                        // helper variation to easily decorelate the id from the displayed string. Read the FAQ about why and how to use ID. to align arbitrary text at the same level as a TreeNode() you can use Bullet().
CIMGUI_API bool  ImGui_TreeNodePtr(const void* ptr_id, const char* fmt, ...) IM_FMTARGS(2);                                        // "
CIMGUI_API bool  ImGui_TreeNodeV(const char* str_id, const char* fmt, va_list args) IM_FMTLIST(2);
CIMGUI_API bool  ImGui_TreeNodeVPtr(const void* ptr_id, const char* fmt, va_list args) IM_FMTLIST(2);
CIMGUI_API bool  ImGui_TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags /* = 0 */);
CIMGUI_API bool  ImGui_TreeNodeExStr(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, ...) IM_FMTARGS(3);
CIMGUI_API bool  ImGui_TreeNodeExPtr(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, ...) IM_FMTARGS(3);
CIMGUI_API bool  ImGui_TreeNodeExV(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args) IM_FMTLIST(3);
CIMGUI_API bool  ImGui_TreeNodeExVPtr(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args) IM_FMTLIST(3);
CIMGUI_API void  ImGui_TreePush(const char* str_id);                                                                               // ~ Indent()+PushId(). Already called by TreeNode() when returning true, but you can call TreePush/TreePop yourself if desired.
CIMGUI_API void  ImGui_TreePushPtr(const void* ptr_id);                                                                            // "
CIMGUI_API void  ImGui_TreePop(void);                                                                                              // ~ Unindent()+PopId()
CIMGUI_API float ImGui_GetTreeNodeToLabelSpacing(void);                                                                            // horizontal distance preceding label when using TreeNode*() or Bullet() == (g.FontSize + style.FramePadding.x*2) for a regular unframed TreeNode
CIMGUI_API bool  ImGui_CollapsingHeader(const char* label, ImGuiTreeNodeFlags flags /* = 0 */);                                    // if returning 'true' the header is open. doesn't indent nor push on ID stack. user doesn't have to call TreePop().
CIMGUI_API bool  ImGui_CollapsingHeaderBoolPtr(const char* label, bool* p_visible, ImGuiTreeNodeFlags flags /* = 0 */);            // when 'p_visible != NULL': if '*p_visible==true' display an additional small close button on upper right of the header which will set the bool to false when clicked, if '*p_visible==false' don't display the header.
CIMGUI_API void  ImGui_SetNextItemOpen(bool is_open, ImGuiCond cond /* = 0 */);                                                    // set next TreeNode/CollapsingHeader open state.

// Widgets: Selectables
// - A selectable highlights when hovered, and can display another color when selected.
// - Neighbors selectable extend their highlight bounds in order to leave no gap between them. This is so a series of selected Selectable appear contiguous.
CIMGUI_API bool ImGui_Selectable(const char* label);                                                                                                         // Implied selected = false, flags = 0, size = ImVec2(0, 0)
CIMGUI_API bool ImGui_SelectableEx(const char* label, bool selected /* = false */, ImGuiSelectableFlags flags /* = 0 */, ImVec2 size /* = ImVec2(0, 0) */);  // "bool selected" carry the selection state (read-only). Selectable() is clicked is returns true so you can modify your selection state. size.x==0.0: use remaining width, size.x>0.0: specify width. size.y==0.0: use label height, size.y>0.0: specify height
CIMGUI_API bool ImGui_SelectableBoolPtr(const char* label, bool* p_selected, ImGuiSelectableFlags flags /* = 0 */);                                          // Implied size = ImVec2(0, 0)
CIMGUI_API bool ImGui_SelectableBoolPtrEx(const char* label, bool* p_selected, ImGuiSelectableFlags flags /* = 0 */, ImVec2 size /* = ImVec2(0, 0) */);      // "bool* p_selected" point to the selection state (read-write), as a convenient helper.

// Widgets: List Boxes
// - This is essentially a thin wrapper to using BeginChild/EndChild with some stylistic changes.
// - The BeginListBox()/EndListBox() api allows you to manage your contents and selection state however you want it, by creating e.g. Selectable() or any items.
// - The simplified/old ListBox() api are helpers over BeginListBox()/EndListBox() which are kept available for convenience purpose. This is analoguous to how Combos are created.
// - Choose frame width:   size.x > 0.0f: custom  /  size.x < 0.0f or -FLT_MIN: right-align   /  size.x = 0.0f (default): use current ItemWidth
// - Choose frame height:  size.y > 0.0f: custom  /  size.y < 0.0f or -FLT_MIN: bottom-align  /  size.y = 0.0f (default): arbitrary default height which can fit ~7 items
CIMGUI_API bool ImGui_BeginListBox(const char* label, ImVec2 size /* = ImVec2(0, 0) */);                                                         // open a framed scrolling region
CIMGUI_API void ImGui_EndListBox(void);                                                                                                          // only call EndListBox() if BeginListBox() returned true!
CIMGUI_API bool ImGui_ListBox(const char* label, int* current_item, const char*const items[], int items_count, int height_in_items /* = -1 */);
CIMGUI_API bool ImGui_ListBoxCallback(const char* label, int* current_item, bool (*items_getter)(void* data, int idx, const char** out_text), void* data, int items_count); // Implied height_in_items = -1
CIMGUI_API bool ImGui_ListBoxCallbackEx(const char* label, int* current_item, bool (*items_getter)(void* data, int idx, const char** out_text), void* data, int items_count, int height_in_items /* = -1 */);

// Widgets: Data Plotting
// - Consider using ImPlot (https://github.com/epezent/implot) which is much better!
CIMGUI_API void ImGui_PlotLines(const char* label, const float* values, int values_count);                                                  // Implied values_offset = 0, overlay_text = NULL, scale_min = FLT_MAX, scale_max = FLT_MAX, graph_size = ImVec2(0, 0), stride = sizeof(float)
CIMGUI_API void ImGui_PlotLinesEx(const char* label, const float* values, int values_count, int values_offset /* = 0 */, const char* overlay_text /* = NULL */, float scale_min /* = FLT_MAX */, float scale_max /* = FLT_MAX */, ImVec2 graph_size /* = ImVec2(0, 0) */, int stride /* = sizeof(float) */);
CIMGUI_API void ImGui_PlotLinesCallback(const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count);      // Implied values_offset = 0, overlay_text = NULL, scale_min = FLT_MAX, scale_max = FLT_MAX, graph_size = ImVec2(0, 0)
CIMGUI_API void ImGui_PlotLinesCallbackEx(const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset /* = 0 */, const char* overlay_text /* = NULL */, float scale_min /* = FLT_MAX */, float scale_max /* = FLT_MAX */, ImVec2 graph_size /* = ImVec2(0, 0) */);
CIMGUI_API void ImGui_PlotHistogram(const char* label, const float* values, int values_count);                                              // Implied values_offset = 0, overlay_text = NULL, scale_min = FLT_MAX, scale_max = FLT_MAX, graph_size = ImVec2(0, 0), stride = sizeof(float)
CIMGUI_API void ImGui_PlotHistogramEx(const char* label, const float* values, int values_count, int values_offset /* = 0 */, const char* overlay_text /* = NULL */, float scale_min /* = FLT_MAX */, float scale_max /* = FLT_MAX */, ImVec2 graph_size /* = ImVec2(0, 0) */, int stride /* = sizeof(float) */);
CIMGUI_API void ImGui_PlotHistogramCallback(const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count);  // Implied values_offset = 0, overlay_text = NULL, scale_min = FLT_MAX, scale_max = FLT_MAX, graph_size = ImVec2(0, 0)
CIMGUI_API void ImGui_PlotHistogramCallbackEx(const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset /* = 0 */, const char* overlay_text /* = NULL */, float scale_min /* = FLT_MAX */, float scale_max /* = FLT_MAX */, ImVec2 graph_size /* = ImVec2(0, 0) */);

// Widgets: Menus
// - Use BeginMenuBar() on a window ImGuiWindowFlags_MenuBar to append to its menu bar.
// - Use BeginMainMenuBar() to create a menu bar at the top of the screen and append to it.
// - Use BeginMenu() to create a menu. You can call BeginMenu() multiple time with the same identifier to append more items to it.
// - Not that MenuItem() keyboardshortcuts are displayed as a convenience but _not processed_ by Dear ImGui at the moment.
CIMGUI_API bool ImGui_BeginMenuBar(void);                                         // append to menu-bar of current window (requires ImGuiWindowFlags_MenuBar flag set on parent window).
CIMGUI_API void ImGui_EndMenuBar(void);                                           // only call EndMenuBar() if BeginMenuBar() returns true!
CIMGUI_API bool ImGui_BeginMainMenuBar(void);                                     // create and append to a full screen menu-bar.
CIMGUI_API void ImGui_EndMainMenuBar(void);                                       // only call EndMainMenuBar() if BeginMainMenuBar() returns true!
CIMGUI_API bool ImGui_BeginMenu(const char* label);                               // Implied enabled = true
CIMGUI_API bool ImGui_BeginMenuEx(const char* label, bool enabled /* = true */);  // create a sub-menu entry. only call EndMenu() if this returns true!
CIMGUI_API void ImGui_EndMenu(void);                                              // only call EndMenu() if BeginMenu() returns true!
CIMGUI_API bool ImGui_MenuItem(const char* label);                                // Implied shortcut = NULL, selected = false, enabled = true
CIMGUI_API bool ImGui_MenuItemEx(const char* label, const char* shortcut /* = NULL */, bool selected /* = false */, bool enabled /* = true */); // return true when activated.
CIMGUI_API bool ImGui_MenuItemBoolPtr(const char* label, const char* shortcut, bool* p_selected, bool enabled /* = true */); // return true when activated + toggle (*p_selected) if p_selected != NULL

// Tooltips
// - Tooltip are windows following the mouse. They do not take focus away.
CIMGUI_API void ImGui_BeginTooltip(void);                                        // begin/append a tooltip window. to create full-featured tooltip (with any kind of items).
CIMGUI_API void ImGui_EndTooltip(void);
CIMGUI_API void ImGui_SetTooltip(const char* fmt, ...) IM_FMTARGS(1);            // set a text-only tooltip, typically use with ImGui::IsItemHovered(). override any previous call to SetTooltip().
CIMGUI_API void ImGui_SetTooltipV(const char* fmt, va_list args) IM_FMTLIST(1);

// Popups, Modals
//  - They block normal mouse hovering detection (and therefore most mouse interactions) behind them.
//  - If not modal: they can be closed by clicking anywhere outside them, or by pressing ESCAPE.
//  - Their visibility state (~bool) is held internally instead of being held by the programmer as we are used to with regular Begin*() calls.
//  - The 3 properties above are related: we need to retain popup visibility state in the library because popups may be closed as any time.
//  - You can bypass the hovering restriction by using ImGuiHoveredFlags_AllowWhenBlockedByPopup when calling IsItemHovered() or IsWindowHovered().
//  - IMPORTANT: Popup identifiers are relative to the current ID stack, so OpenPopup and BeginPopup generally needs to be at the same level of the stack.
//    This is sometimes leading to confusing mistakes. May rework this in the future.

// Popups: begin/end functions
//  - BeginPopup(): query popup state, if open start appending into the window. Call EndPopup() afterwards. ImGuiWindowFlags are forwarded to the window.
//  - BeginPopupModal(): block every interaction behind the window, cannot be closed by user, add a dimming background, has a title bar.
CIMGUI_API bool ImGui_BeginPopup(const char* str_id, ImGuiWindowFlags flags /* = 0 */);                                // return true if the popup is open, and you can start outputting to it.
CIMGUI_API bool ImGui_BeginPopupModal(const char* name, bool* p_open /* = NULL */, ImGuiWindowFlags flags /* = 0 */);  // return true if the modal is open, and you can start outputting to it.
CIMGUI_API void ImGui_EndPopup(void);                                                                                  // only call EndPopup() if BeginPopupXXX() returns true!

// Popups: open/close functions
//  - OpenPopup(): set popup state to open. ImGuiPopupFlags are available for opening options.
//  - If not modal: they can be closed by clicking anywhere outside them, or by pressing ESCAPE.
//  - CloseCurrentPopup(): use inside the BeginPopup()/EndPopup() scope to close manually.
//  - CloseCurrentPopup() is called by default by Selectable()/MenuItem() when activated (FIXME: need some options).
//  - Use ImGuiPopupFlags_NoOpenOverExistingPopup to avoid opening a popup if there's already one at the same level. This is equivalent to e.g. testing for !IsAnyPopupOpen() prior to OpenPopup().
//  - Use IsWindowAppearing() after BeginPopup() to tell if a window just opened.
//  - IMPORTANT: Notice that for OpenPopupOnItemClick() we exceptionally default flags to 1 (== ImGuiPopupFlags_MouseButtonRight) for backward compatibility with older API taking 'int mouse_button = 1' parameter
CIMGUI_API void ImGui_OpenPopup(const char* str_id, ImGuiPopupFlags popup_flags /* = 0 */);                          // call to mark popup as open (don't call every frame!).
CIMGUI_API void ImGui_OpenPopupID(ImGuiID id, ImGuiPopupFlags popup_flags /* = 0 */);                                // id overload to facilitate calling from nested stacks
CIMGUI_API void ImGui_OpenPopupOnItemClick(const char* str_id /* = NULL */, ImGuiPopupFlags popup_flags /* = 1 */);  // helper to open popup when clicked on last item. Default to ImGuiPopupFlags_MouseButtonRight == 1. (note: actually triggers on the mouse _released_ event to be consistent with popup behaviors)
CIMGUI_API void ImGui_CloseCurrentPopup(void);                                                                       // manually close the popup we have begin-ed into.

// Popups: open+begin combined functions helpers
//  - Helpers to do OpenPopup+BeginPopup where the Open action is triggered by e.g. hovering an item and right-clicking.
//  - They are convenient to easily create context menus, hence the name.
//  - IMPORTANT: Notice that BeginPopupContextXXX takes ImGuiPopupFlags just like OpenPopup() and unlike BeginPopup(). For full consistency, we may add ImGuiWindowFlags to the BeginPopupContextXXX functions in the future.
//  - IMPORTANT: Notice that we exceptionally default their flags to 1 (== ImGuiPopupFlags_MouseButtonRight) for backward compatibility with older API taking 'int mouse_button = 1' parameter, so if you add other flags remember to re-add the ImGuiPopupFlags_MouseButtonRight.
CIMGUI_API bool ImGui_BeginPopupContextItem(void);                                                                        // Implied str_id = NULL, popup_flags = 1
CIMGUI_API bool ImGui_BeginPopupContextItemEx(const char* str_id /* = NULL */, ImGuiPopupFlags popup_flags /* = 1 */);    // open+begin popup when clicked on last item. Use str_id==NULL to associate the popup to previous item. If you want to use that on a non-interactive item such as Text() you need to pass in an explicit ID here. read comments in .cpp!
CIMGUI_API bool ImGui_BeginPopupContextWindow(void);                                                                      // Implied str_id = NULL, popup_flags = 1
CIMGUI_API bool ImGui_BeginPopupContextWindowEx(const char* str_id /* = NULL */, ImGuiPopupFlags popup_flags /* = 1 */);  // open+begin popup when clicked on current window.
CIMGUI_API bool ImGui_BeginPopupContextVoid(void);                                                                        // Implied str_id = NULL, popup_flags = 1
CIMGUI_API bool ImGui_BeginPopupContextVoidEx(const char* str_id /* = NULL */, ImGuiPopupFlags popup_flags /* = 1 */);    // open+begin popup when clicked in void (where there are no windows).

// Popups: query functions
//  - IsPopupOpen(): return true if the popup is open at the current BeginPopup() level of the popup stack.
//  - IsPopupOpen() with ImGuiPopupFlags_AnyPopupId: return true if any popup is open at the current BeginPopup() level of the popup stack.
//  - IsPopupOpen() with ImGuiPopupFlags_AnyPopupId + ImGuiPopupFlags_AnyPopupLevel: return true if any popup is open.
CIMGUI_API bool ImGui_IsPopupOpen(const char* str_id, ImGuiPopupFlags flags /* = 0 */);  // return true if the popup is open.

// Tables
// - Full-featured replacement for old Columns API.
// - See Demo->Tables for demo code. See top of imgui_tables.cpp for general commentary.
// - See ImGuiTableFlags_ and ImGuiTableColumnFlags_ enums for a description of available flags.
// The typical call flow is:
// - 1. Call BeginTable(), early out if returning false.
// - 2. Optionally call TableSetupColumn() to submit column name/flags/defaults.
// - 3. Optionally call TableSetupScrollFreeze() to request scroll freezing of columns/rows.
// - 4. Optionally call TableHeadersRow() to submit a header row. Names are pulled from TableSetupColumn() data.
// - 5. Populate contents:
//    - In most situations you can use TableNextRow() + TableSetColumnIndex(N) to start appending into a column.
//    - If you are using tables as a sort of grid, where every column is holding the same type of contents,
//      you may prefer using TableNextColumn() instead of TableNextRow() + TableSetColumnIndex().
//      TableNextColumn() will automatically wrap-around into the next row if needed.
//    - IMPORTANT: Comparatively to the old Columns() API, we need to call TableNextColumn() for the first column!
//    - Summary of possible call flow:
//        --------------------------------------------------------------------------------------------------------
//        TableNextRow() -> TableSetColumnIndex(0) -> Text("Hello 0") -> TableSetColumnIndex(1) -> Text("Hello 1")  // OK
//        TableNextRow() -> TableNextColumn()      -> Text("Hello 0") -> TableNextColumn()      -> Text("Hello 1")  // OK
//                          TableNextColumn()      -> Text("Hello 0") -> TableNextColumn()      -> Text("Hello 1")  // OK: TableNextColumn() automatically gets to next row!
//        TableNextRow()                           -> Text("Hello 0")                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!
//        --------------------------------------------------------------------------------------------------------
// - 5. Call EndTable()
CIMGUI_API bool ImGui_BeginTable(const char* str_id, int column, ImGuiTableFlags flags /* = 0 */);                // Implied outer_size = ImVec2(0.0f, 0.0f), inner_width = 0.0f
CIMGUI_API bool ImGui_BeginTableEx(const char* str_id, int column, ImGuiTableFlags flags /* = 0 */, ImVec2 outer_size /* = ImVec2(0.0f, 0.0f) */, float inner_width /* = 0.0f */);
CIMGUI_API void ImGui_EndTable(void);                                                                             // only call EndTable() if BeginTable() returns true!
CIMGUI_API void ImGui_TableNextRow(void);                                                                         // Implied row_flags = 0, min_row_height = 0.0f
CIMGUI_API void ImGui_TableNextRowEx(ImGuiTableRowFlags row_flags /* = 0 */, float min_row_height /* = 0.0f */);  // append into the first cell of a new row.
CIMGUI_API bool ImGui_TableNextColumn(void);                                                                      // append into the next column (or first column of next row if currently in last column). Return true when column is visible.
CIMGUI_API bool ImGui_TableSetColumnIndex(int column_n);                                                          // append into the specified column. Return true when column is visible.

// Tables: Headers & Columns declaration
// - Use TableSetupColumn() to specify label, resizing policy, default width/weight, id, various other flags etc.
// - Use TableHeadersRow() to create a header row and automatically submit a TableHeader() for each column.
//   Headers are required to perform: reordering, sorting, and opening the context menu.
//   The context menu can also be made available in columns body using ImGuiTableFlags_ContextMenuInBody.
// - You may manually submit headers using TableNextRow() + TableHeader() calls, but this is only useful in
//   some advanced use cases (e.g. adding custom widgets in header row).
// - Use TableSetupScrollFreeze() to lock columns/rows so they stay visible when scrolled.
CIMGUI_API void ImGui_TableSetupColumn(const char* label, ImGuiTableColumnFlags flags /* = 0 */);  // Implied init_width_or_weight = 0.0f, user_id = 0
CIMGUI_API void ImGui_TableSetupColumnEx(const char* label, ImGuiTableColumnFlags flags /* = 0 */, float init_width_or_weight /* = 0.0f */, ImGuiID user_id /* = 0 */);
CIMGUI_API void ImGui_TableSetupScrollFreeze(int cols, int rows);                                  // lock columns/rows so they stay visible when scrolled.
CIMGUI_API void ImGui_TableHeadersRow(void);                                                       // submit all headers cells based on data provided to TableSetupColumn() + submit context menu
CIMGUI_API void ImGui_TableHeader(const char* label);                                              // submit one header cell manually (rarely used)

// Tables: Sorting & Miscellaneous functions
// - Sorting: call TableGetSortSpecs() to retrieve latest sort specs for the table. NULL when not sorting.
//   When 'sort_specs->SpecsDirty == true' you should sort your data. It will be true when sorting specs have
//   changed since last call, or the first time. Make sure to set 'SpecsDirty = false' after sorting,
//   else you may wastefully sort your data every frame!
// - Functions args 'int column_n' treat the default value of -1 as the same as passing the current column index.
CIMGUI_API ImGuiTableSortSpecs*  ImGui_TableGetSortSpecs(void);                       // get latest sort specs for the table (NULL if not sorting).  Lifetime: don't hold on this pointer over multiple frames or past any subsequent call to BeginTable().
CIMGUI_API int                   ImGui_TableGetColumnCount(void);                     // return number of columns (value passed to BeginTable)
CIMGUI_API int                   ImGui_TableGetColumnIndex(void);                     // return current column index.
CIMGUI_API int                   ImGui_TableGetRowIndex(void);                        // return current row index.
CIMGUI_API const char*           ImGui_TableGetColumnName(int column_n /* = -1 */);   // return "" if column didn't have a name declared by TableSetupColumn(). Pass -1 to use current column.
CIMGUI_API ImGuiTableColumnFlags ImGui_TableGetColumnFlags(int column_n /* = -1 */);  // return column flags so you can query their Enabled/Visible/Sorted/Hovered status flags. Pass -1 to use current column.
CIMGUI_API void                  ImGui_TableSetColumnEnabled(int column_n, bool v);   // change user accessible enabled/disabled state of a column. Set to false to hide the column. User can use the context menu to change this themselves (right-click in headers, or right-click in columns body with ImGuiTableFlags_ContextMenuInBody)
CIMGUI_API void                  ImGui_TableSetBgColor(ImGuiTableBgTarget target, ImU32 color, int column_n /* = -1 */); // change the color of a cell, row, or column. See ImGuiTableBgTarget_ flags for details.

// Legacy Columns API (prefer using Tables!)
// - You can also use SameLine(pos_x) to mimic simplified columns.
CIMGUI_API void  ImGui_Columns(void);                                      // Implied count = 1, id = NULL, border = true
CIMGUI_API void  ImGui_ColumnsEx(int count /* = 1 */, const char* id /* = NULL */, bool border /* = true */);
CIMGUI_API void  ImGui_NextColumn(void);                                   // next column, defaults to current row or next row if the current row is finished
CIMGUI_API int   ImGui_GetColumnIndex(void);                               // get current column index
CIMGUI_API float ImGui_GetColumnWidth(int column_index /* = -1 */);        // get column width (in pixels). pass -1 to use current column
CIMGUI_API void  ImGui_SetColumnWidth(int column_index, float width);      // set column width (in pixels). pass -1 to use current column
CIMGUI_API float ImGui_GetColumnOffset(int column_index /* = -1 */);       // get position of column line (in pixels, from the left side of the contents region). pass -1 to use current column, otherwise 0..GetColumnsCount() inclusive. column 0 is typically 0.0f
CIMGUI_API void  ImGui_SetColumnOffset(int column_index, float offset_x);  // set position of column line (in pixels, from the left side of the contents region). pass -1 to use current column
CIMGUI_API int   ImGui_GetColumnsCount(void);

// Tab Bars, Tabs
CIMGUI_API bool ImGui_BeginTabBar(const char* str_id, ImGuiTabBarFlags flags /* = 0 */);    // create and append into a TabBar
CIMGUI_API void ImGui_EndTabBar(void);                                                      // only call EndTabBar() if BeginTabBar() returns true!
CIMGUI_API bool ImGui_BeginTabItem(const char* label, bool* p_open /* = NULL */, ImGuiTabItemFlags flags /* = 0 */); // create a Tab. Returns true if the Tab is selected.
CIMGUI_API void ImGui_EndTabItem(void);                                                     // only call EndTabItem() if BeginTabItem() returns true!
CIMGUI_API bool ImGui_TabItemButton(const char* label, ImGuiTabItemFlags flags /* = 0 */);  // create a Tab behaving like a button. return true when clicked. cannot be selected in the tab bar.
CIMGUI_API void ImGui_SetTabItemClosed(const char* tab_or_docked_window_label);             // notify TabBar or Docking system of a closed tab/window ahead (useful to reduce visual flicker on reorderable tab bars). For tab-bar: call after BeginTabBar() and before Tab submissions. Otherwise call with a window name.

// Logging/Capture
// - All text output from the interface can be captured into tty/file/clipboard. By default, tree nodes are automatically opened during logging.
CIMGUI_API void ImGui_LogToTTY(int auto_open_depth /* = -1 */);                                      // start logging to tty (stdout)
CIMGUI_API void ImGui_LogToFile(int auto_open_depth /* = -1 */, const char* filename /* = NULL */);  // start logging to file
CIMGUI_API void ImGui_LogToClipboard(int auto_open_depth /* = -1 */);                                // start logging to OS clipboard
CIMGUI_API void ImGui_LogFinish(void);                                                               // stop logging (close file, etc.)
CIMGUI_API void ImGui_LogButtons(void);                                                              // helper to display buttons for logging to tty/file/clipboard
CIMGUI_API void ImGui_LogText(const char* fmt, ...) IM_FMTARGS(1);                                   // pass text data straight to log (without being displayed)
CIMGUI_API void ImGui_LogTextV(const char* fmt, va_list args) IM_FMTLIST(1);

// Drag and Drop
// - On source items, call BeginDragDropSource(), if it returns true also call SetDragDropPayload() + EndDragDropSource().
// - On target candidates, call BeginDragDropTarget(), if it returns true also call AcceptDragDropPayload() + EndDragDropTarget().
// - If you stop calling BeginDragDropSource() the payload is preserved however it won't have a preview tooltip (we currently display a fallback "..." tooltip, see #1725)
// - An item can be both drag source and drop target.
CIMGUI_API bool                ImGui_BeginDragDropSource(ImGuiDragDropFlags flags /* = 0 */);                      // call after submitting an item which may be dragged. when this return true, you can call SetDragDropPayload() + EndDragDropSource()
CIMGUI_API bool                ImGui_SetDragDropPayload(const char* type, const void* data, size_t sz, ImGuiCond cond /* = 0 */); // type is a user defined string of maximum 32 characters. Strings starting with '_' are reserved for dear imgui internal types. Data is copied and held by imgui. Return true when payload has been accepted.
CIMGUI_API void                ImGui_EndDragDropSource(void);                                                      // only call EndDragDropSource() if BeginDragDropSource() returns true!
CIMGUI_API bool                ImGui_BeginDragDropTarget(void);                                                    // call after submitting an item that may receive a payload. If this returns true, you can call AcceptDragDropPayload() + EndDragDropTarget()
CIMGUI_API const ImGuiPayload* ImGui_AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags /* = 0 */);  // accept contents of a given type. If ImGuiDragDropFlags_AcceptBeforeDelivery is set you can peek into the payload before the mouse button is released.
CIMGUI_API void                ImGui_EndDragDropTarget(void);                                                      // only call EndDragDropTarget() if BeginDragDropTarget() returns true!
CIMGUI_API const ImGuiPayload* ImGui_GetDragDropPayload(void);                                                     // peek directly into the current payload from anywhere. may return NULL. use ImGuiPayload::IsDataType() to test for the payload type.

// Disabling [BETA API]
// - Disable all user interactions and dim items visuals (applying style.DisabledAlpha over current colors)
// - Those can be nested but it cannot be used to enable an already disabled section (a single BeginDisabled(true) in the stack is enough to keep everything disabled)
// - BeginDisabled(false) essentially does nothing useful but is provided to facilitate use of boolean expressions. If you can avoid calling BeginDisabled(False)/EndDisabled() best to avoid it.
CIMGUI_API void ImGui_BeginDisabled(bool disabled /* = true */);
CIMGUI_API void ImGui_EndDisabled(void);

// Clipping
// - Mouse hovering is affected by ImGui::PushClipRect() calls, unlike direct calls to ImDrawList::PushClipRect() which are render only.
CIMGUI_API void ImGui_PushClipRect(ImVec2 clip_rect_min, ImVec2 clip_rect_max, bool intersect_with_current_clip_rect);
CIMGUI_API void ImGui_PopClipRect(void);

// Focus, Activation
// - Prefer using "SetItemDefaultFocus()" over "if (IsWindowAppearing()) SetScrollHereY()" when applicable to signify "this is the default item"
CIMGUI_API void ImGui_SetItemDefaultFocus(void);                     // make last item the default focused item of a window.
CIMGUI_API void ImGui_SetKeyboardFocusHere(void);                    // Implied offset = 0
CIMGUI_API void ImGui_SetKeyboardFocusHereEx(int offset /* = 0 */);  // focus keyboard on the next widget. Use positive 'offset' to access sub components of a multiple component widget. Use -1 to access previous widget.

// Item/Widgets Utilities and Query Functions
// - Most of the functions are referring to the previous Item that has been submitted.
// - See Demo Window under "Widgets->Querying Status" for an interactive visualization of most of those functions.
CIMGUI_API bool   ImGui_IsItemHovered(ImGuiHoveredFlags flags /* = 0 */);          // is the last item hovered? (and usable, aka not blocked by a popup, etc.). See ImGuiHoveredFlags for more options.
CIMGUI_API bool   ImGui_IsItemActive(void);                                        // is the last item active? (e.g. button being held, text field being edited. This will continuously return true while holding mouse button on an item. Items that don't interact will always return false)
CIMGUI_API bool   ImGui_IsItemFocused(void);                                       // is the last item focused for keyboard/gamepad navigation?
CIMGUI_API bool   ImGui_IsItemClicked(void);                                       // Implied mouse_button = 0
CIMGUI_API bool   ImGui_IsItemClickedEx(ImGuiMouseButton mouse_button /* = 0 */);  // is the last item hovered and mouse clicked on? (**)  == IsMouseClicked(mouse_button) && IsItemHovered()Important. (**) this is NOT equivalent to the behavior of e.g. Button(). Read comments in function definition.
CIMGUI_API bool   ImGui_IsItemVisible(void);                                       // is the last item visible? (items may be out of sight because of clipping/scrolling)
CIMGUI_API bool   ImGui_IsItemEdited(void);                                        // did the last item modify its underlying value this frame? or was pressed? This is generally the same as the "bool" return value of many widgets.
CIMGUI_API bool   ImGui_IsItemActivated(void);                                     // was the last item just made active (item was previously inactive).
CIMGUI_API bool   ImGui_IsItemDeactivated(void);                                   // was the last item just made inactive (item was previously active). Useful for Undo/Redo patterns with widgets that require continuous editing.
CIMGUI_API bool   ImGui_IsItemDeactivatedAfterEdit(void);                          // was the last item just made inactive and made a value change when it was active? (e.g. Slider/Drag moved). Useful for Undo/Redo patterns with widgets that require continuous editing. Note that you may get false positives (some widgets such as Combo()/ListBox()/Selectable() will return true even when clicking an already selected item).
CIMGUI_API bool   ImGui_IsItemToggledOpen(void);                                   // was the last item open state toggled? set by TreeNode().
CIMGUI_API bool   ImGui_IsAnyItemHovered(void);                                    // is any item hovered?
CIMGUI_API bool   ImGui_IsAnyItemActive(void);                                     // is any item active?
CIMGUI_API bool   ImGui_IsAnyItemFocused(void);                                    // is any item focused?
CIMGUI_API ImVec2 ImGui_GetItemRectMin(void);                                      // get upper-left bounding rectangle of the last item (screen space)
CIMGUI_API ImVec2 ImGui_GetItemRectMax(void);                                      // get lower-right bounding rectangle of the last item (screen space)
CIMGUI_API ImVec2 ImGui_GetItemRectSize(void);                                     // get size of last item
CIMGUI_API void   ImGui_SetItemAllowOverlap(void);                                 // allow last item to be overlapped by a subsequent item. sometimes useful with invisible buttons, selectables, etc. to catch unused area.

// Viewports
// - Currently represents the Platform Window created by the application which is hosting our Dear ImGui windows.
// - In 'docking' branch with multi-viewport enabled, we extend this concept to have multiple active viewports.
// - In the future we will extend this concept further to also represent Platform Monitor and support a "no main platform window" operation mode.
CIMGUI_API ImGuiViewport* ImGui_GetMainViewport(void);  // return primary/default viewport. This can never be NULL.

// Background/Foreground Draw Lists
CIMGUI_API ImDrawList* ImGui_GetBackgroundDrawList(void);  // this draw list will be the first rendered one. Useful to quickly draw shapes/text behind dear imgui contents.
CIMGUI_API ImDrawList* ImGui_GetForegroundDrawList(void);  // this draw list will be the last rendered one. Useful to quickly draw shapes/text over dear imgui contents.

// Miscellaneous Utilities
CIMGUI_API bool                  ImGui_IsRectVisibleBySize(ImVec2 size);                 // test if rectangle (of given size, starting from cursor position) is visible / not clipped.
CIMGUI_API bool                  ImGui_IsRectVisible(ImVec2 rect_min, ImVec2 rect_max);  // test if rectangle (in screen space) is visible / not clipped. to perform coarse clipping on user's side.
CIMGUI_API double                ImGui_GetTime(void);                                    // get global imgui time. incremented by io.DeltaTime every frame.
CIMGUI_API int                   ImGui_GetFrameCount(void);                              // get global imgui frame count. incremented by 1 every frame.
CIMGUI_API ImDrawListSharedData* ImGui_GetDrawListSharedData(void);                      // you may use this when creating your own ImDrawList instances.
CIMGUI_API const char*           ImGui_GetStyleColorName(ImGuiCol idx);                  // get a string corresponding to the enum value (for display, saving, etc.).
CIMGUI_API void                  ImGui_SetStateStorage(ImGuiStorage* storage);           // replace current window storage with our own (if you want to manipulate it yourself, typically clear subsection of it)
CIMGUI_API ImGuiStorage*         ImGui_GetStateStorage(void);
CIMGUI_API bool                  ImGui_BeginChildFrame(ImGuiID id, ImVec2 size, ImGuiWindowFlags flags /* = 0 */); // helper to create a child window / scrolling region that looks like a normal widget frame
CIMGUI_API void                  ImGui_EndChildFrame(void);                              // always call EndChildFrame() regardless of BeginChildFrame() return values (which indicates a collapsed/clipped window)

// Text Utilities
CIMGUI_API ImVec2 ImGui_CalcTextSize(const char* text);  // Implied text_end = NULL, hide_text_after_double_hash = false, wrap_width = -1.0f
CIMGUI_API ImVec2 ImGui_CalcTextSizeEx(const char* text, const char* text_end /* = NULL */, bool hide_text_after_double_hash /* = false */, float wrap_width /* = -1.0f */);

// Color Utilities
CIMGUI_API ImVec4 ImGui_ColorConvertU32ToFloat4(ImU32 in);
CIMGUI_API ImU32  ImGui_ColorConvertFloat4ToU32(ImVec4 in);
CIMGUI_API void   ImGui_ColorConvertRGBtoHSV(float r, float g, float b, float* out_h, float* out_s, float* out_v);
CIMGUI_API void   ImGui_ColorConvertHSVtoRGB(float h, float s, float v, float* out_r, float* out_g, float* out_b);

// Inputs Utilities: Keyboard
// Without IMGUI_DISABLE_OBSOLETE_KEYIO: (legacy support)
//   - For 'ImGuiKey key' you can still use your legacy native/user indices according to how your backend/engine stored them in io.KeysDown[].
// With IMGUI_DISABLE_OBSOLETE_KEYIO: (this is the way forward)
//   - Any use of 'ImGuiKey' will assert when key < 512 will be passed, previously reserved as native/user keys indices
//   - GetKeyIndex() is pass-through and therefore deprecated (gone if IMGUI_DISABLE_OBSOLETE_KEYIO is defined)
CIMGUI_API bool        ImGui_IsKeyDown(ImGuiKey key);                                            // is key being held.
CIMGUI_API bool        ImGui_IsKeyPressed(ImGuiKey key);                                         // Implied repeat = true
CIMGUI_API bool        ImGui_IsKeyPressedEx(ImGuiKey key, bool repeat /* = true */);             // was key pressed (went from !Down to Down)? if repeat=true, uses io.KeyRepeatDelay / KeyRepeatRate
CIMGUI_API bool        ImGui_IsKeyReleased(ImGuiKey key);                                        // was key released (went from Down to !Down)?
CIMGUI_API int         ImGui_GetKeyPressedAmount(ImGuiKey key, float repeat_delay, float rate);  // uses provided repeat rate/delay. return a count, most often 0 or 1 but might be >1 if RepeatRate is small enough that DeltaTime > RepeatRate
CIMGUI_API const char* ImGui_GetKeyName(ImGuiKey key);                                           // [DEBUG] returns English name of the key. Those names a provided for debugging purpose and are not meant to be saved persistently not compared.
CIMGUI_API void        ImGui_SetNextFrameWantCaptureKeyboard(bool want_capture_keyboard);        // Override io.WantCaptureKeyboard flag next frame (said flag is left for your application to handle, typically when true it instructs your app to ignore inputs). e.g. force capture keyboard when your widget is being hovered. This is equivalent to setting "io.WantCaptureKeyboard = want_capture_keyboard"; after the next NewFrame() call.

// Inputs Utilities: Mouse
// - To refer to a mouse button, you may use named enums in your code e.g. ImGuiMouseButton_Left, ImGuiMouseButton_Right.
// - You can also use regular integer: it is forever guaranteed that 0=Left, 1=Right, 2=Middle.
// - Dragging operations are only reported after mouse has moved a certain distance away from the initial clicking position (see 'lock_threshold' and 'io.MouseDraggingThreshold')
CIMGUI_API bool             ImGui_IsMouseDown(ImGuiMouseButton button);                                          // is mouse button held?
CIMGUI_API bool             ImGui_IsMouseClicked(ImGuiMouseButton button);                                       // Implied repeat = false
CIMGUI_API bool             ImGui_IsMouseClickedEx(ImGuiMouseButton button, bool repeat /* = false */);          // did mouse button clicked? (went from !Down to Down). Same as GetMouseClickedCount() == 1.
CIMGUI_API bool             ImGui_IsMouseReleased(ImGuiMouseButton button);                                      // did mouse button released? (went from Down to !Down)
CIMGUI_API bool             ImGui_IsMouseDoubleClicked(ImGuiMouseButton button);                                 // did mouse button double-clicked? Same as GetMouseClickedCount() == 2. (note that a double-click will also report IsMouseClicked() == true)
CIMGUI_API int              ImGui_GetMouseClickedCount(ImGuiMouseButton button);                                 // return the number of successive mouse-clicks at the time where a click happen (otherwise 0).
CIMGUI_API bool             ImGui_IsMouseHoveringRect(ImVec2 r_min, ImVec2 r_max);                               // Implied clip = true
CIMGUI_API bool             ImGui_IsMouseHoveringRectEx(ImVec2 r_min, ImVec2 r_max, bool clip /* = true */);     // is mouse hovering given bounding rect (in screen space). clipped by current clipping settings, but disregarding of other consideration of focus/window ordering/popup-block.
CIMGUI_API bool             ImGui_IsMousePosValid(const ImVec2* mouse_pos /* = NULL */);                         // by convention we use (-FLT_MAX,-FLT_MAX) to denote that there is no mouse available
CIMGUI_API bool             ImGui_IsAnyMouseDown(void);                                                          // [WILL OBSOLETE] is any mouse button held? This was designed for backends, but prefer having backend maintain a mask of held mouse buttons, because upcoming input queue system will make this invalid.
CIMGUI_API ImVec2           ImGui_GetMousePos(void);                                                             // shortcut to ImGui::GetIO().MousePos provided by user, to be consistent with other calls
CIMGUI_API ImVec2           ImGui_GetMousePosOnOpeningCurrentPopup(void);                                        // retrieve mouse position at the time of opening popup we have BeginPopup() into (helper to avoid user backing that value themselves)
CIMGUI_API bool             ImGui_IsMouseDragging(ImGuiMouseButton button, float lock_threshold /* = -1.0f */);  // is mouse dragging? (if lock_threshold < -1.0f, uses io.MouseDraggingThreshold)
CIMGUI_API ImVec2           ImGui_GetMouseDragDelta(ImGuiMouseButton button /* = 0 */, float lock_threshold /* = -1.0f */); // return the delta from the initial clicking position while the mouse button is pressed or was just released. This is locked and return 0.0f until the mouse moves past a distance threshold at least once (if lock_threshold < -1.0f, uses io.MouseDraggingThreshold)
CIMGUI_API void             ImGui_ResetMouseDragDelta(void);                                                     // Implied button = 0
CIMGUI_API void             ImGui_ResetMouseDragDeltaEx(ImGuiMouseButton button /* = 0 */);                      //
CIMGUI_API ImGuiMouseCursor ImGui_GetMouseCursor(void);                                                          // get desired mouse cursor shape. Important: reset in ImGui::NewFrame(), this is updated during the frame. valid before Render(). If you use software rendering by setting io.MouseDrawCursor ImGui will render those for you
CIMGUI_API void             ImGui_SetMouseCursor(ImGuiMouseCursor cursor_type);                                  // set desired mouse cursor shape
CIMGUI_API void             ImGui_SetNextFrameWantCaptureMouse(bool want_capture_mouse);                         // Override io.WantCaptureMouse flag next frame (said flag is left for your application to handle, typical when true it instucts your app to ignore inputs). This is equivalent to setting "io.WantCaptureMouse = want_capture_mouse;" after the next NewFrame() call.

// Clipboard Utilities
// - Also see the LogToClipboard() function to capture GUI into clipboard, or easily output text data to the clipboard.
CIMGUI_API const char* ImGui_GetClipboardText(void);
CIMGUI_API void        ImGui_SetClipboardText(const char* text);

// Settings/.Ini Utilities
// - The disk functions are automatically called if io.IniFilename != NULL (default is "imgui.ini").
// - Set io.IniFilename to NULL to load/save manually. Read io.WantSaveIniSettings description about handling .ini saving manually.
// - Important: default value "imgui.ini" is relative to current working dir! Most apps will want to lock this to an absolute path (e.g. same path as executables).
CIMGUI_API void        ImGui_LoadIniSettingsFromDisk(const char* ini_filename);                           // call after CreateContext() and before the first call to NewFrame(). NewFrame() automatically calls LoadIniSettingsFromDisk(io.IniFilename).
CIMGUI_API void        ImGui_LoadIniSettingsFromMemory(const char* ini_data, size_t ini_size /* = 0 */);  // call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source.
CIMGUI_API void        ImGui_SaveIniSettingsToDisk(const char* ini_filename);                             // this is automatically called (if io.IniFilename is not empty) a few seconds after any modification that should be reflected in the .ini file (and also by DestroyContext).
CIMGUI_API const char* ImGui_SaveIniSettingsToMemory(size_t* out_ini_size /* = NULL */);                  // return a zero-terminated string with the .ini data which you can save by your own mean. call when io.WantSaveIniSettings is set, then save data by your own mean and clear io.WantSaveIniSettings.

// Debug Utilities
CIMGUI_API void ImGui_DebugTextEncoding(const char* text);
CIMGUI_API bool ImGui_DebugCheckVersionAndDataLayout(const char* version_str, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_drawvert, size_t sz_drawidx);  // This is called by IMGUI_CHECKVERSION() macro.

// Memory Allocators
// - Those functions are not reliant on the current context.
// - DLL users: heaps and globals are not shared across DLL boundaries! You will need to call SetCurrentContext() + SetAllocatorFunctions()
//   for each static/DLL boundary you are calling from. Read "Context and Memory Allocators" section of imgui.cpp for more details.
CIMGUI_API void  ImGui_SetAllocatorFunctions(ImGuiMemAllocFunc alloc_func, ImGuiMemFreeFunc free_func, void* user_data /* = NULL */);
CIMGUI_API void  ImGui_GetAllocatorFunctions(ImGuiMemAllocFunc* p_alloc_func, ImGuiMemFreeFunc* p_free_func, void** p_user_data);
CIMGUI_API void* ImGui_MemAlloc(size_t size);
CIMGUI_API void  ImGui_MemFree(void* ptr);

//-----------------------------------------------------------------------------
// [SECTION] Flags & Enumerations
//-----------------------------------------------------------------------------

// Flags for ImGui::Begin()
// (Those are per-window flags. There are shared flags in ImGuiIO: io.ConfigWindowsResizeFromEdges and io.ConfigWindowsMoveFromTitleBarOnly)
typedef enum
{
    ImGuiWindowFlags_None                      = 0,
    ImGuiWindowFlags_NoTitleBar                = 1<<0,   // Disable title-bar
    ImGuiWindowFlags_NoResize                  = 1<<1,   // Disable user resizing with the lower-right grip
    ImGuiWindowFlags_NoMove                    = 1<<2,   // Disable user moving the window
    ImGuiWindowFlags_NoScrollbar               = 1<<3,   // Disable scrollbars (window can still scroll with mouse or programmatically)
    ImGuiWindowFlags_NoScrollWithMouse         = 1<<4,   // Disable user vertically scrolling with mouse wheel. On child window, mouse wheel will be forwarded to the parent unless NoScrollbar is also set.
    ImGuiWindowFlags_NoCollapse                = 1<<5,   // Disable user collapsing window by double-clicking on it. Also referred to as Window Menu Button (e.g. within a docking node).
    ImGuiWindowFlags_AlwaysAutoResize          = 1<<6,   // Resize every window to its content every frame
    ImGuiWindowFlags_NoBackground              = 1<<7,   // Disable drawing background color (WindowBg, etc.) and outside border. Similar as using SetNextWindowBgAlpha(0.0f).
    ImGuiWindowFlags_NoSavedSettings           = 1<<8,   // Never load/save settings in .ini file
    ImGuiWindowFlags_NoMouseInputs             = 1<<9,   // Disable catching mouse, hovering test with pass through.
    ImGuiWindowFlags_MenuBar                   = 1<<10,  // Has a menu-bar
    ImGuiWindowFlags_HorizontalScrollbar       = 1<<11,  // Allow horizontal scrollbar to appear (off by default). You may use SetNextWindowContentSize(ImVec2(width,0.0f)); prior to calling Begin() to specify width. Read code in imgui_demo in the "Horizontal Scrolling" section.
    ImGuiWindowFlags_NoFocusOnAppearing        = 1<<12,  // Disable taking focus when transitioning from hidden to visible state
    ImGuiWindowFlags_NoBringToFrontOnFocus     = 1<<13,  // Disable bringing window to front when taking focus (e.g. clicking on it or programmatically giving it focus)
    ImGuiWindowFlags_AlwaysVerticalScrollbar   = 1<<14,  // Always show vertical scrollbar (even if ContentSize.y < Size.y)
    ImGuiWindowFlags_AlwaysHorizontalScrollbar = 1<<15,  // Always show horizontal scrollbar (even if ContentSize.x < Size.x)
    ImGuiWindowFlags_AlwaysUseWindowPadding    = 1<<16,  // Ensure child windows without border uses style.WindowPadding (ignored by default for non-bordered child windows, because more convenient)
    ImGuiWindowFlags_NoNavInputs               = 1<<18,  // No gamepad/keyboard navigation within the window
    ImGuiWindowFlags_NoNavFocus                = 1<<19,  // No focusing toward this window with gamepad/keyboard navigation (e.g. skipped by CTRL+TAB)
    ImGuiWindowFlags_UnsavedDocument           = 1<<20,  // Display a dot next to the title. When used in a tab/docking context, tab is selected when clicking the X + closure is not assumed (will wait for user to stop submitting the tab). Otherwise closure is assumed when pressing the X, so if you keep submitting the tab may reappear at end of tab bar.
    ImGuiWindowFlags_NoNav                     = ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus,
    ImGuiWindowFlags_NoDecoration              = ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoCollapse,
    ImGuiWindowFlags_NoInputs                  = ImGuiWindowFlags_NoMouseInputs | ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus,

    // [Internal]
    ImGuiWindowFlags_NavFlattened              = 1<<23,  // [BETA] On child window: allow gamepad/keyboard navigation to cross over parent border to this child or between sibling child windows.
    ImGuiWindowFlags_ChildWindow               = 1<<24,  // Don't use! For internal use by BeginChild()
    ImGuiWindowFlags_Tooltip                   = 1<<25,  // Don't use! For internal use by BeginTooltip()
    ImGuiWindowFlags_Popup                     = 1<<26,  // Don't use! For internal use by BeginPopup()
    ImGuiWindowFlags_Modal                     = 1<<27,  // Don't use! For internal use by BeginPopupModal()
    ImGuiWindowFlags_ChildMenu                 = 1<<28,  // Don't use! For internal use by BeginMenu()
} ImGuiWindowFlags_;

// Flags for ImGui::InputText()
// (Those are per-item flags. There are shared flags in ImGuiIO: io.ConfigInputTextCursorBlink and io.ConfigInputTextEnterKeepActive)
typedef enum
{
    ImGuiInputTextFlags_None                = 0,
    ImGuiInputTextFlags_CharsDecimal        = 1<<0,                                 // Allow 0123456789.+-*/
    ImGuiInputTextFlags_CharsHexadecimal    = 1<<1,                                 // Allow 0123456789ABCDEFabcdef
    ImGuiInputTextFlags_CharsUppercase      = 1<<2,                                 // Turn a..z into A..Z
    ImGuiInputTextFlags_CharsNoBlank        = 1<<3,                                 // Filter out spaces, tabs
    ImGuiInputTextFlags_AutoSelectAll       = 1<<4,                                 // Select entire text when first taking mouse focus
    ImGuiInputTextFlags_EnterReturnsTrue    = 1<<5,                                 // Return 'true' when Enter is pressed (as opposed to every time the value was modified). Consider looking at the IsItemDeactivatedAfterEdit() function.
    ImGuiInputTextFlags_CallbackCompletion  = 1<<6,                                 // Callback on pressing TAB (for completion handling)
    ImGuiInputTextFlags_CallbackHistory     = 1<<7,                                 // Callback on pressing Up/Down arrows (for history handling)
    ImGuiInputTextFlags_CallbackAlways      = 1<<8,                                 // Callback on each iteration. User code may query cursor position, modify text buffer.
    ImGuiInputTextFlags_CallbackCharFilter  = 1<<9,                                 // Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard, or return 1 in callback to discard.
    ImGuiInputTextFlags_AllowTabInput       = 1<<10,                                // Pressing TAB input a '\t' character into the text field
    ImGuiInputTextFlags_CtrlEnterForNewLine = 1<<11,                                // In multi-line mode, unfocus with Enter, add new line with Ctrl+Enter (default is opposite: unfocus with Ctrl+Enter, add line with Enter).
    ImGuiInputTextFlags_NoHorizontalScroll  = 1<<12,                                // Disable following the cursor horizontally
    ImGuiInputTextFlags_AlwaysOverwrite     = 1<<13,                                // Overwrite mode
    ImGuiInputTextFlags_ReadOnly            = 1<<14,                                // Read-only mode
    ImGuiInputTextFlags_Password            = 1<<15,                                // Password mode, display all characters as '*'
    ImGuiInputTextFlags_NoUndoRedo          = 1<<16,                                // Disable undo/redo. Note that input text owns the text data while active, if you want to provide your own undo/redo stack you need e.g. to call ClearActiveID().
    ImGuiInputTextFlags_CharsScientific     = 1<<17,                                // Allow 0123456789.+-*/eE (Scientific notation input)
    ImGuiInputTextFlags_CallbackResize      = 1<<18,                                // Callback on buffer capacity changes request (beyond 'buf_size' parameter value), allowing the string to grow. Notify when the string wants to be resized (for string types which hold a cache of their Size). You will be provided a new BufSize in the callback and NEED to honor it. (see misc/cpp/imgui_stdlib.h for an example of using this)
    ImGuiInputTextFlags_CallbackEdit        = 1<<19,                                // Callback on any edit (note that InputText() already returns true on edit, the callback is useful mainly to manipulate the underlying buffer while focus is active)
    ImGuiInputTextFlags_EscapeClearsAll     = 1<<20,                                // Escape key clears content if not empty, and deactivate otherwise (constrast to default behavior of Escape to revert)

    // Obsolete names (will be removed soon)
#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
    ImGuiInputTextFlags_AlwaysInsertMode    = ImGuiInputTextFlags_AlwaysOverwrite,  // [renamed in 1.82] name was not matching behavior
#endif // #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
} ImGuiInputTextFlags_;

// Flags for ImGui::TreeNodeEx(), ImGui::CollapsingHeader*()
typedef enum
{
    ImGuiTreeNodeFlags_None                 = 0,
    ImGuiTreeNodeFlags_Selected             = 1<<0,   // Draw as selected
    ImGuiTreeNodeFlags_Framed               = 1<<1,   // Draw frame with background (e.g. for CollapsingHeader)
    ImGuiTreeNodeFlags_AllowItemOverlap     = 1<<2,   // Hit testing to allow subsequent widgets to overlap this one
    ImGuiTreeNodeFlags_NoTreePushOnOpen     = 1<<3,   // Don't do a TreePush() when open (e.g. for CollapsingHeader) = no extra indent nor pushing on ID stack
    ImGuiTreeNodeFlags_NoAutoOpenOnLog      = 1<<4,   // Don't automatically and temporarily open node when Logging is active (by default logging will automatically open tree nodes)
    ImGuiTreeNodeFlags_DefaultOpen          = 1<<5,   // Default node to be open
    ImGuiTreeNodeFlags_OpenOnDoubleClick    = 1<<6,   // Need double-click to open node
    ImGuiTreeNodeFlags_OpenOnArrow          = 1<<7,   // Only open when clicking on the arrow part. If ImGuiTreeNodeFlags_OpenOnDoubleClick is also set, single-click arrow or double-click all box to open.
    ImGuiTreeNodeFlags_Leaf                 = 1<<8,   // No collapsing, no arrow (use as a convenience for leaf nodes).
    ImGuiTreeNodeFlags_Bullet               = 1<<9,   // Display a bullet instead of arrow
    ImGuiTreeNodeFlags_FramePadding         = 1<<10,  // Use FramePadding (even for an unframed text node) to vertically align text baseline to regular widget height. Equivalent to calling AlignTextToFramePadding().
    ImGuiTreeNodeFlags_SpanAvailWidth       = 1<<11,  // Extend hit box to the right-most edge, even if not framed. This is not the default in order to allow adding other items on the same line. In the future we may refactor the hit system to be front-to-back, allowing natural overlaps and then this can become the default.
    ImGuiTreeNodeFlags_SpanFullWidth        = 1<<12,  // Extend hit box to the left-most and right-most edges (bypass the indented area).
    ImGuiTreeNodeFlags_NavLeftJumpsBackHere = 1<<13,  // (WIP) Nav: left direction may move to this TreeNode() from any of its child (items submitted between TreeNode and TreePop)
    //ImGuiTreeNodeFlags_NoScrollOnOpen     = 1 << 14,  // FIXME: TODO: Disable automatic scroll on TreePop() if node got just open and contents is not visible
    ImGuiTreeNodeFlags_CollapsingHeader     = ImGuiTreeNodeFlags_Framed | ImGuiTreeNodeFlags_NoTreePushOnOpen | ImGuiTreeNodeFlags_NoAutoOpenOnLog,
} ImGuiTreeNodeFlags_;

// Flags for OpenPopup*(), BeginPopupContext*(), IsPopupOpen() functions.
// - To be backward compatible with older API which took an 'int mouse_button = 1' argument, we need to treat
//   small flags values as a mouse button index, so we encode the mouse button in the first few bits of the flags.
//   It is therefore guaranteed to be legal to pass a mouse button index in ImGuiPopupFlags.
// - For the same reason, we exceptionally default the ImGuiPopupFlags argument of BeginPopupContextXXX functions to 1 instead of 0.
//   IMPORTANT: because the default parameter is 1 (==ImGuiPopupFlags_MouseButtonRight), if you rely on the default parameter
//   and want to use another flag, you need to pass in the ImGuiPopupFlags_MouseButtonRight flag explicitly.
// - Multiple buttons currently cannot be combined/or-ed in those functions (we could allow it later).
typedef enum
{
    ImGuiPopupFlags_None                    = 0,
    ImGuiPopupFlags_MouseButtonLeft         = 0,     // For BeginPopupContext*(): open on Left Mouse release. Guaranteed to always be == 0 (same as ImGuiMouseButton_Left)
    ImGuiPopupFlags_MouseButtonRight        = 1,     // For BeginPopupContext*(): open on Right Mouse release. Guaranteed to always be == 1 (same as ImGuiMouseButton_Right)
    ImGuiPopupFlags_MouseButtonMiddle       = 2,     // For BeginPopupContext*(): open on Middle Mouse release. Guaranteed to always be == 2 (same as ImGuiMouseButton_Middle)
    ImGuiPopupFlags_MouseButtonMask_        = 0x1F,
    ImGuiPopupFlags_MouseButtonDefault_     = 1,
    ImGuiPopupFlags_NoOpenOverExistingPopup = 1<<5,  // For OpenPopup*(), BeginPopupContext*(): don't open if there's already a popup at the same level of the popup stack
    ImGuiPopupFlags_NoOpenOverItems         = 1<<6,  // For BeginPopupContextWindow(): don't return true when hovering items, only when hovering empty space
    ImGuiPopupFlags_AnyPopupId              = 1<<7,  // For IsPopupOpen(): ignore the ImGuiID parameter and test for any popup.
    ImGuiPopupFlags_AnyPopupLevel           = 1<<8,  // For IsPopupOpen(): search/test at any level of the popup stack (default test in the current level)
    ImGuiPopupFlags_AnyPopup                = ImGuiPopupFlags_AnyPopupId | ImGuiPopupFlags_AnyPopupLevel,
} ImGuiPopupFlags_;

// Flags for ImGui::Selectable()
typedef enum
{
    ImGuiSelectableFlags_None             = 0,
    ImGuiSelectableFlags_DontClosePopups  = 1<<0,  // Clicking this doesn't close parent popup window
    ImGuiSelectableFlags_SpanAllColumns   = 1<<1,  // Selectable frame can span all columns (text will still fit in current column)
    ImGuiSelectableFlags_AllowDoubleClick = 1<<2,  // Generate press events on double clicks too
    ImGuiSelectableFlags_Disabled         = 1<<3,  // Cannot be selected, display grayed out text
    ImGuiSelectableFlags_AllowItemOverlap = 1<<4,  // (WIP) Hit testing to allow subsequent widgets to overlap this one
} ImGuiSelectableFlags_;

// Flags for ImGui::BeginCombo()
typedef enum
{
    ImGuiComboFlags_None           = 0,
    ImGuiComboFlags_PopupAlignLeft = 1<<0,  // Align the popup toward the left by default
    ImGuiComboFlags_HeightSmall    = 1<<1,  // Max ~4 items visible. Tip: If you want your combo popup to be a specific size you can use SetNextWindowSizeConstraints() prior to calling BeginCombo()
    ImGuiComboFlags_HeightRegular  = 1<<2,  // Max ~8 items visible (default)
    ImGuiComboFlags_HeightLarge    = 1<<3,  // Max ~20 items visible
    ImGuiComboFlags_HeightLargest  = 1<<4,  // As many fitting items as possible
    ImGuiComboFlags_NoArrowButton  = 1<<5,  // Display on the preview box without the square arrow button
    ImGuiComboFlags_NoPreview      = 1<<6,  // Display only a square arrow button
    ImGuiComboFlags_HeightMask_    = ImGuiComboFlags_HeightSmall | ImGuiComboFlags_HeightRegular | ImGuiComboFlags_HeightLarge | ImGuiComboFlags_HeightLargest,
} ImGuiComboFlags_;

// Flags for ImGui::BeginTabBar()
typedef enum
{
    ImGuiTabBarFlags_None                         = 0,
    ImGuiTabBarFlags_Reorderable                  = 1<<0,  // Allow manually dragging tabs to re-order them + New tabs are appended at the end of list
    ImGuiTabBarFlags_AutoSelectNewTabs            = 1<<1,  // Automatically select new tabs when they appear
    ImGuiTabBarFlags_TabListPopupButton           = 1<<2,  // Disable buttons to open the tab list popup
    ImGuiTabBarFlags_NoCloseWithMiddleMouseButton = 1<<3,  // Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You can still repro this behavior on user's side with if (IsItemHovered() && IsMouseClicked(2)) *p_open = false.
    ImGuiTabBarFlags_NoTabListScrollingButtons    = 1<<4,  // Disable scrolling buttons (apply when fitting policy is ImGuiTabBarFlags_FittingPolicyScroll)
    ImGuiTabBarFlags_NoTooltip                    = 1<<5,  // Disable tooltips when hovering a tab
    ImGuiTabBarFlags_FittingPolicyResizeDown      = 1<<6,  // Resize tabs when they don't fit
    ImGuiTabBarFlags_FittingPolicyScroll          = 1<<7,  // Add scroll buttons when tabs don't fit
    ImGuiTabBarFlags_FittingPolicyMask_           = ImGuiTabBarFlags_FittingPolicyResizeDown | ImGuiTabBarFlags_FittingPolicyScroll,
    ImGuiTabBarFlags_FittingPolicyDefault_        = ImGuiTabBarFlags_FittingPolicyResizeDown,
} ImGuiTabBarFlags_;

// Flags for ImGui::BeginTabItem()
typedef enum
{
    ImGuiTabItemFlags_None                         = 0,
    ImGuiTabItemFlags_UnsavedDocument              = 1<<0,  // Display a dot next to the title + tab is selected when clicking the X + closure is not assumed (will wait for user to stop submitting the tab). Otherwise closure is assumed when pressing the X, so if you keep submitting the tab may reappear at end of tab bar.
    ImGuiTabItemFlags_SetSelected                  = 1<<1,  // Trigger flag to programmatically make the tab selected when calling BeginTabItem()
    ImGuiTabItemFlags_NoCloseWithMiddleMouseButton = 1<<2,  // Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You can still repro this behavior on user's side with if (IsItemHovered() && IsMouseClicked(2)) *p_open = false.
    ImGuiTabItemFlags_NoPushId                     = 1<<3,  // Don't call PushID(tab->ID)/PopID() on BeginTabItem()/EndTabItem()
    ImGuiTabItemFlags_NoTooltip                    = 1<<4,  // Disable tooltip for the given tab
    ImGuiTabItemFlags_NoReorder                    = 1<<5,  // Disable reordering this tab or having another tab cross over this tab
    ImGuiTabItemFlags_Leading                      = 1<<6,  // Enforce the tab position to the left of the tab bar (after the tab list popup button)
    ImGuiTabItemFlags_Trailing                     = 1<<7,  // Enforce the tab position to the right of the tab bar (before the scrolling buttons)
} ImGuiTabItemFlags_;

// Flags for ImGui::BeginTable()
// - Important! Sizing policies have complex and subtle side effects, much more so than you would expect.
//   Read comments/demos carefully + experiment with live demos to get acquainted with them.
// - The DEFAULT sizing policies are:
//    - Default to ImGuiTableFlags_SizingFixedFit    if ScrollX is on, or if host window has ImGuiWindowFlags_AlwaysAutoResize.
//    - Default to ImGuiTableFlags_SizingStretchSame if ScrollX is off.
// - When ScrollX is off:
//    - Table defaults to ImGuiTableFlags_SizingStretchSame -> all Columns defaults to ImGuiTableColumnFlags_WidthStretch with same weight.
//    - Columns sizing policy allowed: Stretch (default), Fixed/Auto.
//    - Fixed Columns (if any) will generally obtain their requested width (unless the table cannot fit them all).
//    - Stretch Columns will share the remaining width according to their respective weight.
//    - Mixed Fixed/Stretch columns is possible but has various side-effects on resizing behaviors.
//      The typical use of mixing sizing policies is: any number of LEADING Fixed columns, followed by one or two TRAILING Stretch columns.
//      (this is because the visible order of columns have subtle but necessary effects on how they react to manual resizing).
// - When ScrollX is on:
//    - Table defaults to ImGuiTableFlags_SizingFixedFit -> all Columns defaults to ImGuiTableColumnFlags_WidthFixed
//    - Columns sizing policy allowed: Fixed/Auto mostly.
//    - Fixed Columns can be enlarged as needed. Table will show a horizontal scrollbar if needed.
//    - When using auto-resizing (non-resizable) fixed columns, querying the content width to use item right-alignment e.g. SetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop.
//    - Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on, UNLESS you have specified a value for 'inner_width' in BeginTable().
//      If you specify a value for 'inner_width' then effectively the scrolling space is known and Stretch or mixed Fixed/Stretch columns become meaningful again.
// - Read on documentation at the top of imgui_tables.cpp for details.
typedef enum
{
    // Features
    ImGuiTableFlags_None                       = 0,
    ImGuiTableFlags_Resizable                  = 1<<0,   // Enable resizing columns.
    ImGuiTableFlags_Reorderable                = 1<<1,   // Enable reordering columns in header row (need calling TableSetupColumn() + TableHeadersRow() to display headers)
    ImGuiTableFlags_Hideable                   = 1<<2,   // Enable hiding/disabling columns in context menu.
    ImGuiTableFlags_Sortable                   = 1<<3,   // Enable sorting. Call TableGetSortSpecs() to obtain sort specs. Also see ImGuiTableFlags_SortMulti and ImGuiTableFlags_SortTristate.
    ImGuiTableFlags_NoSavedSettings            = 1<<4,   // Disable persisting columns order, width and sort settings in the .ini file.
    ImGuiTableFlags_ContextMenuInBody          = 1<<5,   // Right-click on columns body/contents will display table context menu. By default it is available in TableHeadersRow().
    // Decorations
    ImGuiTableFlags_RowBg                      = 1<<6,   // Set each RowBg color with ImGuiCol_TableRowBg or ImGuiCol_TableRowBgAlt (equivalent of calling TableSetBgColor with ImGuiTableBgFlags_RowBg0 on each row manually)
    ImGuiTableFlags_BordersInnerH              = 1<<7,   // Draw horizontal borders between rows.
    ImGuiTableFlags_BordersOuterH              = 1<<8,   // Draw horizontal borders at the top and bottom.
    ImGuiTableFlags_BordersInnerV              = 1<<9,   // Draw vertical borders between columns.
    ImGuiTableFlags_BordersOuterV              = 1<<10,  // Draw vertical borders on the left and right sides.
    ImGuiTableFlags_BordersH                   = ImGuiTableFlags_BordersInnerH | ImGuiTableFlags_BordersOuterH, // Draw horizontal borders.
    ImGuiTableFlags_BordersV                   = ImGuiTableFlags_BordersInnerV | ImGuiTableFlags_BordersOuterV, // Draw vertical borders.
    ImGuiTableFlags_BordersInner               = ImGuiTableFlags_BordersInnerV | ImGuiTableFlags_BordersInnerH, // Draw inner borders.
    ImGuiTableFlags_BordersOuter               = ImGuiTableFlags_BordersOuterV | ImGuiTableFlags_BordersOuterH, // Draw outer borders.
    ImGuiTableFlags_Borders                    = ImGuiTableFlags_BordersInner | ImGuiTableFlags_BordersOuter, // Draw all borders.
    ImGuiTableFlags_NoBordersInBody            = 1<<11,  // [ALPHA] Disable vertical borders in columns Body (borders will always appear in Headers). -> May move to style
    ImGuiTableFlags_NoBordersInBodyUntilResize = 1<<12,  // [ALPHA] Disable vertical borders in columns Body until hovered for resize (borders will always appear in Headers). -> May move to style
    // Sizing Policy (read above for defaults)
    ImGuiTableFlags_SizingFixedFit             = 1<<13,  // Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable), matching contents width.
    ImGuiTableFlags_SizingFixedSame            = 2<<13,  // Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable), matching the maximum contents width of all columns. Implicitly enable ImGuiTableFlags_NoKeepColumnsVisible.
    ImGuiTableFlags_SizingStretchProp          = 3<<13,  // Columns default to _WidthStretch with default weights proportional to each columns contents widths.
    ImGuiTableFlags_SizingStretchSame          = 4<<13,  // Columns default to _WidthStretch with default weights all equal, unless overridden by TableSetupColumn().
    // Sizing Extra Options
    ImGuiTableFlags_NoHostExtendX              = 1<<16,  // Make outer width auto-fit to columns, overriding outer_size.x value. Only available when ScrollX/ScrollY are disabled and Stretch columns are not used.
    ImGuiTableFlags_NoHostExtendY              = 1<<17,  // Make outer height stop exactly at outer_size.y (prevent auto-extending table past the limit). Only available when ScrollX/ScrollY are disabled. Data below the limit will be clipped and not visible.
    ImGuiTableFlags_NoKeepColumnsVisible       = 1<<18,  // Disable keeping column always minimally visible when ScrollX is off and table gets too small. Not recommended if columns are resizable.
    ImGuiTableFlags_PreciseWidths              = 1<<19,  // Disable distributing remainder width to stretched columns (width allocation on a 100-wide table with 3 columns: Without this flag: 33,33,34. With this flag: 33,33,33). With larger number of columns, resizing will appear to be less smooth.
    // Clipping
    ImGuiTableFlags_NoClip                     = 1<<20,  // Disable clipping rectangle for every individual columns (reduce draw command count, items will be able to overflow into other columns). Generally incompatible with TableSetupScrollFreeze().
    // Padding
    ImGuiTableFlags_PadOuterX                  = 1<<21,  // Default if BordersOuterV is on. Enable outermost padding. Generally desirable if you have headers.
    ImGuiTableFlags_NoPadOuterX                = 1<<22,  // Default if BordersOuterV is off. Disable outermost padding.
    ImGuiTableFlags_NoPadInnerX                = 1<<23,  // Disable inner padding between columns (double inner padding if BordersOuterV is on, single inner padding if BordersOuterV is off).
    // Scrolling
    ImGuiTableFlags_ScrollX                    = 1<<24,  // Enable horizontal scrolling. Require 'outer_size' parameter of BeginTable() to specify the container size. Changes default sizing policy. Because this creates a child window, ScrollY is currently generally recommended when using ScrollX.
    ImGuiTableFlags_ScrollY                    = 1<<25,  // Enable vertical scrolling. Require 'outer_size' parameter of BeginTable() to specify the container size.
    // Sorting
    ImGuiTableFlags_SortMulti                  = 1<<26,  // Hold shift when clicking headers to sort on multiple column. TableGetSortSpecs() may return specs where (SpecsCount > 1).
    ImGuiTableFlags_SortTristate               = 1<<27,  // Allow no sorting, disable default sorting. TableGetSortSpecs() may return specs where (SpecsCount == 0).

    // [Internal] Combinations and masks
    ImGuiTableFlags_SizingMask_                = ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_SizingFixedSame | ImGuiTableFlags_SizingStretchProp | ImGuiTableFlags_SizingStretchSame,
} ImGuiTableFlags_;

// Flags for ImGui::TableSetupColumn()
typedef enum
{
    // Input configuration flags
    ImGuiTableColumnFlags_None                 = 0,
    ImGuiTableColumnFlags_Disabled             = 1<<0,   // Overriding/master disable flag: hide column, won't show in context menu (unlike calling TableSetColumnEnabled() which manipulates the user accessible state)
    ImGuiTableColumnFlags_DefaultHide          = 1<<1,   // Default as a hidden/disabled column.
    ImGuiTableColumnFlags_DefaultSort          = 1<<2,   // Default as a sorting column.
    ImGuiTableColumnFlags_WidthStretch         = 1<<3,   // Column will stretch. Preferable with horizontal scrolling disabled (default if table sizing policy is _SizingStretchSame or _SizingStretchProp).
    ImGuiTableColumnFlags_WidthFixed           = 1<<4,   // Column will not stretch. Preferable with horizontal scrolling enabled (default if table sizing policy is _SizingFixedFit and table is resizable).
    ImGuiTableColumnFlags_NoResize             = 1<<5,   // Disable manual resizing.
    ImGuiTableColumnFlags_NoReorder            = 1<<6,   // Disable manual reordering this column, this will also prevent other columns from crossing over this column.
    ImGuiTableColumnFlags_NoHide               = 1<<7,   // Disable ability to hide/disable this column.
    ImGuiTableColumnFlags_NoClip               = 1<<8,   // Disable clipping for this column (all NoClip columns will render in a same draw command).
    ImGuiTableColumnFlags_NoSort               = 1<<9,   // Disable ability to sort on this field (even if ImGuiTableFlags_Sortable is set on the table).
    ImGuiTableColumnFlags_NoSortAscending      = 1<<10,  // Disable ability to sort in the ascending direction.
    ImGuiTableColumnFlags_NoSortDescending     = 1<<11,  // Disable ability to sort in the descending direction.
    ImGuiTableColumnFlags_NoHeaderLabel        = 1<<12,  // TableHeadersRow() will not submit label for this column. Convenient for some small columns. Name will still appear in context menu.
    ImGuiTableColumnFlags_NoHeaderWidth        = 1<<13,  // Disable header text width contribution to automatic column width.
    ImGuiTableColumnFlags_PreferSortAscending  = 1<<14,  // Make the initial sort direction Ascending when first sorting on this column (default).
    ImGuiTableColumnFlags_PreferSortDescending = 1<<15,  // Make the initial sort direction Descending when first sorting on this column.
    ImGuiTableColumnFlags_IndentEnable         = 1<<16,  // Use current Indent value when entering cell (default for column 0).
    ImGuiTableColumnFlags_IndentDisable        = 1<<17,  // Ignore current Indent value when entering cell (default for columns > 0). Indentation changes _within_ the cell will still be honored.

    // Output status flags, read-only via TableGetColumnFlags()
    ImGuiTableColumnFlags_IsEnabled            = 1<<24,  // Status: is enabled == not hidden by user/api (referred to as "Hide" in _DefaultHide and _NoHide) flags.
    ImGuiTableColumnFlags_IsVisible            = 1<<25,  // Status: is visible == is enabled AND not clipped by scrolling.
    ImGuiTableColumnFlags_IsSorted             = 1<<26,  // Status: is currently part of the sort specs
    ImGuiTableColumnFlags_IsHovered            = 1<<27,  // Status: is hovered by mouse

    // [Internal] Combinations and masks
    ImGuiTableColumnFlags_WidthMask_           = ImGuiTableColumnFlags_WidthStretch | ImGuiTableColumnFlags_WidthFixed,
    ImGuiTableColumnFlags_IndentMask_          = ImGuiTableColumnFlags_IndentEnable | ImGuiTableColumnFlags_IndentDisable,
    ImGuiTableColumnFlags_StatusMask_          = ImGuiTableColumnFlags_IsEnabled | ImGuiTableColumnFlags_IsVisible | ImGuiTableColumnFlags_IsSorted | ImGuiTableColumnFlags_IsHovered,
    ImGuiTableColumnFlags_NoDirectResize_      = 1<<30,  // [Internal] Disable user resizing this column directly (it may however we resized indirectly from its left edge)
} ImGuiTableColumnFlags_;

// Flags for ImGui::TableNextRow()
typedef enum
{
    ImGuiTableRowFlags_None    = 0,
    ImGuiTableRowFlags_Headers = 1<<0,  // Identify header row (set default background color + width of its contents accounted differently for auto column width)
} ImGuiTableRowFlags_;

// Enum for ImGui::TableSetBgColor()
// Background colors are rendering in 3 layers:
//  - Layer 0: draw with RowBg0 color if set, otherwise draw with ColumnBg0 if set.
//  - Layer 1: draw with RowBg1 color if set, otherwise draw with ColumnBg1 if set.
//  - Layer 2: draw with CellBg color if set.
// The purpose of the two row/columns layers is to let you decide if a background color change should override or blend with the existing color.
// When using ImGuiTableFlags_RowBg on the table, each row has the RowBg0 color automatically set for odd/even rows.
// If you set the color of RowBg0 target, your color will override the existing RowBg0 color.
// If you set the color of RowBg1 or ColumnBg1 target, your color will blend over the RowBg0 color.
typedef enum
{
    ImGuiTableBgTarget_None   = 0,
    ImGuiTableBgTarget_RowBg0 = 1,  // Set row background color 0 (generally used for background, automatically set when ImGuiTableFlags_RowBg is used)
    ImGuiTableBgTarget_RowBg1 = 2,  // Set row background color 1 (generally used for selection marking)
    ImGuiTableBgTarget_CellBg = 3,  // Set cell background color (top-most color)
} ImGuiTableBgTarget_;

// Flags for ImGui::IsWindowFocused()
typedef enum
{
    ImGuiFocusedFlags_None                = 0,
    ImGuiFocusedFlags_ChildWindows        = 1<<0,  // Return true if any children of the window is focused
    ImGuiFocusedFlags_RootWindow          = 1<<1,  // Test from root window (top most parent of the current hierarchy)
    ImGuiFocusedFlags_AnyWindow           = 1<<2,  // Return true if any window is focused. Important: If you are trying to tell how to dispatch your low-level inputs, do NOT use this. Use 'io.WantCaptureMouse' instead! Please read the FAQ!
    ImGuiFocusedFlags_NoPopupHierarchy    = 1<<3,  // Do not consider popup hierarchy (do not treat popup emitter as parent of popup) (when used with _ChildWindows or _RootWindow)
    //ImGuiFocusedFlags_DockHierarchy               = 1 << 4,   // Consider docking hierarchy (treat dockspace host as parent of docked window) (when used with _ChildWindows or _RootWindow)
    ImGuiFocusedFlags_RootAndChildWindows = ImGuiFocusedFlags_RootWindow | ImGuiFocusedFlags_ChildWindows,
} ImGuiFocusedFlags_;

// Flags for ImGui::IsItemHovered(), ImGui::IsWindowHovered()
// Note: if you are trying to check whether your mouse should be dispatched to Dear ImGui or to your app, you should use 'io.WantCaptureMouse' instead! Please read the FAQ!
// Note: windows with the ImGuiWindowFlags_NoInputs flag are ignored by IsWindowHovered() calls.
typedef enum
{
    ImGuiHoveredFlags_None                         = 0,      // Return true if directly over the item/window, not obstructed by another window, not obstructed by an active popup or modal blocking inputs under them.
    ImGuiHoveredFlags_ChildWindows                 = 1<<0,   // IsWindowHovered() only: Return true if any children of the window is hovered
    ImGuiHoveredFlags_RootWindow                   = 1<<1,   // IsWindowHovered() only: Test from root window (top most parent of the current hierarchy)
    ImGuiHoveredFlags_AnyWindow                    = 1<<2,   // IsWindowHovered() only: Return true if any window is hovered
    ImGuiHoveredFlags_NoPopupHierarchy             = 1<<3,   // IsWindowHovered() only: Do not consider popup hierarchy (do not treat popup emitter as parent of popup) (when used with _ChildWindows or _RootWindow)
    //ImGuiHoveredFlags_DockHierarchy               = 1 << 4,   // IsWindowHovered() only: Consider docking hierarchy (treat dockspace host as parent of docked window) (when used with _ChildWindows or _RootWindow)
    ImGuiHoveredFlags_AllowWhenBlockedByPopup      = 1<<5,   // Return true even if a popup window is normally blocking access to this item/window
    //ImGuiHoveredFlags_AllowWhenBlockedByModal     = 1 << 6,   // Return true even if a modal popup window is normally blocking access to this item/window. FIXME-TODO: Unavailable yet.
    ImGuiHoveredFlags_AllowWhenBlockedByActiveItem = 1<<7,   // Return true even if an active item is blocking access to this item/window. Useful for Drag and Drop patterns.
    ImGuiHoveredFlags_AllowWhenOverlapped          = 1<<8,   // IsItemHovered() only: Return true even if the position is obstructed or overlapped by another window
    ImGuiHoveredFlags_AllowWhenDisabled            = 1<<9,   // IsItemHovered() only: Return true even if the item is disabled
    ImGuiHoveredFlags_NoNavOverride                = 1<<10,  // Disable using gamepad/keyboard navigation state when active, always query mouse.
    ImGuiHoveredFlags_RectOnly                     = ImGuiHoveredFlags_AllowWhenBlockedByPopup | ImGuiHoveredFlags_AllowWhenBlockedByActiveItem | ImGuiHoveredFlags_AllowWhenOverlapped,
    ImGuiHoveredFlags_RootAndChildWindows          = ImGuiHoveredFlags_RootWindow | ImGuiHoveredFlags_ChildWindows,

    // Hovering delays (for tooltips)
    ImGuiHoveredFlags_DelayNormal                  = 1<<11,  // Return true after io.HoverDelayNormal elapsed (~0.30 sec)
    ImGuiHoveredFlags_DelayShort                   = 1<<12,  // Return true after io.HoverDelayShort elapsed (~0.10 sec)
    ImGuiHoveredFlags_NoSharedDelay                = 1<<13,  // Disable shared delay system where moving from one item to the next keeps the previous timer for a short time (standard for tooltips with long delays)
} ImGuiHoveredFlags_;

// Flags for ImGui::BeginDragDropSource(), ImGui::AcceptDragDropPayload()
typedef enum
{
    ImGuiDragDropFlags_None                     = 0,
    // BeginDragDropSource() flags
    ImGuiDragDropFlags_SourceNoPreviewTooltip   = 1<<0,   // By default, a successful call to BeginDragDropSource opens a tooltip so you can display a preview or description of the source contents. This flag disables this behavior.
    ImGuiDragDropFlags_SourceNoDisableHover     = 1<<1,   // By default, when dragging we clear data so that IsItemHovered() will return false, to avoid subsequent user code submitting tooltips. This flag disables this behavior so you can still call IsItemHovered() on the source item.
    ImGuiDragDropFlags_SourceNoHoldToOpenOthers = 1<<2,   // Disable the behavior that allows to open tree nodes and collapsing header by holding over them while dragging a source item.
    ImGuiDragDropFlags_SourceAllowNullID        = 1<<3,   // Allow items such as Text(), Image() that have no unique identifier to be used as drag source, by manufacturing a temporary identifier based on their window-relative position. This is extremely unusual within the dear imgui ecosystem and so we made it explicit.
    ImGuiDragDropFlags_SourceExtern             = 1<<4,   // External source (from outside of dear imgui), won't attempt to read current item/window info. Will always return true. Only one Extern source can be active simultaneously.
    ImGuiDragDropFlags_SourceAutoExpirePayload  = 1<<5,   // Automatically expire the payload if the source cease to be submitted (otherwise payloads are persisting while being dragged)
    // AcceptDragDropPayload() flags
    ImGuiDragDropFlags_AcceptBeforeDelivery     = 1<<10,  // AcceptDragDropPayload() will returns true even before the mouse button is released. You can then call IsDelivery() to test if the payload needs to be delivered.
    ImGuiDragDropFlags_AcceptNoDrawDefaultRect  = 1<<11,  // Do not draw the default highlight rectangle when hovering over target.
    ImGuiDragDropFlags_AcceptNoPreviewTooltip   = 1<<12,  // Request hiding the BeginDragDropSource tooltip from the BeginDragDropTarget site.
    ImGuiDragDropFlags_AcceptPeekOnly           = ImGuiDragDropFlags_AcceptBeforeDelivery | ImGuiDragDropFlags_AcceptNoDrawDefaultRect, // For peeking ahead and inspecting the payload before delivery.
} ImGuiDragDropFlags_;

// Standard Drag and Drop payload types. You can define you own payload types using short strings. Types starting with '_' are defined by Dear ImGui.
#define IMGUI_PAYLOAD_TYPE_COLOR_3F     "_COL3F"     // float[3]: Standard type for colors, without alpha. User code may use this type.
#define IMGUI_PAYLOAD_TYPE_COLOR_4F     "_COL4F"     // float[4]: Standard type for colors. User code may use this type.

// A primary data type
typedef enum
{
    ImGuiDataType_S8,      // signed char / char (with sensible compilers)
    ImGuiDataType_U8,      // unsigned char
    ImGuiDataType_S16,     // short
    ImGuiDataType_U16,     // unsigned short
    ImGuiDataType_S32,     // int
    ImGuiDataType_U32,     // unsigned int
    ImGuiDataType_S64,     // long long / __int64
    ImGuiDataType_U64,     // unsigned long long / unsigned __int64
    ImGuiDataType_Float,   // float
    ImGuiDataType_Double,  // double
    ImGuiDataType_COUNT,
} ImGuiDataType_;

// A cardinal direction
typedef enum
{
    ImGuiDir_None  = -1,
    ImGuiDir_Left  = 0,
    ImGuiDir_Right = 1,
    ImGuiDir_Up    = 2,
    ImGuiDir_Down  = 3,
    ImGuiDir_COUNT,
} ImGuiDir_;

// A sorting direction
typedef enum
{
    ImGuiSortDirection_None       = 0,
    ImGuiSortDirection_Ascending  = 1,  // Ascending = 0->9, A->Z etc.
    ImGuiSortDirection_Descending = 2,  // Descending = 9->0, Z->A etc.
} ImGuiSortDirection_;

// A key identifier (ImGuiKey_XXX or ImGuiMod_XXX value)
// All our named keys are >= 512. Keys value 0 to 511 are left unused as legacy native/opaque key values (< 1.87)
// Since >= 1.89 we increased typing (went from int to enum), some legacy code may need a cast to ImGuiKey.
enum                                                     // Forward declared enum type ImGuiKey
{
    // Keyboard
    ImGuiKey_None                = 0,
    ImGuiKey_Tab                 = 512,                      // == ImGuiKey_NamedKey_BEGIN
    ImGuiKey_LeftArrow,
    ImGuiKey_RightArrow,
    ImGuiKey_UpArrow,
    ImGuiKey_DownArrow,
    ImGuiKey_PageUp,
    ImGuiKey_PageDown,
    ImGuiKey_Home,
    ImGuiKey_End,
    ImGuiKey_Insert,
    ImGuiKey_Delete,
    ImGuiKey_Backspace,
    ImGuiKey_Space,
    ImGuiKey_Enter,
    ImGuiKey_Escape,
    ImGuiKey_LeftCtrl,
    ImGuiKey_LeftShift,
    ImGuiKey_LeftAlt,
    ImGuiKey_LeftSuper,
    ImGuiKey_RightCtrl,
    ImGuiKey_RightShift,
    ImGuiKey_RightAlt,
    ImGuiKey_RightSuper,
    ImGuiKey_Menu,
    ImGuiKey_0,
    ImGuiKey_1,
    ImGuiKey_2,
    ImGuiKey_3,
    ImGuiKey_4,
    ImGuiKey_5,
    ImGuiKey_6,
    ImGuiKey_7,
    ImGuiKey_8,
    ImGuiKey_9,
    ImGuiKey_A,
    ImGuiKey_B,
    ImGuiKey_C,
    ImGuiKey_D,
    ImGuiKey_E,
    ImGuiKey_F,
    ImGuiKey_G,
    ImGuiKey_H,
    ImGuiKey_I,
    ImGuiKey_J,
    ImGuiKey_K,
    ImGuiKey_L,
    ImGuiKey_M,
    ImGuiKey_N,
    ImGuiKey_O,
    ImGuiKey_P,
    ImGuiKey_Q,
    ImGuiKey_R,
    ImGuiKey_S,
    ImGuiKey_T,
    ImGuiKey_U,
    ImGuiKey_V,
    ImGuiKey_W,
    ImGuiKey_X,
    ImGuiKey_Y,
    ImGuiKey_Z,
    ImGuiKey_F1,
    ImGuiKey_F2,
    ImGuiKey_F3,
    ImGuiKey_F4,
    ImGuiKey_F5,
    ImGuiKey_F6,
    ImGuiKey_F7,
    ImGuiKey_F8,
    ImGuiKey_F9,
    ImGuiKey_F10,
    ImGuiKey_F11,
    ImGuiKey_F12,
    ImGuiKey_Apostrophe,                                     // '
    ImGuiKey_Comma,                                          // ,
    ImGuiKey_Minus,                                          // -
    ImGuiKey_Period,                                         // .
    ImGuiKey_Slash,                                          // /
    ImGuiKey_Semicolon,                                      // ;
    ImGuiKey_Equal,                                          // =
    ImGuiKey_LeftBracket,                                    // [
    ImGuiKey_Backslash,                                      // \ (this text inhibit multiline comment caused by backslash)
    ImGuiKey_RightBracket,                                   // ]
    ImGuiKey_GraveAccent,                                    // `
    ImGuiKey_CapsLock,
    ImGuiKey_ScrollLock,
    ImGuiKey_NumLock,
    ImGuiKey_PrintScreen,
    ImGuiKey_Pause,
    ImGuiKey_Keypad0,
    ImGuiKey_Keypad1,
    ImGuiKey_Keypad2,
    ImGuiKey_Keypad3,
    ImGuiKey_Keypad4,
    ImGuiKey_Keypad5,
    ImGuiKey_Keypad6,
    ImGuiKey_Keypad7,
    ImGuiKey_Keypad8,
    ImGuiKey_Keypad9,
    ImGuiKey_KeypadDecimal,
    ImGuiKey_KeypadDivide,
    ImGuiKey_KeypadMultiply,
    ImGuiKey_KeypadSubtract,
    ImGuiKey_KeypadAdd,
    ImGuiKey_KeypadEnter,
    ImGuiKey_KeypadEqual,

    // Gamepad (some of those are analog values, 0.0f to 1.0f)                          // GAME NAVIGATION ACTION
    // (download controller mapping PNG/PSD at http://dearimgui.org/controls_sheets)
    ImGuiKey_GamepadStart,                                   // Menu (Xbox)      + (Switch)   Start/Options (PS)
    ImGuiKey_GamepadBack,                                    // View (Xbox)      - (Switch)   Share (PS)
    ImGuiKey_GamepadFaceLeft,                                // X (Xbox)         Y (Switch)   Square (PS)        // Tap: Toggle Menu. Hold: Windowing mode (Focus/Move/Resize windows)
    ImGuiKey_GamepadFaceRight,                               // B (Xbox)         A (Switch)   Circle (PS)        // Cancel / Close / Exit
    ImGuiKey_GamepadFaceUp,                                  // Y (Xbox)         X (Switch)   Triangle (PS)      // Text Input / On-screen Keyboard
    ImGuiKey_GamepadFaceDown,                                // A (Xbox)         B (Switch)   Cross (PS)         // Activate / Open / Toggle / Tweak
    ImGuiKey_GamepadDpadLeft,                                // D-pad Left                                       // Move / Tweak / Resize Window (in Windowing mode)
    ImGuiKey_GamepadDpadRight,                               // D-pad Right                                      // Move / Tweak / Resize Window (in Windowing mode)
    ImGuiKey_GamepadDpadUp,                                  // D-pad Up                                         // Move / Tweak / Resize Window (in Windowing mode)
    ImGuiKey_GamepadDpadDown,                                // D-pad Down                                       // Move / Tweak / Resize Window (in Windowing mode)
    ImGuiKey_GamepadL1,                                      // L Bumper (Xbox)  L (Switch)   L1 (PS)            // Tweak Slower / Focus Previous (in Windowing mode)
    ImGuiKey_GamepadR1,                                      // R Bumper (Xbox)  R (Switch)   R1 (PS)            // Tweak Faster / Focus Next (in Windowing mode)
    ImGuiKey_GamepadL2,                                      // L Trig. (Xbox)   ZL (Switch)  L2 (PS) [Analog]
    ImGuiKey_GamepadR2,                                      // R Trig. (Xbox)   ZR (Switch)  R2 (PS) [Analog]
    ImGuiKey_GamepadL3,                                      // L Stick (Xbox)   L3 (Switch)  L3 (PS)
    ImGuiKey_GamepadR3,                                      // R Stick (Xbox)   R3 (Switch)  R3 (PS)
    ImGuiKey_GamepadLStickLeft,                              // [Analog]                                         // Move Window (in Windowing mode)
    ImGuiKey_GamepadLStickRight,                             // [Analog]                                         // Move Window (in Windowing mode)
    ImGuiKey_GamepadLStickUp,                                // [Analog]                                         // Move Window (in Windowing mode)
    ImGuiKey_GamepadLStickDown,                              // [Analog]                                         // Move Window (in Windowing mode)
    ImGuiKey_GamepadRStickLeft,                              // [Analog]
    ImGuiKey_GamepadRStickRight,                             // [Analog]
    ImGuiKey_GamepadRStickUp,                                // [Analog]
    ImGuiKey_GamepadRStickDown,                              // [Analog]

    // Mouse Buttons (auto-submitted from AddMouseButtonEvent() calls)
    // - This is mirroring the data also written to io.MouseDown[], io.MouseWheel, in a format allowing them to be accessed via standard key API.
    ImGuiKey_MouseLeft,
    ImGuiKey_MouseRight,
    ImGuiKey_MouseMiddle,
    ImGuiKey_MouseX1,
    ImGuiKey_MouseX2,
    ImGuiKey_MouseWheelX,
    ImGuiKey_MouseWheelY,

    // [Internal] Reserved for mod storage
    ImGuiKey_ReservedForModCtrl,
    ImGuiKey_ReservedForModShift,
    ImGuiKey_ReservedForModAlt,
    ImGuiKey_ReservedForModSuper,
    ImGuiKey_COUNT,

    // Keyboard Modifiers (explicitly submitted by backend via AddKeyEvent() calls)
    // - This is mirroring the data also written to io.KeyCtrl, io.KeyShift, io.KeyAlt, io.KeySuper, in a format allowing
    //   them to be accessed via standard key API, allowing calls such as IsKeyPressed(), IsKeyReleased(), querying duration etc.
    // - Code polling every key (e.g. an interface to detect a key press for input mapping) might want to ignore those
    //   and prefer using the real keys (e.g. ImGuiKey_LeftCtrl, ImGuiKey_RightCtrl instead of ImGuiMod_Ctrl).
    // - In theory the value of keyboard modifiers should be roughly equivalent to a logical or of the equivalent left/right keys.
    //   In practice: it's complicated; mods are often provided from different sources. Keyboard layout, IME, sticky keys and
    //   backends tend to interfere and break that equivalence. The safer decision is to relay that ambiguity down to the end-user...
    ImGuiMod_None                = 0,
    ImGuiMod_Ctrl                = 1<<12,
    ImGuiMod_Shift               = 1<<13,
    ImGuiMod_Alt                 = 1<<14,                    // Option/Menu
    ImGuiMod_Super               = 1<<15,                    // Cmd/Super/Windows
    ImGuiMod_Mask_               = 0xF000,
#if defined(__APPLE__)
    ImGuiMod_Shortcut            = ImGuiMod_Super,
#else
    ImGuiMod_Shortcut            = ImGuiMod_Ctrl,
#endif // #if defined(__APPLE__)
    // [Internal] Prior to 1.87 we required user to fill io.KeysDown[512] using their own native index + the io.KeyMap[] array.
    // We are ditching this method but keeping a legacy path for user code doing e.g. IsKeyPressed(MY_NATIVE_KEY_CODE)
    ImGuiKey_NamedKey_BEGIN      = 512,
    ImGuiKey_NamedKey_END        = ImGuiKey_COUNT,
    ImGuiKey_NamedKey_COUNT      = ImGuiKey_NamedKey_END-ImGuiKey_NamedKey_BEGIN,
#ifdef IMGUI_DISABLE_OBSOLETE_KEYIO
    ImGuiKey_KeysData_SIZE       = ImGuiKey_NamedKey_COUNT,  // Size of KeysData[]: only hold named keys
    ImGuiKey_KeysData_OFFSET     = ImGuiKey_NamedKey_BEGIN,  // First key stored in io.KeysData[0]. Accesses to io.KeysData[] must use (key - ImGuiKey_KeysData_OFFSET).
#else
    ImGuiKey_KeysData_SIZE       = ImGuiKey_COUNT,           // Size of KeysData[]: hold legacy 0..512 keycodes + named keys
    ImGuiKey_KeysData_OFFSET     = 0,                        // First key stored in io.KeysData[0]. Accesses to io.KeysData[] must use (key - ImGuiKey_KeysData_OFFSET).
#endif // #ifdef IMGUI_DISABLE_OBSOLETE_KEYIO
#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
    ImGuiKey_ModCtrl             = ImGuiMod_Ctrl,
    ImGuiKey_ModShift            = ImGuiMod_Shift,
    ImGuiKey_ModAlt              = ImGuiMod_Alt,
    ImGuiKey_ModSuper            = ImGuiMod_Super,           // Renamed in 1.89
    ImGuiKey_KeyPadEnter         = ImGuiKey_KeypadEnter,     // Renamed in 1.87
#endif // #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
};

#ifndef IMGUI_DISABLE_OBSOLETE_KEYIO
// OBSOLETED in 1.88 (from July 2022): ImGuiNavInput and io.NavInputs[].
// Official backends between 1.60 and 1.86: will keep working and feed gamepad inputs as long as IMGUI_DISABLE_OBSOLETE_KEYIO is not set.
// Custom backends: feed gamepad inputs via io.AddKeyEvent() and ImGuiKey_GamepadXXX enums.
typedef enum
{
    ImGuiNavInput_Activate,
    ImGuiNavInput_Cancel,
    ImGuiNavInput_Input,
    ImGuiNavInput_Menu,
    ImGuiNavInput_DpadLeft,
    ImGuiNavInput_DpadRight,
    ImGuiNavInput_DpadUp,
    ImGuiNavInput_DpadDown,
    ImGuiNavInput_LStickLeft,
    ImGuiNavInput_LStickRight,
    ImGuiNavInput_LStickUp,
    ImGuiNavInput_LStickDown,
    ImGuiNavInput_FocusPrev,
    ImGuiNavInput_FocusNext,
    ImGuiNavInput_TweakSlow,
    ImGuiNavInput_TweakFast,
    ImGuiNavInput_COUNT,
} ImGuiNavInput;
#endif // #ifndef IMGUI_DISABLE_OBSOLETE_KEYIO
// Configuration flags stored in io.ConfigFlags. Set by user/application.
typedef enum
{
    ImGuiConfigFlags_None                 = 0,
    ImGuiConfigFlags_NavEnableKeyboard    = 1<<0,   // Master keyboard navigation enable flag.
    ImGuiConfigFlags_NavEnableGamepad     = 1<<1,   // Master gamepad navigation enable flag. Backend also needs to set ImGuiBackendFlags_HasGamepad.
    ImGuiConfigFlags_NavEnableSetMousePos = 1<<2,   // Instruct navigation to move the mouse cursor. May be useful on TV/console systems where moving a virtual mouse is awkward. Will update io.MousePos and set io.WantSetMousePos=true. If enabled you MUST honor io.WantSetMousePos requests in your backend, otherwise ImGui will react as if the mouse is jumping around back and forth.
    ImGuiConfigFlags_NavNoCaptureKeyboard = 1<<3,   // Instruct navigation to not set the io.WantCaptureKeyboard flag when io.NavActive is set.
    ImGuiConfigFlags_NoMouse              = 1<<4,   // Instruct imgui to clear mouse position/buttons in NewFrame(). This allows ignoring the mouse information set by the backend.
    ImGuiConfigFlags_NoMouseCursorChange  = 1<<5,   // Instruct backend to not alter mouse cursor shape and visibility. Use if the backend cursor changes are interfering with yours and you don't want to use SetMouseCursor() to change mouse cursor. You may want to honor requests from imgui by reading GetMouseCursor() yourself instead.

    // User storage (to allow your backend/engine to communicate to code that may be shared between multiple projects. Those flags are NOT used by core Dear ImGui)
    ImGuiConfigFlags_IsSRGB               = 1<<20,  // Application is SRGB-aware.
    ImGuiConfigFlags_IsTouchScreen        = 1<<21,  // Application is using a touch screen instead of a mouse.
} ImGuiConfigFlags_;

// Backend capabilities flags stored in io.BackendFlags. Set by imgui_impl_xxx or custom backend.
typedef enum
{
    ImGuiBackendFlags_None                 = 0,
    ImGuiBackendFlags_HasGamepad           = 1<<0,  // Backend Platform supports gamepad and currently has one connected.
    ImGuiBackendFlags_HasMouseCursors      = 1<<1,  // Backend Platform supports honoring GetMouseCursor() value to change the OS cursor shape.
    ImGuiBackendFlags_HasSetMousePos       = 1<<2,  // Backend Platform supports io.WantSetMousePos requests to reposition the OS mouse position (only used if ImGuiConfigFlags_NavEnableSetMousePos is set).
    ImGuiBackendFlags_RendererHasVtxOffset = 1<<3,  // Backend Renderer supports ImDrawCmd::VtxOffset. This enables output of large meshes (64K+ vertices) while still using 16-bit indices.
} ImGuiBackendFlags_;

// Enumeration for PushStyleColor() / PopStyleColor()
typedef enum
{
    ImGuiCol_Text,
    ImGuiCol_TextDisabled,
    ImGuiCol_WindowBg,               // Background of normal windows
    ImGuiCol_ChildBg,                // Background of child windows
    ImGuiCol_PopupBg,                // Background of popups, menus, tooltips windows
    ImGuiCol_Border,
    ImGuiCol_BorderShadow,
    ImGuiCol_FrameBg,                // Background of checkbox, radio button, plot, slider, text input
    ImGuiCol_FrameBgHovered,
    ImGuiCol_FrameBgActive,
    ImGuiCol_TitleBg,
    ImGuiCol_TitleBgActive,
    ImGuiCol_TitleBgCollapsed,
    ImGuiCol_MenuBarBg,
    ImGuiCol_ScrollbarBg,
    ImGuiCol_ScrollbarGrab,
    ImGuiCol_ScrollbarGrabHovered,
    ImGuiCol_ScrollbarGrabActive,
    ImGuiCol_CheckMark,
    ImGuiCol_SliderGrab,
    ImGuiCol_SliderGrabActive,
    ImGuiCol_Button,
    ImGuiCol_ButtonHovered,
    ImGuiCol_ButtonActive,
    ImGuiCol_Header,                 // Header* colors are used for CollapsingHeader, TreeNode, Selectable, MenuItem
    ImGuiCol_HeaderHovered,
    ImGuiCol_HeaderActive,
    ImGuiCol_Separator,
    ImGuiCol_SeparatorHovered,
    ImGuiCol_SeparatorActive,
    ImGuiCol_ResizeGrip,             // Resize grip in lower-right and lower-left corners of windows.
    ImGuiCol_ResizeGripHovered,
    ImGuiCol_ResizeGripActive,
    ImGuiCol_Tab,                    // TabItem in a TabBar
    ImGuiCol_TabHovered,
    ImGuiCol_TabActive,
    ImGuiCol_TabUnfocused,
    ImGuiCol_TabUnfocusedActive,
    ImGuiCol_PlotLines,
    ImGuiCol_PlotLinesHovered,
    ImGuiCol_PlotHistogram,
    ImGuiCol_PlotHistogramHovered,
    ImGuiCol_TableHeaderBg,          // Table header background
    ImGuiCol_TableBorderStrong,      // Table outer and header borders (prefer using Alpha=1.0 here)
    ImGuiCol_TableBorderLight,       // Table inner borders (prefer using Alpha=1.0 here)
    ImGuiCol_TableRowBg,             // Table row background (even rows)
    ImGuiCol_TableRowBgAlt,          // Table row background (odd rows)
    ImGuiCol_TextSelectedBg,
    ImGuiCol_DragDropTarget,         // Rectangle highlighting a drop target
    ImGuiCol_NavHighlight,           // Gamepad/keyboard: current highlighted item
    ImGuiCol_NavWindowingHighlight,  // Highlight window when using CTRL+TAB
    ImGuiCol_NavWindowingDimBg,      // Darken/colorize entire screen behind the CTRL+TAB window list, when active
    ImGuiCol_ModalWindowDimBg,       // Darken/colorize entire screen behind a modal window, when one is active
    ImGuiCol_COUNT,
} ImGuiCol_;

// Enumeration for PushStyleVar() / PopStyleVar() to temporarily modify the ImGuiStyle structure.
// - The enum only refers to fields of ImGuiStyle which makes sense to be pushed/popped inside UI code.
//   During initialization or between frames, feel free to just poke into ImGuiStyle directly.
// - Tip: Use your programming IDE navigation facilities on the names in the _second column_ below to find the actual members and their description.
//   In Visual Studio IDE: CTRL+comma ("Edit.GoToAll") can follow symbols in comments, whereas CTRL+F12 ("Edit.GoToImplementation") cannot.
//   With Visual Assist installed: ALT+G ("VAssistX.GoToImplementation") can also follow symbols in comments.
// - When changing this enum, you need to update the associated internal table GStyleVarInfo[] accordingly. This is where we link enum values to members offset/type.
typedef enum
{
    // Enum name --------------------- // Member in ImGuiStyle structure (see ImGuiStyle for descriptions)
    ImGuiStyleVar_Alpha,                // float     Alpha
    ImGuiStyleVar_DisabledAlpha,        // float     DisabledAlpha
    ImGuiStyleVar_WindowPadding,        // ImVec2    WindowPadding
    ImGuiStyleVar_WindowRounding,       // float     WindowRounding
    ImGuiStyleVar_WindowBorderSize,     // float     WindowBorderSize
    ImGuiStyleVar_WindowMinSize,        // ImVec2    WindowMinSize
    ImGuiStyleVar_WindowTitleAlign,     // ImVec2    WindowTitleAlign
    ImGuiStyleVar_ChildRounding,        // float     ChildRounding
    ImGuiStyleVar_ChildBorderSize,      // float     ChildBorderSize
    ImGuiStyleVar_PopupRounding,        // float     PopupRounding
    ImGuiStyleVar_PopupBorderSize,      // float     PopupBorderSize
    ImGuiStyleVar_FramePadding,         // ImVec2    FramePadding
    ImGuiStyleVar_FrameRounding,        // float     FrameRounding
    ImGuiStyleVar_FrameBorderSize,      // float     FrameBorderSize
    ImGuiStyleVar_ItemSpacing,          // ImVec2    ItemSpacing
    ImGuiStyleVar_ItemInnerSpacing,     // ImVec2    ItemInnerSpacing
    ImGuiStyleVar_IndentSpacing,        // float     IndentSpacing
    ImGuiStyleVar_CellPadding,          // ImVec2    CellPadding
    ImGuiStyleVar_ScrollbarSize,        // float     ScrollbarSize
    ImGuiStyleVar_ScrollbarRounding,    // float     ScrollbarRounding
    ImGuiStyleVar_GrabMinSize,          // float     GrabMinSize
    ImGuiStyleVar_GrabRounding,         // float     GrabRounding
    ImGuiStyleVar_TabRounding,          // float     TabRounding
    ImGuiStyleVar_ButtonTextAlign,      // ImVec2    ButtonTextAlign
    ImGuiStyleVar_SelectableTextAlign,  // ImVec2    SelectableTextAlign
    ImGuiStyleVar_COUNT,
} ImGuiStyleVar_;

// Flags for InvisibleButton() [extended in imgui_internal.h]
typedef enum
{
    ImGuiButtonFlags_None                = 0,
    ImGuiButtonFlags_MouseButtonLeft     = 1<<0,  // React on left mouse button (default)
    ImGuiButtonFlags_MouseButtonRight    = 1<<1,  // React on right mouse button
    ImGuiButtonFlags_MouseButtonMiddle   = 1<<2,  // React on center mouse button

    // [Internal]
    ImGuiButtonFlags_MouseButtonMask_    = ImGuiButtonFlags_MouseButtonLeft | ImGuiButtonFlags_MouseButtonRight | ImGuiButtonFlags_MouseButtonMiddle,
    ImGuiButtonFlags_MouseButtonDefault_ = ImGuiButtonFlags_MouseButtonLeft,
} ImGuiButtonFlags_;

// Flags for ColorEdit3() / ColorEdit4() / ColorPicker3() / ColorPicker4() / ColorButton()
typedef enum
{
    ImGuiColorEditFlags_None             = 0,
    ImGuiColorEditFlags_NoAlpha          = 1<<1,   //              // ColorEdit, ColorPicker, ColorButton: ignore Alpha component (will only read 3 components from the input pointer).
    ImGuiColorEditFlags_NoPicker         = 1<<2,   //              // ColorEdit: disable picker when clicking on color square.
    ImGuiColorEditFlags_NoOptions        = 1<<3,   //              // ColorEdit: disable toggling options menu when right-clicking on inputs/small preview.
    ImGuiColorEditFlags_NoSmallPreview   = 1<<4,   //              // ColorEdit, ColorPicker: disable color square preview next to the inputs. (e.g. to show only the inputs)
    ImGuiColorEditFlags_NoInputs         = 1<<5,   //              // ColorEdit, ColorPicker: disable inputs sliders/text widgets (e.g. to show only the small preview color square).
    ImGuiColorEditFlags_NoTooltip        = 1<<6,   //              // ColorEdit, ColorPicker, ColorButton: disable tooltip when hovering the preview.
    ImGuiColorEditFlags_NoLabel          = 1<<7,   //              // ColorEdit, ColorPicker: disable display of inline text label (the label is still forwarded to the tooltip and picker).
    ImGuiColorEditFlags_NoSidePreview    = 1<<8,   //              // ColorPicker: disable bigger color preview on right side of the picker, use small color square preview instead.
    ImGuiColorEditFlags_NoDragDrop       = 1<<9,   //              // ColorEdit: disable drag and drop target. ColorButton: disable drag and drop source.
    ImGuiColorEditFlags_NoBorder         = 1<<10,  //              // ColorButton: disable border (which is enforced by default)

    // User Options (right-click on widget to change some of them).
    ImGuiColorEditFlags_AlphaBar         = 1<<16,  //              // ColorEdit, ColorPicker: show vertical alpha bar/gradient in picker.
    ImGuiColorEditFlags_AlphaPreview     = 1<<17,  //              // ColorEdit, ColorPicker, ColorButton: display preview as a transparent color over a checkerboard, instead of opaque.
    ImGuiColorEditFlags_AlphaPreviewHalf = 1<<18,  //              // ColorEdit, ColorPicker, ColorButton: display half opaque / half checkerboard, instead of opaque.
    ImGuiColorEditFlags_HDR              = 1<<19,  //              // (WIP) ColorEdit: Currently only disable 0.0f..1.0f limits in RGBA edition (note: you probably want to use ImGuiColorEditFlags_Float flag as well).
    ImGuiColorEditFlags_DisplayRGB       = 1<<20,  // [Display]    // ColorEdit: override _display_ type among RGB/HSV/Hex. ColorPicker: select any combination using one or more of RGB/HSV/Hex.
    ImGuiColorEditFlags_DisplayHSV       = 1<<21,  // [Display]    // "
    ImGuiColorEditFlags_DisplayHex       = 1<<22,  // [Display]    // "
    ImGuiColorEditFlags_Uint8            = 1<<23,  // [DataType]   // ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0..255.
    ImGuiColorEditFlags_Float            = 1<<24,  // [DataType]   // ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0.0f..1.0f floats instead of 0..255 integers. No round-trip of value via integers.
    ImGuiColorEditFlags_PickerHueBar     = 1<<25,  // [Picker]     // ColorPicker: bar for Hue, rectangle for Sat/Value.
    ImGuiColorEditFlags_PickerHueWheel   = 1<<26,  // [Picker]     // ColorPicker: wheel for Hue, triangle for Sat/Value.
    ImGuiColorEditFlags_InputRGB         = 1<<27,  // [Input]      // ColorEdit, ColorPicker: input and output data in RGB format.
    ImGuiColorEditFlags_InputHSV         = 1<<28,  // [Input]      // ColorEdit, ColorPicker: input and output data in HSV format.

    // Defaults Options. You can set application defaults using SetColorEditOptions(). The intent is that you probably don't want to
    // override them in most of your calls. Let the user choose via the option menu and/or call SetColorEditOptions() once during startup.
    ImGuiColorEditFlags_DefaultOptions_  = ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_InputRGB | ImGuiColorEditFlags_PickerHueBar,

    // [Internal] Masks
    ImGuiColorEditFlags_DisplayMask_     = ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_DisplayHSV | ImGuiColorEditFlags_DisplayHex,
    ImGuiColorEditFlags_DataTypeMask_    = ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_Float,
    ImGuiColorEditFlags_PickerMask_      = ImGuiColorEditFlags_PickerHueWheel | ImGuiColorEditFlags_PickerHueBar,
    ImGuiColorEditFlags_InputMask_       = ImGuiColorEditFlags_InputRGB | ImGuiColorEditFlags_InputHSV,

    // Obsolete names (will be removed)
    // ImGuiColorEditFlags_RGB = ImGuiColorEditFlags_DisplayRGB, ImGuiColorEditFlags_HSV = ImGuiColorEditFlags_DisplayHSV, ImGuiColorEditFlags_HEX = ImGuiColorEditFlags_DisplayHex  // [renamed in 1.69]
} ImGuiColorEditFlags_;

// Flags for DragFloat(), DragInt(), SliderFloat(), SliderInt() etc.
// We use the same sets of flags for DragXXX() and SliderXXX() functions as the features are the same and it makes it easier to swap them.
// (Those are per-item flags. There are shared flags in ImGuiIO: io.ConfigDragClickToInputText)
typedef enum
{
    ImGuiSliderFlags_None            = 0,
    ImGuiSliderFlags_AlwaysClamp     = 1<<4,                          // Clamp value to min/max bounds when input manually with CTRL+Click. By default CTRL+Click allows going out of bounds.
    ImGuiSliderFlags_Logarithmic     = 1<<5,                          // Make the widget logarithmic (linear otherwise). Consider using ImGuiSliderFlags_NoRoundToFormat with this if using a format-string with small amount of digits.
    ImGuiSliderFlags_NoRoundToFormat = 1<<6,                          // Disable rounding underlying value to match precision of the display format string (e.g. %.3f values are rounded to those 3 digits)
    ImGuiSliderFlags_NoInput         = 1<<7,                          // Disable CTRL+Click or Enter key allowing to input text directly into the widget
    ImGuiSliderFlags_InvalidMask_    = 0x7000000F,                    // [Internal] We treat using those bits as being potentially a 'float power' argument from the previous API that has got miscast to this enum, and will trigger an assert if needed.

    // Obsolete names (will be removed)
#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
    ImGuiSliderFlags_ClampOnInput    = ImGuiSliderFlags_AlwaysClamp,  // [renamed in 1.79]
#endif // #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
} ImGuiSliderFlags_;

// Identify a mouse button.
// Those values are guaranteed to be stable and we frequently use 0/1 directly. Named enums provided for convenience.
typedef enum
{
    ImGuiMouseButton_Left   = 0,
    ImGuiMouseButton_Right  = 1,
    ImGuiMouseButton_Middle = 2,
    ImGuiMouseButton_COUNT  = 5,
} ImGuiMouseButton_;

// Enumeration for GetMouseCursor()
// User code may request backend to display given cursor by calling SetMouseCursor(), which is why we have some cursors that are marked unused here
typedef enum
{
    ImGuiMouseCursor_None       = -1,
    ImGuiMouseCursor_Arrow      = 0,
    ImGuiMouseCursor_TextInput,   // When hovering over InputText, etc.
    ImGuiMouseCursor_ResizeAll,   // (Unused by Dear ImGui functions)
    ImGuiMouseCursor_ResizeNS,    // When hovering over a horizontal border
    ImGuiMouseCursor_ResizeEW,    // When hovering over a vertical border or a column
    ImGuiMouseCursor_ResizeNESW,  // When hovering over the bottom-left corner of a window
    ImGuiMouseCursor_ResizeNWSE,  // When hovering over the bottom-right corner of a window
    ImGuiMouseCursor_Hand,        // (Unused by Dear ImGui functions. Use for e.g. hyperlinks)
    ImGuiMouseCursor_NotAllowed,  // When hovering something with disallowed interaction. Usually a crossed circle.
    ImGuiMouseCursor_COUNT,
} ImGuiMouseCursor_;

// Enumeration for ImGui::SetWindow***(), SetNextWindow***(), SetNextItem***() functions
// Represent a condition.
// Important: Treat as a regular enum! Do NOT combine multiple values using binary operators! All the functions above treat 0 as a shortcut to ImGuiCond_Always.
typedef enum
{
    ImGuiCond_None         = 0,     // No condition (always set the variable), same as _Always
    ImGuiCond_Always       = 1<<0,  // No condition (always set the variable), same as _None
    ImGuiCond_Once         = 1<<1,  // Set the variable once per runtime session (only the first call will succeed)
    ImGuiCond_FirstUseEver = 1<<2,  // Set the variable if the object/window has no persistently saved data (no entry in .ini file)
    ImGuiCond_Appearing    = 1<<3,  // Set the variable if the object/window is appearing after being hidden/inactive (or the first time)
} ImGuiCond_;

//-----------------------------------------------------------------------------
// [SECTION] Helpers: Memory allocations macros, ImVector<>
//-----------------------------------------------------------------------------

// Extra helpers for C applications
CIMGUI_API void ImVector_Construct(void* vector);  // Construct a zero-size ImVector<> (of any type). This is primarily useful when calling ImFontGlyphRangesBuilder_BuildRanges()
CIMGUI_API void ImVector_Destruct(void* vector);   // Destruct an ImVector<> (of any type). Important: Frees the vector memory but does not call destructors on contained objects (if they have them)

#if defined(IMGUI_HAS_IMSTR)
#if IMGUI_HAS_IMSTR
CIMGUI_API ImStr ImStr_FromCharStr(const char* b);  // Build an ImStr from a regular const char* (no data is copied, so you need to make sure the original char* isn't altered as long as you are using the ImStr).
#endif // #if IMGUI_HAS_IMSTR
#endif // #if defined(IMGUI_HAS_IMSTR)

//-----------------------------------------------------------------------------
// IM_MALLOC(), IM_FREE(), IM_NEW(), IM_PLACEMENT_NEW(), IM_DELETE()
// We call C++ constructor on own allocated memory via the placement "new(ptr) Type()" syntax.
// Defining a custom placement new() with a custom parameter allows us to bypass including <new> which on some platforms complains when user has disabled exceptions.
//-----------------------------------------------------------------------------

#define IM_ALLOC(_SIZE)                     ImGui::MemAlloc(_SIZE)
#define IM_FREE(_PTR)                       ImGui::MemFree(_PTR)
#define IM_PLACEMENT_NEW(_PTR)              new(ImNewWrapper(), _PTR)
#define IM_NEW(_TYPE)                       new(ImNewWrapper(), ImGui::MemAlloc(sizeof(_TYPE))) _TYPE

//-----------------------------------------------------------------------------
// ImVector<>
// Lightweight std::vector<>-like class to avoid dragging dependencies (also, some implementations of STL with debug enabled are absurdly slow, we bypass it so our code runs fast in debug).
//-----------------------------------------------------------------------------
// - You generally do NOT need to care or use this ever. But we need to make it available in imgui.h because some of our public structures are relying on it.
// - We use std-like naming convention here, which is a little unusual for this codebase.
// - Important: clear() frees memory, resize(0) keep the allocated buffer. We use resize(0) a lot to intentionally recycle allocated buffers across frames and amortize our costs.
// - Important: our implementation does NOT call C++ constructors/destructors, we treat everything as raw data! This is intentional but be extra mindful of that,
//   Do NOT use this class as a std::vector replacement in your own code! Many of the structures used by dear imgui can be safely initialized by a zero-memset.
//-----------------------------------------------------------------------------

IM_MSVC_RUNTIME_CHECKS_OFF

// Instantiation of ImVector<ImWchar>

typedef struct ImVector_ImWchar_t
{
    int      Size;
    int      Capacity;
    ImWchar* Data;
} ImVector_ImWchar;

// Instantiation of ImVector<ImGuiTextFilter_ImGuiTextRange>

typedef struct ImVector_ImGuiTextFilter_ImGuiTextRange_t
{
    int                             Size;
    int                             Capacity;
    ImGuiTextFilter_ImGuiTextRange* Data;
} ImVector_ImGuiTextFilter_ImGuiTextRange;

// Instantiation of ImVector<char>

typedef struct ImVector_char_t
{
    int   Size;
    int   Capacity;
    char* Data;
} ImVector_char;

// Instantiation of ImVector<ImGuiStorage_ImGuiStoragePair>

typedef struct ImVector_ImGuiStorage_ImGuiStoragePair_t
{
    int                            Size;
    int                            Capacity;
    ImGuiStorage_ImGuiStoragePair* Data;
} ImVector_ImGuiStorage_ImGuiStoragePair;

// Instantiation of ImVector<ImDrawCmd>

typedef struct ImVector_ImDrawCmd_t
{
    int        Size;
    int        Capacity;
    ImDrawCmd* Data;
} ImVector_ImDrawCmd;

// Instantiation of ImVector<ImDrawIdx>

typedef struct ImVector_ImDrawIdx_t
{
    int        Size;
    int        Capacity;
    ImDrawIdx* Data;
} ImVector_ImDrawIdx;

// Instantiation of ImVector<ImDrawChannel>

typedef struct ImVector_ImDrawChannel_t
{
    int            Size;
    int            Capacity;
    ImDrawChannel* Data;
} ImVector_ImDrawChannel;

// Instantiation of ImVector<ImDrawVert>

typedef struct ImVector_ImDrawVert_t
{
    int         Size;
    int         Capacity;
    ImDrawVert* Data;
} ImVector_ImDrawVert;

// Instantiation of ImVector<ImVec4>

typedef struct ImVector_ImVec4_t
{
    int     Size;
    int     Capacity;
    ImVec4* Data;
} ImVector_ImVec4;

// Instantiation of ImVector<ImTextureID>

typedef struct ImVector_ImTextureID_t
{
    int          Size;
    int          Capacity;
    ImTextureID* Data;
} ImVector_ImTextureID;

// Instantiation of ImVector<ImVec2>

typedef struct ImVector_ImVec2_t
{
    int     Size;
    int     Capacity;
    ImVec2* Data;
} ImVector_ImVec2;

// Instantiation of ImVector<ImU32>

typedef struct ImVector_ImU32_t
{
    int    Size;
    int    Capacity;
    ImU32* Data;
} ImVector_ImU32;

// Instantiation of ImVector<ImFont*>

typedef struct ImVector_ImFontPtr_t
{
    int      Size;
    int      Capacity;
    ImFont** Data;
} ImVector_ImFontPtr;

// Instantiation of ImVector<ImFontAtlasCustomRect>

typedef struct ImVector_ImFontAtlasCustomRect_t
{
    int                    Size;
    int                    Capacity;
    ImFontAtlasCustomRect* Data;
} ImVector_ImFontAtlasCustomRect;

// Instantiation of ImVector<ImFontConfig>

typedef struct ImVector_ImFontConfig_t
{
    int           Size;
    int           Capacity;
    ImFontConfig* Data;
} ImVector_ImFontConfig;

// Instantiation of ImVector<float>

typedef struct ImVector_float_t
{
    int    Size;
    int    Capacity;
    float* Data;
} ImVector_float;

// Instantiation of ImVector<ImFontGlyph>

typedef struct ImVector_ImFontGlyph_t
{
    int          Size;
    int          Capacity;
    ImFontGlyph* Data;
} ImVector_ImFontGlyph;
IM_MSVC_RUNTIME_CHECKS_RESTORE

//-----------------------------------------------------------------------------
// [SECTION] ImGuiStyle
//-----------------------------------------------------------------------------
// You may modify the ImGui::GetStyle() main instance during initialization and before NewFrame().
// During the frame, use ImGui::PushStyleVar(ImGuiStyleVar_XXXX)/PopStyleVar() to alter the main style values,
// and ImGui::PushStyleColor(ImGuiCol_XXX)/PopStyleColor() for colors.
//-----------------------------------------------------------------------------

typedef struct ImGuiStyle_t
{
    float    Alpha;                       // Global alpha applies to everything in Dear ImGui.
    float    DisabledAlpha;               // Additional alpha multiplier applied by BeginDisabled(). Multiply over current value of Alpha.
    ImVec2   WindowPadding;               // Padding within a window.
    float    WindowRounding;              // Radius of window corners rounding. Set to 0.0f to have rectangular windows. Large values tend to lead to variety of artifacts and are not recommended.
    float    WindowBorderSize;            // Thickness of border around windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).
    ImVec2   WindowMinSize;               // Minimum window size. This is a global setting. If you want to constrain individual windows, use SetNextWindowSizeConstraints().
    ImVec2   WindowTitleAlign;            // Alignment for title bar text. Defaults to (0.0f,0.5f) for left-aligned,vertically centered.
    ImGuiDir WindowMenuButtonPosition;    // Side of the collapsing/docking button in the title bar (None/Left/Right). Defaults to ImGuiDir_Left.
    float    ChildRounding;               // Radius of child window corners rounding. Set to 0.0f to have rectangular windows.
    float    ChildBorderSize;             // Thickness of border around child windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).
    float    PopupRounding;               // Radius of popup window corners rounding. (Note that tooltip windows use WindowRounding)
    float    PopupBorderSize;             // Thickness of border around popup/tooltip windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).
    ImVec2   FramePadding;                // Padding within a framed rectangle (used by most widgets).
    float    FrameRounding;               // Radius of frame corners rounding. Set to 0.0f to have rectangular frame (used by most widgets).
    float    FrameBorderSize;             // Thickness of border around frames. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).
    ImVec2   ItemSpacing;                 // Horizontal and vertical spacing between widgets/lines.
    ImVec2   ItemInnerSpacing;            // Horizontal and vertical spacing between within elements of a composed widget (e.g. a slider and its label).
    ImVec2   CellPadding;                 // Padding within a table cell
    ImVec2   TouchExtraPadding;           // Expand reactive bounding box for touch-based system where touch position is not accurate enough. Unfortunately we don't sort widgets so priority on overlap will always be given to the first widget. So don't grow this too much!
    float    IndentSpacing;               // Horizontal indentation when e.g. entering a tree node. Generally == (FontSize + FramePadding.x*2).
    float    ColumnsMinSpacing;           // Minimum horizontal spacing between two columns. Preferably > (FramePadding.x + 1).
    float    ScrollbarSize;               // Width of the vertical scrollbar, Height of the horizontal scrollbar.
    float    ScrollbarRounding;           // Radius of grab corners for scrollbar.
    float    GrabMinSize;                 // Minimum width/height of a grab box for slider/scrollbar.
    float    GrabRounding;                // Radius of grabs corners rounding. Set to 0.0f to have rectangular slider grabs.
    float    LogSliderDeadzone;           // The size in pixels of the dead-zone around zero on logarithmic sliders that cross zero.
    float    TabRounding;                 // Radius of upper corners of a tab. Set to 0.0f to have rectangular tabs.
    float    TabBorderSize;               // Thickness of border around tabs.
    float    TabMinWidthForCloseButton;   // Minimum width for close button to appear on an unselected tab when hovered. Set to 0.0f to always show when hovering, set to FLT_MAX to never show close button unless selected.
    ImGuiDir ColorButtonPosition;         // Side of the color button in the ColorEdit4 widget (left/right). Defaults to ImGuiDir_Right.
    ImVec2   ButtonTextAlign;             // Alignment of button text when button is larger than text. Defaults to (0.5f, 0.5f) (centered).
    ImVec2   SelectableTextAlign;         // Alignment of selectable text. Defaults to (0.0f, 0.0f) (top-left aligned). It's generally important to keep this left-aligned if you want to lay multiple items on a same line.
    ImVec2   DisplayWindowPadding;        // Window position are clamped to be visible within the display area or monitors by at least this amount. Only applies to regular windows.
    ImVec2   DisplaySafeAreaPadding;      // If you cannot see the edges of your screen (e.g. on a TV) increase the safe area padding. Apply to popups/tooltips as well regular windows. NB: Prefer configuring your TV sets correctly!
    float    MouseCursorScale;            // Scale software rendered mouse cursor (when io.MouseDrawCursor is enabled). May be removed later.
    bool     AntiAliasedLines;            // Enable anti-aliased lines/borders. Disable if you are really tight on CPU/GPU. Latched at the beginning of the frame (copied to ImDrawList).
    bool     AntiAliasedLinesUseTex;      // Enable anti-aliased lines/borders using textures where possible. Require backend to render with bilinear filtering (NOT point/nearest filtering). Latched at the beginning of the frame (copied to ImDrawList).
    bool     AntiAliasedFill;             // Enable anti-aliased edges around filled shapes (rounded rectangles, circles, etc.). Disable if you are really tight on CPU/GPU. Latched at the beginning of the frame (copied to ImDrawList).
    float    CurveTessellationTol;        // Tessellation tolerance when using PathBezierCurveTo() without a specific number of segments. Decrease for highly tessellated curves (higher quality, more polygons), increase to reduce quality.
    float    CircleTessellationMaxError;  // Maximum error (in pixels) allowed when using AddCircle()/AddCircleFilled() or drawing rounded corner rectangles with no explicit segment count specified. Decrease for higher quality but more geometry.
    ImVec4   Colors[ImGuiCol_COUNT];
} ImGuiStyle;
CIMGUI_API void ImGuiStyle_ScaleAllSizes(ImGuiStyle* self, float scale_factor);

//-----------------------------------------------------------------------------
// [SECTION] ImGuiIO
//-----------------------------------------------------------------------------
// Communicate most settings and inputs/outputs to Dear ImGui using this structure.
// Access via ImGui::GetIO(). Read 'Programmer guide' section in .cpp file for general usage.
//-----------------------------------------------------------------------------

// [Internal] Storage used by IsKeyDown(), IsKeyPressed() etc functions.
// If prior to 1.87 you used io.KeysDownDuration[] (which was marked as internal), you should use GetKeyData(key)->DownDuration and *NOT* io.KeysData[key]->DownDuration.
typedef struct ImGuiKeyData_t
{
    bool  Down;              // True for if key is down
    float DownDuration;      // Duration the key has been down (<0.0f: not pressed, 0.0f: just pressed, >0.0f: time held)
    float DownDurationPrev;  // Last frame duration the key has been down
    float AnalogValue;       // 0.0f..1.0f for gamepad values
} ImGuiKeyData;

typedef struct ImGuiIO_t
{
    //------------------------------------------------------------------
    // Configuration                            // Default value
    //------------------------------------------------------------------

    ImGuiConfigFlags  ConfigFlags;                        // = 0              // See ImGuiConfigFlags_ enum. Set by user/application. Gamepad/keyboard navigation options, etc.
    ImGuiBackendFlags BackendFlags;                       // = 0              // See ImGuiBackendFlags_ enum. Set by backend (imgui_impl_xxx files or custom backend) to communicate features supported by the backend.
    ImVec2            DisplaySize;                        // <unset>          // Main display size, in pixels (generally == GetMainViewport()->Size). May change every frame.
    float             DeltaTime;                          // = 1.0f/60.0f     // Time elapsed since last frame, in seconds. May change every frame.
    float             IniSavingRate;                      // = 5.0f           // Minimum time between saving positions/sizes to .ini file, in seconds.
    const char*       IniFilename;                        // = "imgui.ini"    // Path to .ini file (important: default "imgui.ini" is relative to current working dir!). Set NULL to disable automatic .ini loading/saving or if you want to manually call LoadIniSettingsXXX() / SaveIniSettingsXXX() functions.
    const char*       LogFilename;                        // = "imgui_log.txt"// Path to .log file (default parameter to ImGui::LogToFile when no file is specified).
    float             MouseDoubleClickTime;               // = 0.30f          // Time for a double-click, in seconds.
    float             MouseDoubleClickMaxDist;            // = 6.0f           // Distance threshold to stay in to validate a double-click, in pixels.
    float             MouseDragThreshold;                 // = 6.0f           // Distance threshold before considering we are dragging.
    float             KeyRepeatDelay;                     // = 0.275f         // When holding a key/button, time before it starts repeating, in seconds (for buttons in Repeat mode, etc.).
    float             KeyRepeatRate;                      // = 0.050f         // When holding a key/button, rate at which it repeats, in seconds.
    float             HoverDelayNormal;                   // = 0.30 sec       // Delay on hovering before IsItemHovered(ImGuiHoveredFlags_DelayNormal) returns true.
    float             HoverDelayShort;                    // = 0.10 sec       // Delay on hovering before IsItemHovered(ImGuiHoveredFlags_DelayShort) returns true.
    void*             UserData;                           // = NULL           // Store your own data for retrieval by callbacks.

    ImFontAtlas*      Fonts;                              // <auto>           // Font atlas: load, rasterize and pack one or more fonts into a single texture.
    float             FontGlobalScale;                    // = 1.0f           // Global scale all fonts
    bool              FontAllowUserScaling;               // = false          // Allow user scaling text of individual window with CTRL+Wheel.
    ImFont*           FontDefault;                        // = NULL           // Font to use on NewFrame(). Use NULL to uses Fonts->Fonts[0].
    ImVec2            DisplayFramebufferScale;            // = (1, 1)         // For retina display or other situations where window coordinates are different from framebuffer coordinates. This generally ends up in ImDrawData::FramebufferScale.

    // Miscellaneous options
    bool              MouseDrawCursor;                    // = false          // Request ImGui to draw a mouse cursor for you (if you are on a platform without a mouse cursor). Cannot be easily renamed to 'io.ConfigXXX' because this is frequently used by backend implementations.
    bool              ConfigMacOSXBehaviors;              // = defined(__APPLE__) // OS X style: Text editing cursor movement using Alt instead of Ctrl, Shortcuts using Cmd/Super instead of Ctrl, Line/Text Start and End using Cmd+Arrows instead of Home/End, Double click selects by word instead of selecting whole text, Multi-selection in lists uses Cmd/Super instead of Ctrl.
    bool              ConfigInputTrickleEventQueue;       // = true           // Enable input queue trickling: some types of events submitted during the same frame (e.g. button down + up) will be spread over multiple frames, improving interactions with low framerates.
    bool              ConfigInputTextCursorBlink;         // = true           // Enable blinking cursor (optional as some users consider it to be distracting).
    bool              ConfigInputTextEnterKeepActive;     // = false          // [BETA] Pressing Enter will keep item active and select contents (single-line only).
    bool              ConfigDragClickToInputText;         // = false          // [BETA] Enable turning DragXXX widgets into text input with a simple mouse click-release (without moving). Not desirable on devices without a keyboard.
    bool              ConfigWindowsResizeFromEdges;       // = true           // Enable resizing of windows from their edges and from the lower-left corner. This requires (io.BackendFlags & ImGuiBackendFlags_HasMouseCursors) because it needs mouse cursor feedback. (This used to be a per-window ImGuiWindowFlags_ResizeFromAnySide flag)
    bool              ConfigWindowsMoveFromTitleBarOnly;  // = false       // Enable allowing to move windows only when clicking on their title bar. Does not apply to windows without a title bar.
    float             ConfigMemoryCompactTimer;           // = 60.0f          // Timer (in seconds) to free transient windows/tables memory buffers when unused. Set to -1.0f to disable.

    //------------------------------------------------------------------
    // Platform Functions
    // (the imgui_impl_xxxx backend files are setting those up for you)
    //------------------------------------------------------------------

    // Optional: Platform/Renderer backend name (informational only! will be displayed in About Window) + User data for backend/wrappers to store their own stuff.
    const char*       BackendPlatformName;                // = NULL
    const char*       BackendRendererName;                // = NULL
    void*             BackendPlatformUserData;            // = NULL           // User data for platform backend
    void*             BackendRendererUserData;            // = NULL           // User data for renderer backend
    void*             BackendLanguageUserData;            // = NULL           // User data for non C++ programming language backend

    // Optional: Access OS clipboard
    // (default to use native Win32 clipboard on Windows, otherwise uses a private clipboard. Override to access OS clipboard on other architectures)
    const char* (*GetClipboardTextFn)(void* user_data);
    void (*SetClipboardTextFn)(void* user_data, const char* text);
    void*             ClipboardUserData;

    // Optional: Notify OS Input Method Editor of the screen position of your cursor for text input position (e.g. when using Japanese/Chinese IME on Windows)
    // (default to use native imm32 api on Windows)
    void (*SetPlatformImeDataFn)(ImGuiViewport* viewport, ImGuiPlatformImeData* data);
#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
    void*             ImeWindowHandle;                    // = NULL           // [Obsolete] Set ImGuiViewport::PlatformHandleRaw instead. Set this to your HWND to get automatic IME cursor positioning.
#else
    void*             _UnusedPadding;                     // Unused field to keep data structure the same size.
#endif // #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
    //------------------------------------------------------------------
    // Input - Call before calling NewFrame()
    //------------------------------------------------------------------

    //------------------------------------------------------------------
    // Output - Updated by NewFrame() or EndFrame()/Render()
    // (when reading from the io.WantCaptureMouse, io.WantCaptureKeyboard flags to dispatch your inputs, it is
    //  generally easier and more correct to use their state BEFORE calling NewFrame(). See FAQ for details!)
    //------------------------------------------------------------------

    bool              WantCaptureMouse;                   // Set when Dear ImGui will use mouse inputs, in this case do not dispatch them to your main game/application (either way, always pass on mouse inputs to imgui). (e.g. unclicked mouse is hovering over an imgui window, widget is active, mouse was clicked over an imgui window, etc.).
    bool              WantCaptureKeyboard;                // Set when Dear ImGui will use keyboard inputs, in this case do not dispatch them to your main game/application (either way, always pass keyboard inputs to imgui). (e.g. InputText active, or an imgui window is focused and navigation is enabled, etc.).
    bool              WantTextInput;                      // Mobile/console: when set, you may display an on-screen keyboard. This is set by Dear ImGui when it wants textual keyboard input to happen (e.g. when a InputText widget is active).
    bool              WantSetMousePos;                    // MousePos has been altered, backend should reposition mouse on next frame. Rarely used! Set only when ImGuiConfigFlags_NavEnableSetMousePos flag is enabled.
    bool              WantSaveIniSettings;                // When manual .ini load/save is active (io.IniFilename == NULL), this will be set to notify your application that you can call SaveIniSettingsToMemory() and save yourself. Important: clear io.WantSaveIniSettings yourself after saving!
    bool              NavActive;                          // Keyboard/Gamepad navigation is currently allowed (will handle ImGuiKey_NavXXX events) = a window is focused and it doesn't use the ImGuiWindowFlags_NoNavInputs flag.
    bool              NavVisible;                         // Keyboard/Gamepad navigation is visible and allowed (will handle ImGuiKey_NavXXX events).
    float             Framerate;                          // Estimate of application framerate (rolling average over 60 frames, based on io.DeltaTime), in frame per second. Solely for convenience. Slow applications may not want to use a moving average or may want to reset underlying buffers occasionally.
    int               MetricsRenderVertices;              // Vertices output during last call to Render()
    int               MetricsRenderIndices;               // Indices output during last call to Render() = number of triangles * 3
    int               MetricsRenderWindows;               // Number of visible windows
    int               MetricsActiveWindows;               // Number of active windows
    int               MetricsActiveAllocations;           // Number of active allocations, updated by MemAlloc/MemFree based on current context. May be off if you have multiple imgui contexts.
    ImVec2            MouseDelta;                         // Mouse delta. Note that this is zero if either current or previous position are invalid (-FLT_MAX,-FLT_MAX), so a disappearing/reappearing mouse won't have a huge delta.

    // Legacy: before 1.87, we required backend to fill io.KeyMap[] (imgui->native map) during initialization and io.KeysDown[] (native indices) every frame.
    // This is still temporarily supported as a legacy feature. However the new preferred scheme is for backend to call io.AddKeyEvent().
    //   Old (<1.87):  ImGui::IsKeyPressed(ImGui::GetIO().KeyMap[ImGuiKey_Space]) --> New (1.87+) ImGui::IsKeyPressed(ImGuiKey_Space)
#ifndef IMGUI_DISABLE_OBSOLETE_KEYIO
    int               KeyMap[ImGuiKey_COUNT];             // [LEGACY] Input: map of indices into the KeysDown[512] entries array which represent your "native" keyboard state. The first 512 are now unused and should be kept zero. Legacy backend will write into KeyMap[] using ImGuiKey_ indices which are always >512.
    bool              KeysDown[ImGuiKey_COUNT];           // [LEGACY] Input: Keyboard keys that are pressed (ideally left in the "native" order your engine has access to keyboard keys, so you can use your own defines/enums for keys). This used to be [512] sized. It is now ImGuiKey_COUNT to allow legacy io.KeysDown[GetKeyIndex(...)] to work without an overflow.
    float             NavInputs[ImGuiNavInput_COUNT];     // [LEGACY] Since 1.88, NavInputs[] was removed. Backends from 1.60 to 1.86 won't build. Feed gamepad inputs via io.AddKeyEvent() and ImGuiKey_GamepadXXX enums.
#endif // #ifndef IMGUI_DISABLE_OBSOLETE_KEYIO
    //------------------------------------------------------------------
    // [Internal] Dear ImGui will maintain those fields. Forward compatibility not guaranteed!
    //------------------------------------------------------------------

    // Main Input State
    // (this block used to be written by backend, since 1.87 it is best to NOT write to those directly, call the AddXXX functions above instead)
    // (reading from those variables is fair game, as they are extremely unlikely to be moving anywhere)
    ImVec2            MousePos;                           // Mouse position, in pixels. Set to ImVec2(-FLT_MAX, -FLT_MAX) if mouse is unavailable (on another screen, etc.)
    bool              MouseDown[5];                       // Mouse buttons: 0=left, 1=right, 2=middle + extras (ImGuiMouseButton_COUNT == 5). Dear ImGui mostly uses left and right buttons. Other buttons allow us to track if the mouse is being used by your application + available to user as a convenience via IsMouse** API.
    float             MouseWheel;                         // Mouse wheel Vertical: 1 unit scrolls about 5 lines text.
    float             MouseWheelH;                        // Mouse wheel Horizontal. Most users don't have a mouse with a horizontal wheel, may not be filled by all backends.
    bool              KeyCtrl;                            // Keyboard modifier down: Control
    bool              KeyShift;                           // Keyboard modifier down: Shift
    bool              KeyAlt;                             // Keyboard modifier down: Alt
    bool              KeySuper;                           // Keyboard modifier down: Cmd/Super/Windows

    // Other state maintained from data above + IO function calls
    ImGuiKeyChord     KeyMods;                            // Key mods flags (any of ImGuiMod_Ctrl/ImGuiMod_Shift/ImGuiMod_Alt/ImGuiMod_Super flags, same as io.KeyCtrl/KeyShift/KeyAlt/KeySuper but merged into flags). Read-only, updated by NewFrame()
    ImGuiKeyData      KeysData[ImGuiKey_KeysData_SIZE];   // Key state for all known keys. Use IsKeyXXX() functions to access this.
    bool              WantCaptureMouseUnlessPopupClose;   // Alternative to WantCaptureMouse: (WantCaptureMouse == true && WantCaptureMouseUnlessPopupClose == false) when a click over void is expected to close a popup.
    ImVec2            MousePosPrev;                       // Previous mouse position (note that MouseDelta is not necessary == MousePos-MousePosPrev, in case either position is invalid)
    ImVec2            MouseClickedPos[5];                 // Position at time of clicking
    double            MouseClickedTime[5];                // Time of last click (used to figure out double-click)
    bool              MouseClicked[5];                    // Mouse button went from !Down to Down (same as MouseClickedCount[x] != 0)
    bool              MouseDoubleClicked[5];              // Has mouse button been double-clicked? (same as MouseClickedCount[x] == 2)
    ImU16             MouseClickedCount[5];               // == 0 (not clicked), == 1 (same as MouseClicked[]), == 2 (double-clicked), == 3 (triple-clicked) etc. when going from !Down to Down
    ImU16             MouseClickedLastCount[5];           // Count successive number of clicks. Stays valid after mouse release. Reset after another click is done.
    bool              MouseReleased[5];                   // Mouse button went from Down to !Down
    bool              MouseDownOwned[5];                  // Track if button was clicked inside a dear imgui window or over void blocked by a popup. We don't request mouse capture from the application if click started outside ImGui bounds.
    bool              MouseDownOwnedUnlessPopupClose[5];  // Track if button was clicked inside a dear imgui window.
    float             MouseDownDuration[5];               // Duration the mouse button has been down (0.0f == just clicked)
    float             MouseDownDurationPrev[5];           // Previous time the mouse button has been down
    float             MouseDragMaxDistanceSqr[5];         // Squared maximum distance of how much mouse has traveled from the clicking point (used for moving thresholds)
    float             PenPressure;                        // Touch/Pen pressure (0.0f to 1.0f, should be >0.0f only when MouseDown[0] == true). Helper storage currently unused by Dear ImGui.
    bool              AppFocusLost;                       // Only modify via AddFocusEvent()
    bool              AppAcceptingEvents;                 // Only modify via SetAppAcceptingEvents()
    ImS8              BackendUsingLegacyKeyArrays;        // -1: unknown, 0: using AddKeyEvent(), 1: using legacy io.KeysDown[]
    bool              BackendUsingLegacyNavInputArray;    // 0: using AddKeyAnalogEvent(), 1: writing to legacy io.NavInputs[] directly
    ImWchar16         InputQueueSurrogate;                // For AddInputCharacterUTF16()
    ImVector_ImWchar  InputQueueCharacters;               // Queue of _characters_ input (obtained by platform backend). Fill using AddInputCharacter() helper.
} ImGuiIO;
// Input Functions
CIMGUI_API void ImGuiIO_AddKeyEvent(ImGuiIO* self, ImGuiKey key, bool down);                                          // Queue a new key down/up event. Key should be "translated" (as in, generally ImGuiKey_A matches the key end-user would use to emit an 'A' character)
CIMGUI_API void ImGuiIO_AddKeyAnalogEvent(ImGuiIO* self, ImGuiKey key, bool down, float v);                           // Queue a new key down/up event for analog values (e.g. ImGuiKey_Gamepad_ values). Dead-zones should be handled by the backend.
CIMGUI_API void ImGuiIO_AddMousePosEvent(ImGuiIO* self, float x, float y);                                            // Queue a mouse position update. Use -FLT_MAX,-FLT_MAX to signify no mouse (e.g. app not focused and not hovered)
CIMGUI_API void ImGuiIO_AddMouseButtonEvent(ImGuiIO* self, int button, bool down);                                    // Queue a mouse button change
CIMGUI_API void ImGuiIO_AddMouseWheelEvent(ImGuiIO* self, float wh_x, float wh_y);                                    // Queue a mouse wheel update
CIMGUI_API void ImGuiIO_AddFocusEvent(ImGuiIO* self, bool focused);                                                   // Queue a gain/loss of focus for the application (generally based on OS/platform focus of your window)
CIMGUI_API void ImGuiIO_AddInputCharacter(ImGuiIO* self, unsigned int c);                                             // Queue a new character input
CIMGUI_API void ImGuiIO_AddInputCharacterUTF16(ImGuiIO* self, ImWchar16 c);                                           // Queue a new character input from a UTF-16 character, it can be a surrogate
CIMGUI_API void ImGuiIO_AddInputCharactersUTF8(ImGuiIO* self, const char* str);                                       // Queue a new characters input from a UTF-8 string
CIMGUI_API void ImGuiIO_SetKeyEventNativeData(ImGuiIO* self, ImGuiKey key, int native_keycode, int native_scancode);  // Implied native_legacy_index = -1
CIMGUI_API void ImGuiIO_SetKeyEventNativeDataEx(ImGuiIO* self, ImGuiKey key, int native_keycode, int native_scancode, int native_legacy_index /* = -1 */); // [Optional] Specify index for legacy <1.87 IsKeyXXX() functions with native indices + specify native keycode, scancode.
CIMGUI_API void ImGuiIO_SetAppAcceptingEvents(ImGuiIO* self, bool accepting_events);                                  // Set master flag for accepting key/mouse/text events (default to true). Useful if you have native dialog boxes that are interrupting your application loop/refresh, and you want to disable events being queued while your app is frozen.
CIMGUI_API void ImGuiIO_ClearInputCharacters(ImGuiIO* self);                                                          // [Internal] Clear the text input buffer manually
CIMGUI_API void ImGuiIO_ClearInputKeys(ImGuiIO* self);                                                                // [Internal] Release all keys

//-----------------------------------------------------------------------------
// [SECTION] Misc data structures
//-----------------------------------------------------------------------------

// Shared state of InputText(), passed as an argument to your callback when a ImGuiInputTextFlags_Callback* flag is used.
// The callback function should return 0 by default.
// Callbacks (follow a flag name and see comments in ImGuiInputTextFlags_ declarations for more details)
// - ImGuiInputTextFlags_CallbackEdit:        Callback on buffer edit (note that InputText() already returns true on edit, the callback is useful mainly to manipulate the underlying buffer while focus is active)
// - ImGuiInputTextFlags_CallbackAlways:      Callback on each iteration
// - ImGuiInputTextFlags_CallbackCompletion:  Callback on pressing TAB
// - ImGuiInputTextFlags_CallbackHistory:     Callback on pressing Up/Down arrows
// - ImGuiInputTextFlags_CallbackCharFilter:  Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard, or return 1 in callback to discard.
// - ImGuiInputTextFlags_CallbackResize:      Callback on buffer capacity changes request (beyond 'buf_size' parameter value), allowing the string to grow.
typedef struct ImGuiInputTextCallbackData_t
{
    ImGuiInputTextFlags EventFlag;       // One ImGuiInputTextFlags_Callback*    // Read-only
    ImGuiInputTextFlags Flags;           // What user passed to InputText()      // Read-only
    void*               UserData;        // What user passed to InputText()      // Read-only

    // Arguments for the different callback events
    // - To modify the text buffer in a callback, prefer using the InsertChars() / DeleteChars() function. InsertChars() will take care of calling the resize callback if necessary.
    // - If you know your edits are not going to resize the underlying buffer allocation, you may modify the contents of 'Buf[]' directly. You need to update 'BufTextLen' accordingly (0 <= BufTextLen < BufSize) and set 'BufDirty'' to true so InputText can update its internal state.
    ImWchar             EventChar;       // Character input                      // Read-write   // [CharFilter] Replace character with another one, or set to zero to drop. return 1 is equivalent to setting EventChar=0;
    ImGuiKey            EventKey;        // Key pressed (Up/Down/TAB)            // Read-only    // [Completion,History]
    char*               Buf;             // Text buffer                          // Read-write   // [Resize] Can replace pointer / [Completion,History,Always] Only write to pointed data, don't replace the actual pointer!
    int                 BufTextLen;      // Text length (in bytes)               // Read-write   // [Resize,Completion,History,Always] Exclude zero-terminator storage. In C land: == strlen(some_text), in C++ land: string.length()
    int                 BufSize;         // Buffer size (in bytes) = capacity+1  // Read-only    // [Resize,Completion,History,Always] Include zero-terminator storage. In C land == ARRAYSIZE(my_char_array), in C++ land: string.capacity()+1
    bool                BufDirty;        // Set if you modify Buf/BufTextLen!    // Write        // [Completion,History,Always]
    int                 CursorPos;       //                                      // Read-write   // [Completion,History,Always]
    int                 SelectionStart;  //                                      // Read-write   // [Completion,History,Always] == to SelectionEnd when no selection)
    int                 SelectionEnd;    //                                      // Read-write   // [Completion,History,Always]
} ImGuiInputTextCallbackData;
CIMGUI_API void ImGuiInputTextCallbackData_DeleteChars(ImGuiInputTextCallbackData* self, int pos, int bytes_count);
CIMGUI_API void ImGuiInputTextCallbackData_InsertChars(ImGuiInputTextCallbackData* self, int pos, const char* text, const char* text_end /* = NULL */);
CIMGUI_API void ImGuiInputTextCallbackData_SelectAll(ImGuiInputTextCallbackData* self);
CIMGUI_API void ImGuiInputTextCallbackData_ClearSelection(ImGuiInputTextCallbackData* self);
CIMGUI_API bool ImGuiInputTextCallbackData_HasSelection(const ImGuiInputTextCallbackData* self);

// Resizing callback data to apply custom constraint. As enabled by SetNextWindowSizeConstraints(). Callback is called during the next Begin().
// NB: For basic min/max size constraint on each axis you don't need to use the callback! The SetNextWindowSizeConstraints() parameters are enough.
typedef struct ImGuiSizeCallbackData_t
{
    void*  UserData;     // Read-only.   What user passed to SetNextWindowSizeConstraints(). Generally store an integer or float in here (need reinterpret_cast<>).
    ImVec2 Pos;          // Read-only.   Window position, for reference.
    ImVec2 CurrentSize;  // Read-only.   Current window size.
    ImVec2 DesiredSize;  // Read-write.  Desired size, based on user's mouse position. Write to this field to restrain resizing.
} ImGuiSizeCallbackData;

// Data payload for Drag and Drop operations: AcceptDragDropPayload(), GetDragDropPayload()
typedef struct ImGuiPayload_t
{
    // Members
    void*   Data;            // Data (copied and owned by dear imgui)
    int     DataSize;        // Data size

    // [Internal]
    ImGuiID SourceId;        // Source item id
    ImGuiID SourceParentId;  // Source parent id (if available)
    int     DataFrameCount;  // Data timestamp
    char    DataType[32+1];  // Data type tag (short user-supplied string, 32 characters max)
    bool    Preview;         // Set when AcceptDragDropPayload() was called and mouse has been hovering the target item (nb: handle overlapping drag targets)
    bool    Delivery;        // Set when AcceptDragDropPayload() was called and mouse button is released over the target item.
} ImGuiPayload;
CIMGUI_API void ImGuiPayload_Clear(ImGuiPayload* self);
CIMGUI_API bool ImGuiPayload_IsDataType(const ImGuiPayload* self, const char* type);
CIMGUI_API bool ImGuiPayload_IsPreview(const ImGuiPayload* self);
CIMGUI_API bool ImGuiPayload_IsDelivery(const ImGuiPayload* self);

// Sorting specification for one column of a table (sizeof == 12 bytes)
typedef struct ImGuiTableColumnSortSpecs_t
{
    ImGuiID            ColumnUserID;       // User id of the column (if specified by a TableSetupColumn() call)
    ImS16              ColumnIndex;        // Index of the column
    ImS16              SortOrder;          // Index within parent ImGuiTableSortSpecs (always stored in order starting from 0, tables sorted on a single criteria will always have a 0 here)
    ImGuiSortDirection SortDirection : 8;  // ImGuiSortDirection_Ascending or ImGuiSortDirection_Descending (you can use this or SortSign, whichever is more convenient for your sort function)
} ImGuiTableColumnSortSpecs;

// Sorting specifications for a table (often handling sort specs for a single column, occasionally more)
// Obtained by calling TableGetSortSpecs().
// When 'SpecsDirty == true' you can sort your data. It will be true with sorting specs have changed since last call, or the first time.
// Make sure to set 'SpecsDirty = false' after sorting, else you may wastefully sort your data every frame!
typedef struct ImGuiTableSortSpecs_t
{
    const ImGuiTableColumnSortSpecs* Specs;       // Pointer to sort spec array.
    int                              SpecsCount;  // Sort spec count. Most often 1. May be > 1 when ImGuiTableFlags_SortMulti is enabled. May be == 0 when ImGuiTableFlags_SortTristate is enabled.
    bool                             SpecsDirty;  // Set to true when specs have changed since last time! Use this to sort again, then clear the flag.
} ImGuiTableSortSpecs;

//-----------------------------------------------------------------------------
// [SECTION] Helpers (ImGuiOnceUponAFrame, ImGuiTextFilter, ImGuiTextBuffer, ImGuiStorage, ImGuiListClipper, ImColor)
//-----------------------------------------------------------------------------

// Helper: Unicode defines
#define IM_UNICODE_CODEPOINT_INVALID 0xFFFD                                                              // Invalid Unicode code point (standard value).
#ifdef IMGUI_USE_WCHAR32
#define IM_UNICODE_CODEPOINT_MAX     0x10FFFF    // Maximum Unicode code point supported by this build.
#else
#define IM_UNICODE_CODEPOINT_MAX     0xFFFF      // Maximum Unicode code point supported by this build.
#endif // #ifdef IMGUI_USE_WCHAR32

// [Internal]
typedef struct ImGuiTextFilter_ImGuiTextRange_t
{
    const char* b;
    const char* e;
} ImGuiTextFilter_ImGuiTextRange;
CIMGUI_API bool ImGuiTextFilter_ImGuiTextRange_empty(const ImGuiTextFilter_ImGuiTextRange* self);
CIMGUI_API void ImGuiTextFilter_ImGuiTextRange_split(const ImGuiTextFilter_ImGuiTextRange* self, char separator, ImVector_ImGuiTextFilter_ImGuiTextRange* out);
// Helper: Parse and apply text filters. In format "aaaaa[,bbbb][,ccccc]"
typedef struct ImGuiTextFilter_t
{
    char InputBuf[256];
    ImVector_ImGuiTextFilter_ImGuiTextRange Filters;
    int  CountGrep;
} ImGuiTextFilter;
CIMGUI_API bool ImGuiTextFilter_Draw(ImGuiTextFilter* self, const char* label /* = "Filter (inc,-exc)" */, float width /* = 0.0f */); // Helper calling InputText+Build
CIMGUI_API bool ImGuiTextFilter_PassFilter(const ImGuiTextFilter* self, const char* text, const char* text_end /* = NULL */);
CIMGUI_API void ImGuiTextFilter_Build(ImGuiTextFilter* self);
CIMGUI_API void ImGuiTextFilter_Clear(ImGuiTextFilter* self);
CIMGUI_API bool ImGuiTextFilter_IsActive(const ImGuiTextFilter* self);

// Helper: Growable text buffer for logging/accumulating text
// (this could be called 'ImGuiTextBuilder' / 'ImGuiStringBuilder')
typedef struct ImGuiTextBuffer_t
{
    ImVector_char Buf;
} ImGuiTextBuffer;
CIMGUI_API const char* ImGuiTextBuffer_begin(const ImGuiTextBuffer* self);
CIMGUI_API const char* ImGuiTextBuffer_end(const ImGuiTextBuffer* self);                                                  // Buf is zero-terminated, so end() will point on the zero-terminator
CIMGUI_API int         ImGuiTextBuffer_size(const ImGuiTextBuffer* self);
CIMGUI_API bool        ImGuiTextBuffer_empty(const ImGuiTextBuffer* self);
CIMGUI_API void        ImGuiTextBuffer_clear(ImGuiTextBuffer* self);
CIMGUI_API void        ImGuiTextBuffer_reserve(ImGuiTextBuffer* self, int capacity);
CIMGUI_API const char* ImGuiTextBuffer_c_str(const ImGuiTextBuffer* self);
CIMGUI_API void        ImGuiTextBuffer_append(ImGuiTextBuffer* self, const char* str, const char* str_end /* = NULL */);
CIMGUI_API void        ImGuiTextBuffer_appendf(ImGuiTextBuffer* self, const char* fmt, ...) IM_FMTARGS(2);
CIMGUI_API void        ImGuiTextBuffer_appendfv(ImGuiTextBuffer* self, const char* fmt, va_list args) IM_FMTLIST(2);

// [Internal]
typedef struct ImGuiStorage_ImGuiStoragePair_t
{
    ImGuiID key;
    union
    {
        int   val_i;
        float val_f;
        void* val_p;
    };
} ImGuiStorage_ImGuiStoragePair;
// Helper: Key->Value storage
// Typically you don't have to worry about this since a storage is held within each Window.
// We use it to e.g. store collapse state for a tree (Int 0/1)
// This is optimized for efficient lookup (dichotomy into a contiguous buffer) and rare insertion (typically tied to user interactions aka max once a frame)
// You can use it as custom user storage for temporary values. Declare your own storage if, for example:
// - You want to manipulate the open/close state of a particular sub-tree in your interface (tree node uses Int 0/1 to store their state).
// - You want to store custom debug data easily without adding or editing structures in your code (probably not efficient, but convenient)
// Types are NOT stored, so it is up to you to make sure your Key don't collide with different types.
typedef struct ImGuiStorage_t
{
    ImVector_ImGuiStorage_ImGuiStoragePair Data;
} ImGuiStorage;
// - Get***() functions find pair, never add/allocate. Pairs are sorted so a query is O(log N)
// - Set***() functions find pair, insertion on demand if missing.
// - Sorted insertion is costly, paid once. A typical frame shouldn't need to insert any new pair.
CIMGUI_API void   ImGuiStorage_Clear(ImGuiStorage* self);
CIMGUI_API int    ImGuiStorage_GetInt(const ImGuiStorage* self, ImGuiID key, int default_val /* = 0 */);
CIMGUI_API void   ImGuiStorage_SetInt(ImGuiStorage* self, ImGuiID key, int val);
CIMGUI_API bool   ImGuiStorage_GetBool(const ImGuiStorage* self, ImGuiID key, bool default_val /* = false */);
CIMGUI_API void   ImGuiStorage_SetBool(ImGuiStorage* self, ImGuiID key, bool val);
CIMGUI_API float  ImGuiStorage_GetFloat(const ImGuiStorage* self, ImGuiID key, float default_val /* = 0.0f */);
CIMGUI_API void   ImGuiStorage_SetFloat(ImGuiStorage* self, ImGuiID key, float val);
CIMGUI_API void*  ImGuiStorage_GetVoidPtr(const ImGuiStorage* self, ImGuiID key);                               // default_val is NULL
CIMGUI_API void   ImGuiStorage_SetVoidPtr(ImGuiStorage* self, ImGuiID key, void* val);
// - Get***Ref() functions finds pair, insert on demand if missing, return pointer. Useful if you intend to do Get+Set.
// - References are only valid until a new value is added to the storage. Calling a Set***() function or a Get***Ref() function invalidates the pointer.
// - A typical use case where this is convenient for quick hacking (e.g. add storage during a live Edit&Continue session if you can't modify existing struct)
//      float* pvar = ImGui::GetFloatRef(key); ImGui::SliderFloat("var", pvar, 0, 100.0f); some_var += *pvar;
CIMGUI_API int*   ImGuiStorage_GetIntRef(ImGuiStorage* self, ImGuiID key, int default_val /* = 0 */);
CIMGUI_API bool*  ImGuiStorage_GetBoolRef(ImGuiStorage* self, ImGuiID key, bool default_val /* = false */);
CIMGUI_API float* ImGuiStorage_GetFloatRef(ImGuiStorage* self, ImGuiID key, float default_val /* = 0.0f */);
CIMGUI_API void** ImGuiStorage_GetVoidPtrRef(ImGuiStorage* self, ImGuiID key, void* default_val /* = NULL */);
// Use on your own storage if you know only integer are being stored (open/close all tree nodes)
CIMGUI_API void   ImGuiStorage_SetAllInt(ImGuiStorage* self, int val);
// For quicker full rebuild of a storage (instead of an incremental one), you may add all your contents and then sort once.
CIMGUI_API void   ImGuiStorage_BuildSortByKey(ImGuiStorage* self);

// Helper: Manually clip large list of items.
// If you have lots evenly spaced items and you have random access to the list, you can perform coarse
// clipping based on visibility to only submit items that are in view.
// The clipper calculates the range of visible items and advance the cursor to compensate for the non-visible items we have skipped.
// (Dear ImGui already clip items based on their bounds but: it needs to first layout the item to do so, and generally
//  fetching/submitting your own data incurs additional cost. Coarse clipping using ImGuiListClipper allows you to easily
//  scale using lists with tens of thousands of items without a problem)
// Usage:
//   ImGuiListClipper clipper;
//   clipper.Begin(1000);         // We have 1000 elements, evenly spaced.
//   while (clipper.Step())
//       for (int i = clipper.DisplayStart; i < clipper.DisplayEnd; i++)
//           ImGui::Text("line number %d", i);
// Generally what happens is:
// - Clipper lets you process the first element (DisplayStart = 0, DisplayEnd = 1) regardless of it being visible or not.
// - User code submit that one element.
// - Clipper can measure the height of the first element
// - Clipper calculate the actual range of elements to display based on the current clipping rectangle, position the cursor before the first visible element.
// - User code submit visible elements.
// - The clipper also handles various subtleties related to keyboard/gamepad navigation, wrapping etc.
typedef struct ImGuiListClipper_t
{
    int   DisplayStart;  // First item to display, updated by each call to Step()
    int   DisplayEnd;    // End of items to display (exclusive)
    int   ItemsCount;    // [Internal] Number of items
    float ItemsHeight;   // [Internal] Height of item after a first step and item submission can calculate it
    float StartPosY;     // [Internal] Cursor position at the time of Begin() or after table frozen rows are all processed
    void* TempData;      // [Internal] Internal data
} ImGuiListClipper;
CIMGUI_API void ImGuiListClipper_Begin(ImGuiListClipper* self, int items_count, float items_height /* = -1.0f */);
CIMGUI_API void ImGuiListClipper_End(ImGuiListClipper* self);                                                     // Automatically called on the last call of Step() that returns false.
CIMGUI_API bool ImGuiListClipper_Step(ImGuiListClipper* self);                                                    // Call until it returns false. The DisplayStart/DisplayEnd fields will be set and you can process/draw those items.
// Call ForceDisplayRangeByIndices() before first call to Step() if you need a range of items to be displayed regardless of visibility.
CIMGUI_API void ImGuiListClipper_ForceDisplayRangeByIndices(ImGuiListClipper* self, int item_min, int item_max);  // item_max is exclusive e.g. use (42, 42+1) to make item 42 always visible BUT due to alignment/padding of certain items it is likely that an extra item may be included on either end of the display range.

// Helpers macros to generate 32-bit encoded colors
// User can declare their own format by #defining the 5 _SHIFT/_MASK macros in their imconfig file.
#ifndef IM_COL32_R_SHIFT
#ifdef IMGUI_USE_BGRA_PACKED_COLOR
#define IM_COL32_R_SHIFT    16
#define IM_COL32_G_SHIFT    8
#define IM_COL32_B_SHIFT    0
#define IM_COL32_A_SHIFT    24
#define IM_COL32_A_MASK     0xFF000000
#else
#define IM_COL32_R_SHIFT    0
#define IM_COL32_G_SHIFT    8
#define IM_COL32_B_SHIFT    16
#define IM_COL32_A_SHIFT    24
#define IM_COL32_A_MASK     0xFF000000
#endif // #ifdef IMGUI_USE_BGRA_PACKED_COLOR
#endif // #ifndef IM_COL32_R_SHIFT
#define IM_COL32(R,G,B,A)    (((ImU32)(A)<<IM_COL32_A_SHIFT) | ((ImU32)(B)<<IM_COL32_B_SHIFT) | ((ImU32)(G)<<IM_COL32_G_SHIFT) | ((ImU32)(R)<<IM_COL32_R_SHIFT))
#define IM_COL32_WHITE       IM_COL32(255,255,255,255)   // Opaque white = 0xFFFFFFFF
#define IM_COL32_BLACK       IM_COL32(0,0,0,255)         // Opaque black
#define IM_COL32_BLACK_TRANS IM_COL32(0,0,0,0)           // Transparent black = 0x00000000

// Helper: ImColor() implicitly converts colors to either ImU32 (packed 4x1 byte) or ImVec4 (4x1 float)
// Prefer using IM_COL32() macros if you want a guaranteed compile-time ImU32 for usage with ImDrawList API.
// **Avoid storing ImColor! Store either u32 of ImVec4. This is not a full-featured color class. MAY OBSOLETE.
// **None of the ImGui API are using ImColor directly but you can use it as a convenience to pass colors in either ImU32 or ImVec4 formats. Explicitly cast to ImU32 or ImVec4 if needed.
typedef struct ImColor_t
{
    ImVec4 Value;
} ImColor;
// FIXME-OBSOLETE: May need to obsolete/cleanup those helpers.
CIMGUI_API void    ImColor_SetHSV(ImColor* self, float h, float s, float v, float a /* = 1.0f */);
CIMGUI_API ImColor ImColor_HSV(ImColor* self, float h, float s, float v, float a /* = 1.0f */);

//-----------------------------------------------------------------------------
// [SECTION] Drawing API (ImDrawCmd, ImDrawIdx, ImDrawVert, ImDrawChannel, ImDrawListSplitter, ImDrawListFlags, ImDrawList, ImDrawData)
// Hold a series of drawing commands. The user provides a renderer for ImDrawData which essentially contains an array of ImDrawList.
//-----------------------------------------------------------------------------

// The maximum line width to bake anti-aliased textures for. Build atlas with ImFontAtlasFlags_NoBakedLines to disable baking.
#ifndef IM_DRAWLIST_TEX_LINES_WIDTH_MAX
#define IM_DRAWLIST_TEX_LINES_WIDTH_MAX     (63)
#endif // #ifndef IM_DRAWLIST_TEX_LINES_WIDTH_MAX
// ImDrawCallback: Draw callbacks for advanced uses [configurable type: override in imconfig.h]
// NB: You most likely do NOT need to use draw callbacks just to create your own widget or customized UI rendering,
// you can poke into the draw list for that! Draw callback may be useful for example to:
//  A) Change your GPU render state,
//  B) render a complex 3D scene inside a UI element without an intermediate texture/render target, etc.
// The expected behavior from your rendering function is 'if (cmd.UserCallback != NULL) { cmd.UserCallback(parent_list, cmd); } else { RenderTriangles() }'
// If you want to override the signature of ImDrawCallback, you can simply use e.g. '#define ImDrawCallback MyDrawCallback' (in imconfig.h) + update rendering backend accordingly.
#ifndef ImDrawCallback
typedef void (*ImDrawCallback)(const ImDrawList* parent_list, const ImDrawCmd* cmd);
#endif // #ifndef ImDrawCallback
// Special Draw callback value to request renderer backend to reset the graphics/render state.
// The renderer backend needs to handle this special value, otherwise it will crash trying to call a function at this address.
// This is useful for example if you submitted callbacks which you know have altered the render state and you want it to be restored.
// It is not done by default because they are many perfectly useful way of altering render state for imgui contents (e.g. changing shader/blending settings before an Image call).
#define ImDrawCallback_ResetRenderState     (ImDrawCallback)(-1)

// Typically, 1 command = 1 GPU draw call (unless command is a callback)
// - VtxOffset: When 'io.BackendFlags & ImGuiBackendFlags_RendererHasVtxOffset' is enabled,
//   this fields allow us to render meshes larger than 64K vertices while keeping 16-bit indices.
//   Backends made for <1.71. will typically ignore the VtxOffset fields.
// - The ClipRect/TextureId/VtxOffset fields must be contiguous as we memcmp() them together (this is asserted for).
typedef struct ImDrawCmd_t
{
    ImVec4         ClipRect;          // 4*4  // Clipping rectangle (x1, y1, x2, y2). Subtract ImDrawData->DisplayPos to get clipping rectangle in "viewport" coordinates
    ImTextureID    TextureId;         // 4-8  // User-provided texture ID. Set by user in ImfontAtlas::SetTexID() for fonts or passed to Image*() functions. Ignore if never using images or multiple fonts atlas.
    unsigned int   VtxOffset;         // 4    // Start offset in vertex buffer. ImGuiBackendFlags_RendererHasVtxOffset: always 0, otherwise may be >0 to support meshes larger than 64K vertices with 16-bit indices.
    unsigned int   IdxOffset;         // 4    // Start offset in index buffer.
    unsigned int   ElemCount;         // 4    // Number of indices (multiple of 3) to be rendered as triangles. Vertices are stored in the callee ImDrawList's vtx_buffer[] array, indices in idx_buffer[].
    ImDrawCallback UserCallback;      // 4-8  // If != NULL, call the function instead of rendering the vertices. clip_rect and texture_id will be set normally.
    void*          UserCallbackData;  // 4-8  // The draw callback code can access this.
} ImDrawCmd;
// Since 1.83: returns ImTextureID associated with this draw call. Warning: DO NOT assume this is always same as 'TextureId' (we will change this function for an upcoming feature)
CIMGUI_API ImTextureID ImDrawCmd_GetTexID(const ImDrawCmd* self);

// Vertex layout
#ifndef IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT
typedef struct ImDrawVert_t
{
    ImVec2 pos;
    ImVec2 uv;
    ImU32  col;
} ImDrawVert;
#else
// You can override the vertex format layout by defining IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT in imconfig.h
// The code expect ImVec2 pos (8 bytes), ImVec2 uv (8 bytes), ImU32 col (4 bytes), but you can re-order them or add other fields as needed to simplify integration in your engine.
// The type has to be described within the macro (you can either declare the struct or use a typedef). This is because ImVec2/ImU32 are likely not declared at the time you'd want to set your type up.
// NOTE: IMGUI DOESN'T CLEAR THE STRUCTURE AND DOESN'T CALL A CONSTRUCTOR SO ANY CUSTOM FIELD WILL BE UNINITIALIZED. IF YOU ADD EXTRA FIELDS (SUCH AS A 'Z' COORDINATES) YOU WILL NEED TO CLEAR THEM DURING RENDER OR TO IGNORE THEM.
IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT
#endif // #ifndef IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT
// [Internal] For use by ImDrawList
typedef struct ImDrawCmdHeader_t
{
    ImVec4       ClipRect;
    ImTextureID  TextureId;
    unsigned int VtxOffset;
} ImDrawCmdHeader;

// [Internal] For use by ImDrawListSplitter
typedef struct ImDrawChannel_t
{
    ImVector_ImDrawCmd _CmdBuffer;
    ImVector_ImDrawIdx _IdxBuffer;
} ImDrawChannel;

// Split/Merge functions are used to split the draw list into different layers which can be drawn into out of order.
// This is used by the Columns/Tables API, so items of each column can be batched together in a same draw call.
typedef struct ImDrawListSplitter_t
{
    int                    _Current;   // Current channel number (0)
    int                    _Count;     // Number of active channels (1+)
    ImVector_ImDrawChannel _Channels;  // Draw channels (not resized down so _Count might be < Channels.Size)
} ImDrawListSplitter;
CIMGUI_API void ImDrawListSplitter_Clear(ImDrawListSplitter* self);                                                      // Do not clear Channels[] so our allocations are reused next frame
CIMGUI_API void ImDrawListSplitter_ClearFreeMemory(ImDrawListSplitter* self);
CIMGUI_API void ImDrawListSplitter_Split(ImDrawListSplitter* self, ImDrawList* draw_list, int count);
CIMGUI_API void ImDrawListSplitter_Merge(ImDrawListSplitter* self, ImDrawList* draw_list);
CIMGUI_API void ImDrawListSplitter_SetCurrentChannel(ImDrawListSplitter* self, ImDrawList* draw_list, int channel_idx);

// Flags for ImDrawList functions
// (Legacy: bit 0 must always correspond to ImDrawFlags_Closed to be backward compatible with old API using a bool. Bits 1..3 must be unused)
typedef enum
{
    ImDrawFlags_None                    = 0,
    ImDrawFlags_Closed                  = 1<<0,                         // PathStroke(), AddPolyline(): specify that shape should be closed (Important: this is always == 1 for legacy reason)
    ImDrawFlags_RoundCornersTopLeft     = 1<<4,                         // AddRect(), AddRectFilled(), PathRect(): enable rounding top-left corner only (when rounding > 0.0f, we default to all corners). Was 0x01.
    ImDrawFlags_RoundCornersTopRight    = 1<<5,                         // AddRect(), AddRectFilled(), PathRect(): enable rounding top-right corner only (when rounding > 0.0f, we default to all corners). Was 0x02.
    ImDrawFlags_RoundCornersBottomLeft  = 1<<6,                         // AddRect(), AddRectFilled(), PathRect(): enable rounding bottom-left corner only (when rounding > 0.0f, we default to all corners). Was 0x04.
    ImDrawFlags_RoundCornersBottomRight = 1<<7,                         // AddRect(), AddRectFilled(), PathRect(): enable rounding bottom-right corner only (when rounding > 0.0f, we default to all corners). Wax 0x08.
    ImDrawFlags_RoundCornersNone        = 1<<8,                         // AddRect(), AddRectFilled(), PathRect(): disable rounding on all corners (when rounding > 0.0f). This is NOT zero, NOT an implicit flag!
    ImDrawFlags_RoundCornersTop         = ImDrawFlags_RoundCornersTopLeft | ImDrawFlags_RoundCornersTopRight,
    ImDrawFlags_RoundCornersBottom      = ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_RoundCornersBottomRight,
    ImDrawFlags_RoundCornersLeft        = ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_RoundCornersTopLeft,
    ImDrawFlags_RoundCornersRight       = ImDrawFlags_RoundCornersBottomRight | ImDrawFlags_RoundCornersTopRight,
    ImDrawFlags_RoundCornersAll         = ImDrawFlags_RoundCornersTopLeft | ImDrawFlags_RoundCornersTopRight | ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_RoundCornersBottomRight,
    ImDrawFlags_RoundCornersDefault_    = ImDrawFlags_RoundCornersAll,  // Default to ALL corners if none of the _RoundCornersXX flags are specified.
    ImDrawFlags_RoundCornersMask_       = ImDrawFlags_RoundCornersAll | ImDrawFlags_RoundCornersNone,
} ImDrawFlags_;

// Flags for ImDrawList instance. Those are set automatically by ImGui:: functions from ImGuiIO settings, and generally not manipulated directly.
// It is however possible to temporarily alter flags between calls to ImDrawList:: functions.
typedef enum
{
    ImDrawListFlags_None                   = 0,
    ImDrawListFlags_AntiAliasedLines       = 1<<0,  // Enable anti-aliased lines/borders (*2 the number of triangles for 1.0f wide line or lines thin enough to be drawn using textures, otherwise *3 the number of triangles)
    ImDrawListFlags_AntiAliasedLinesUseTex = 1<<1,  // Enable anti-aliased lines/borders using textures when possible. Require backend to render with bilinear filtering (NOT point/nearest filtering).
    ImDrawListFlags_AntiAliasedFill        = 1<<2,  // Enable anti-aliased edge around filled shapes (rounded rectangles, circles).
    ImDrawListFlags_AllowVtxOffset         = 1<<3,  // Can emit 'VtxOffset > 0' to allow large meshes. Set when 'ImGuiBackendFlags_RendererHasVtxOffset' is enabled.
} ImDrawListFlags_;

// Draw command list
// This is the low-level list of polygons that ImGui:: functions are filling. At the end of the frame,
// all command lists are passed to your ImGuiIO::RenderDrawListFn function for rendering.
// Each dear imgui window contains its own ImDrawList. You can use ImGui::GetWindowDrawList() to
// access the current window draw list and draw custom primitives.
// You can interleave normal ImGui:: calls and adding primitives to the current draw list.
// In single viewport mode, top-left is == GetMainViewport()->Pos (generally 0,0), bottom-right is == GetMainViewport()->Pos+Size (generally io.DisplaySize).
// You are totally free to apply whatever transformation matrix to want to the data (depending on the use of the transformation you may want to apply it to ClipRect as well!)
// Important: Primitives are always added to the list and not culled (culling is done at higher-level by ImGui:: functions), if you use this API a lot consider coarse culling your drawn objects.
typedef struct ImDrawList_t
{
    // This is what you have to render
    ImVector_ImDrawCmd    CmdBuffer;        // Draw commands. Typically 1 command = 1 GPU draw call, unless the command is a callback.
    ImVector_ImDrawIdx    IdxBuffer;        // Index buffer. Each command consume ImDrawCmd::ElemCount of those
    ImVector_ImDrawVert   VtxBuffer;        // Vertex buffer.
    ImDrawListFlags       Flags;            // Flags, you may poke into these to adjust anti-aliasing settings per-primitive.

    // [Internal, used while building lists]
    unsigned int          _VtxCurrentIdx;   // [Internal] generally == VtxBuffer.Size unless we are past 64K vertices, in which case this gets reset to 0.
    ImDrawListSharedData* _Data;            // Pointer to shared draw data (you can use ImGui::GetDrawListSharedData() to get the one from current ImGui context)
    const char*           _OwnerName;       // Pointer to owner window's name for debugging
    ImDrawVert*           _VtxWritePtr;     // [Internal] point within VtxBuffer.Data after each add command (to avoid using the ImVector<> operators too much)
    ImDrawIdx*            _IdxWritePtr;     // [Internal] point within IdxBuffer.Data after each add command (to avoid using the ImVector<> operators too much)
    ImVector_ImVec4       _ClipRectStack;   // [Internal]
    ImVector_ImTextureID  _TextureIdStack;  // [Internal]
    ImVector_ImVec2       _Path;            // [Internal] current path building
    ImDrawCmdHeader       _CmdHeader;       // [Internal] template of active commands. Fields should match those of CmdBuffer.back().
    ImDrawListSplitter    _Splitter;        // [Internal] for channels api (note: prefer using your own persistent instance of ImDrawListSplitter!)
    float                 _FringeScale;     // [Internal] anti-alias fringe is scaled by this value, this helps to keep things sharp while zooming at vertex buffer content
} ImDrawList;
CIMGUI_API void        ImDrawList_PushClipRect(ImDrawList* self, ImVec2 clip_rect_min, ImVec2 clip_rect_max, bool intersect_with_current_clip_rect /* = false */); // Render-level scissoring. This is passed down to your render function but not used for CPU-side coarse clipping. Prefer using higher-level ImGui::PushClipRect() to affect logic (hit-testing and widget culling)
CIMGUI_API void        ImDrawList_PushClipRectFullScreen(ImDrawList* self);
CIMGUI_API void        ImDrawList_PopClipRect(ImDrawList* self);
CIMGUI_API void        ImDrawList_PushTextureID(ImDrawList* self, ImTextureID texture_id);
CIMGUI_API void        ImDrawList_PopTextureID(ImDrawList* self);
CIMGUI_API ImVec2      ImDrawList_GetClipRectMin(const ImDrawList* self);
CIMGUI_API ImVec2      ImDrawList_GetClipRectMax(const ImDrawList* self);
// Primitives
// - Filled shapes must always use clockwise winding order. The anti-aliasing fringe depends on it. Counter-clockwise shapes will have "inward" anti-aliasing.
// - For rectangular primitives, "p_min" and "p_max" represent the upper-left and lower-right corners.
// - For circle primitives, use "num_segments == 0" to automatically calculate tessellation (preferred).
//   In older versions (until Dear ImGui 1.77) the AddCircle functions defaulted to num_segments == 12.
//   In future versions we will use textures to provide cheaper and higher-quality circles.
//   Use AddNgon() and AddNgonFilled() functions if you need to guarantee a specific number of sides.
CIMGUI_API void        ImDrawList_AddLine(ImDrawList* self, ImVec2 p1, ImVec2 p2, ImU32 col);                                                              // Implied thickness = 1.0f
CIMGUI_API void        ImDrawList_AddLineEx(ImDrawList* self, ImVec2 p1, ImVec2 p2, ImU32 col, float thickness /* = 1.0f */);
CIMGUI_API void        ImDrawList_AddRect(ImDrawList* self, ImVec2 p_min, ImVec2 p_max, ImU32 col);                                                        // Implied rounding = 0.0f, flags = 0, thickness = 1.0f
CIMGUI_API void        ImDrawList_AddRectEx(ImDrawList* self, ImVec2 p_min, ImVec2 p_max, ImU32 col, float rounding /* = 0.0f */, ImDrawFlags flags /* = 0 */, float thickness /* = 1.0f */); // a: upper-left, b: lower-right (== upper-left + size)
CIMGUI_API void        ImDrawList_AddRectFilled(ImDrawList* self, ImVec2 p_min, ImVec2 p_max, ImU32 col);                                                  // Implied rounding = 0.0f, flags = 0
CIMGUI_API void        ImDrawList_AddRectFilledEx(ImDrawList* self, ImVec2 p_min, ImVec2 p_max, ImU32 col, float rounding /* = 0.0f */, ImDrawFlags flags /* = 0 */); // a: upper-left, b: lower-right (== upper-left + size)
CIMGUI_API void        ImDrawList_AddRectFilledMultiColor(ImDrawList* self, ImVec2 p_min, ImVec2 p_max, ImU32 col_upr_left, ImU32 col_upr_right, ImU32 col_bot_right, ImU32 col_bot_left);
CIMGUI_API void        ImDrawList_AddQuad(ImDrawList* self, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, ImU32 col);                                        // Implied thickness = 1.0f
CIMGUI_API void        ImDrawList_AddQuadEx(ImDrawList* self, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, ImU32 col, float thickness /* = 1.0f */);
CIMGUI_API void        ImDrawList_AddQuadFilled(ImDrawList* self, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, ImU32 col);
CIMGUI_API void        ImDrawList_AddTriangle(ImDrawList* self, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImU32 col);                                               // Implied thickness = 1.0f
CIMGUI_API void        ImDrawList_AddTriangleEx(ImDrawList* self, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImU32 col, float thickness /* = 1.0f */);
CIMGUI_API void        ImDrawList_AddTriangleFilled(ImDrawList* self, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImU32 col);
CIMGUI_API void        ImDrawList_AddCircle(ImDrawList* self, ImVec2 center, float radius, ImU32 col);                                                     // Implied num_segments = 0, thickness = 1.0f
CIMGUI_API void        ImDrawList_AddCircleEx(ImDrawList* self, ImVec2 center, float radius, ImU32 col, int num_segments /* = 0 */, float thickness /* = 1.0f */);
CIMGUI_API void        ImDrawList_AddCircleFilled(ImDrawList* self, ImVec2 center, float radius, ImU32 col, int num_segments /* = 0 */);
CIMGUI_API void        ImDrawList_AddNgon(ImDrawList* self, ImVec2 center, float radius, ImU32 col, int num_segments);                                     // Implied thickness = 1.0f
CIMGUI_API void        ImDrawList_AddNgonEx(ImDrawList* self, ImVec2 center, float radius, ImU32 col, int num_segments, float thickness /* = 1.0f */);
CIMGUI_API void        ImDrawList_AddNgonFilled(ImDrawList* self, ImVec2 center, float radius, ImU32 col, int num_segments);
CIMGUI_API void        ImDrawList_AddText(ImDrawList* self, ImVec2 pos, ImU32 col, const char* text_begin);                                                // Implied text_end = NULL
CIMGUI_API void        ImDrawList_AddTextEx(ImDrawList* self, ImVec2 pos, ImU32 col, const char* text_begin, const char* text_end /* = NULL */);
CIMGUI_API void        ImDrawList_AddTextImFontPtr(ImDrawList* self, const ImFont* font, float font_size, ImVec2 pos, ImU32 col, const char* text_begin);  // Implied text_end = NULL, wrap_width = 0.0f, cpu_fine_clip_rect = NULL
CIMGUI_API void        ImDrawList_AddTextImFontPtrEx(ImDrawList* self, const ImFont* font, float font_size, ImVec2 pos, ImU32 col, const char* text_begin, const char* text_end /* = NULL */, float wrap_width /* = 0.0f */, const ImVec4* cpu_fine_clip_rect /* = NULL */);
CIMGUI_API void        ImDrawList_AddPolyline(ImDrawList* self, const ImVec2* points, int num_points, ImU32 col, ImDrawFlags flags, float thickness);
CIMGUI_API void        ImDrawList_AddConvexPolyFilled(ImDrawList* self, const ImVec2* points, int num_points, ImU32 col);
CIMGUI_API void        ImDrawList_AddBezierCubic(ImDrawList* self, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, ImU32 col, float thickness, int num_segments /* = 0 */); // Cubic Bezier (4 control points)
CIMGUI_API void        ImDrawList_AddBezierQuadratic(ImDrawList* self, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImU32 col, float thickness, int num_segments /* = 0 */); // Quadratic Bezier (3 control points)
// Image primitives
// - Read FAQ to understand what ImTextureID is.
// - "p_min" and "p_max" represent the upper-left and lower-right corners of the rectangle.
// - "uv_min" and "uv_max" represent the normalized texture coordinates to use for those corners. Using (0,0)->(1,1) texture coordinates will generally display the entire texture.
CIMGUI_API void        ImDrawList_AddImage(ImDrawList* self, ImTextureID user_texture_id, ImVec2 p_min, ImVec2 p_max);                                     // Implied uv_min = ImVec2(0, 0), uv_max = ImVec2(1, 1), col = IM_COL32_WHITE
CIMGUI_API void        ImDrawList_AddImageEx(ImDrawList* self, ImTextureID user_texture_id, ImVec2 p_min, ImVec2 p_max, ImVec2 uv_min /* = ImVec2(0, 0) */, ImVec2 uv_max /* = ImVec2(1, 1) */, ImU32 col /* = IM_COL32_WHITE */);
CIMGUI_API void        ImDrawList_AddImageQuad(ImDrawList* self, ImTextureID user_texture_id, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4);                 // Implied uv1 = ImVec2(0, 0), uv2 = ImVec2(1, 0), uv3 = ImVec2(1, 1), uv4 = ImVec2(0, 1), col = IM_COL32_WHITE
CIMGUI_API void        ImDrawList_AddImageQuadEx(ImDrawList* self, ImTextureID user_texture_id, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, ImVec2 uv1 /* = ImVec2(0, 0) */, ImVec2 uv2 /* = ImVec2(1, 0) */, ImVec2 uv3 /* = ImVec2(1, 1) */, ImVec2 uv4 /* = ImVec2(0, 1) */, ImU32 col /* = IM_COL32_WHITE */);
CIMGUI_API void        ImDrawList_AddImageRounded(ImDrawList* self, ImTextureID user_texture_id, ImVec2 p_min, ImVec2 p_max, ImVec2 uv_min, ImVec2 uv_max, ImU32 col, float rounding, ImDrawFlags flags /* = 0 */);
// Stateful path API, add points then finish with PathFillConvex() or PathStroke()
// - Filled shapes must always use clockwise winding order. The anti-aliasing fringe depends on it. Counter-clockwise shapes will have "inward" anti-aliasing.
CIMGUI_API void        ImDrawList_PathClear(ImDrawList* self);
CIMGUI_API void        ImDrawList_PathLineTo(ImDrawList* self, ImVec2 pos);
CIMGUI_API void        ImDrawList_PathLineToMergeDuplicate(ImDrawList* self, ImVec2 pos);
CIMGUI_API void        ImDrawList_PathFillConvex(ImDrawList* self, ImU32 col);
CIMGUI_API void        ImDrawList_PathStroke(ImDrawList* self, ImU32 col, ImDrawFlags flags /* = 0 */, float thickness /* = 1.0f */);
CIMGUI_API void        ImDrawList_PathArcTo(ImDrawList* self, ImVec2 center, float radius, float a_min, float a_max, int num_segments /* = 0 */);
CIMGUI_API void        ImDrawList_PathArcToFast(ImDrawList* self, ImVec2 center, float radius, int a_min_of_12, int a_max_of_12);                          // Use precomputed angles for a 12 steps circle
CIMGUI_API void        ImDrawList_PathBezierCubicCurveTo(ImDrawList* self, ImVec2 p2, ImVec2 p3, ImVec2 p4, int num_segments /* = 0 */);                   // Cubic Bezier (4 control points)
CIMGUI_API void        ImDrawList_PathBezierQuadraticCurveTo(ImDrawList* self, ImVec2 p2, ImVec2 p3, int num_segments /* = 0 */);                          // Quadratic Bezier (3 control points)
CIMGUI_API void        ImDrawList_PathRect(ImDrawList* self, ImVec2 rect_min, ImVec2 rect_max, float rounding /* = 0.0f */, ImDrawFlags flags /* = 0 */);
// Advanced
CIMGUI_API void        ImDrawList_AddCallback(ImDrawList* self, ImDrawCallback callback, void* callback_data);                                             // Your rendering function must check for 'UserCallback' in ImDrawCmd and call the function instead of rendering triangles.
CIMGUI_API void        ImDrawList_AddDrawCmd(ImDrawList* self);                                                                                            // This is useful if you need to forcefully create a new draw call (to allow for dependent rendering / blending). Otherwise primitives are merged into the same draw-call as much as possible
CIMGUI_API ImDrawList* ImDrawList_CloneOutput(const ImDrawList* self);                                                                                     // Create a clone of the CmdBuffer/IdxBuffer/VtxBuffer.
// Advanced: Channels
// - Use to split render into layers. By switching channels to can render out-of-order (e.g. submit FG primitives before BG primitives)
// - Use to minimize draw calls (e.g. if going back-and-forth between multiple clipping rectangles, prefer to append into separate channels then merge at the end)
// - FIXME-OBSOLETE: This API shouldn't have been in ImDrawList in the first place!
//   Prefer using your own persistent instance of ImDrawListSplitter as you can stack them.
//   Using the ImDrawList::ChannelsXXXX you cannot stack a split over another.
CIMGUI_API void        ImDrawList_ChannelsSplit(ImDrawList* self, int count);
CIMGUI_API void        ImDrawList_ChannelsMerge(ImDrawList* self);
CIMGUI_API void        ImDrawList_ChannelsSetCurrent(ImDrawList* self, int n);
// Advanced: Primitives allocations
// - We render triangles (three vertices)
// - All primitives needs to be reserved via PrimReserve() beforehand.
CIMGUI_API void        ImDrawList_PrimReserve(ImDrawList* self, int idx_count, int vtx_count);
CIMGUI_API void        ImDrawList_PrimUnreserve(ImDrawList* self, int idx_count, int vtx_count);
CIMGUI_API void        ImDrawList_PrimRect(ImDrawList* self, ImVec2 a, ImVec2 b, ImU32 col);                                                               // Axis aligned rectangle (composed of two triangles)
CIMGUI_API void        ImDrawList_PrimRectUV(ImDrawList* self, ImVec2 a, ImVec2 b, ImVec2 uv_a, ImVec2 uv_b, ImU32 col);
CIMGUI_API void        ImDrawList_PrimQuadUV(ImDrawList* self, ImVec2 a, ImVec2 b, ImVec2 c, ImVec2 d, ImVec2 uv_a, ImVec2 uv_b, ImVec2 uv_c, ImVec2 uv_d, ImU32 col);
CIMGUI_API void        ImDrawList_PrimWriteVtx(ImDrawList* self, ImVec2 pos, ImVec2 uv, ImU32 col);
CIMGUI_API void        ImDrawList_PrimWriteIdx(ImDrawList* self, ImDrawIdx idx);
CIMGUI_API void        ImDrawList_PrimVtx(ImDrawList* self, ImVec2 pos, ImVec2 uv, ImU32 col);                                                             // Write vertex with unique index
#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
CIMGUI_API void ImDrawList_AddBezierCurve(ImDrawList* self, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, ImU32 col, float thickness, int num_segments /* = 0 */);  // OBSOLETED in 1.80 (Jan 2021)
CIMGUI_API void ImDrawList_PathBezierCurveTo(ImDrawList* self, ImVec2 p2, ImVec2 p3, ImVec2 p4, int num_segments /* = 0 */);                                      // OBSOLETED in 1.80 (Jan 2021)
#endif // #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
// [Internal helpers]
CIMGUI_API void        ImDrawList__ResetForNewFrame(ImDrawList* self);
CIMGUI_API void        ImDrawList__ClearFreeMemory(ImDrawList* self);
CIMGUI_API void        ImDrawList__PopUnusedDrawCmd(ImDrawList* self);
CIMGUI_API void        ImDrawList__TryMergeDrawCmds(ImDrawList* self);
CIMGUI_API void        ImDrawList__OnChangedClipRect(ImDrawList* self);
CIMGUI_API void        ImDrawList__OnChangedTextureID(ImDrawList* self);
CIMGUI_API void        ImDrawList__OnChangedVtxOffset(ImDrawList* self);
CIMGUI_API int         ImDrawList__CalcCircleAutoSegmentCount(const ImDrawList* self, float radius);
CIMGUI_API void        ImDrawList__PathArcToFastEx(ImDrawList* self, ImVec2 center, float radius, int a_min_sample, int a_max_sample, int a_step);
CIMGUI_API void        ImDrawList__PathArcToN(ImDrawList* self, ImVec2 center, float radius, float a_min, float a_max, int num_segments);

// All draw data to render a Dear ImGui frame
// (NB: the style and the naming convention here is a little inconsistent, we currently preserve them for backward compatibility purpose,
// as this is one of the oldest structure exposed by the library! Basically, ImDrawList == CmdList)
typedef struct ImDrawData_t
{
    bool         Valid;             // Only valid after Render() is called and before the next NewFrame() is called.
    int          CmdListsCount;     // Number of ImDrawList* to render
    int          TotalIdxCount;     // For convenience, sum of all ImDrawList's IdxBuffer.Size
    int          TotalVtxCount;     // For convenience, sum of all ImDrawList's VtxBuffer.Size
    ImDrawList** CmdLists;          // Array of ImDrawList* to render. The ImDrawList are owned by ImGuiContext and only pointed to from here.
    ImVec2       DisplayPos;        // Top-left position of the viewport to render (== top-left of the orthogonal projection matrix to use) (== GetMainViewport()->Pos for the main viewport, == (0.0) in most single-viewport applications)
    ImVec2       DisplaySize;       // Size of the viewport to render (== GetMainViewport()->Size for the main viewport, == io.DisplaySize in most single-viewport applications)
    ImVec2       FramebufferScale;  // Amount of pixels for each unit of DisplaySize. Based on io.DisplayFramebufferScale. Generally (1,1) on normal display, (2,2) on OSX with Retina display.
} ImDrawData;
CIMGUI_API void ImDrawData_Clear(ImDrawData* self);                            // The ImDrawList are owned by ImGuiContext!
CIMGUI_API void ImDrawData_DeIndexAllBuffers(ImDrawData* self);                // Helper to convert all buffers from indexed to non-indexed, in case you cannot render indexed. Note: this is slow and most likely a waste of resources. Always prefer indexed rendering!
CIMGUI_API void ImDrawData_ScaleClipRects(ImDrawData* self, ImVec2 fb_scale);  // Helper to scale the ClipRect field of each ImDrawCmd. Use if your final output buffer is at a different scale than Dear ImGui expects, or if there is a difference between your window resolution and framebuffer resolution.

//-----------------------------------------------------------------------------
// [SECTION] Font API (ImFontConfig, ImFontGlyph, ImFontAtlasFlags, ImFontAtlas, ImFontGlyphRangesBuilder, ImFont)
//-----------------------------------------------------------------------------

typedef struct ImFontConfig_t
{
    void*          FontData;              //          // TTF/OTF data
    int            FontDataSize;          //          // TTF/OTF data size
    bool           FontDataOwnedByAtlas;  // true     // TTF/OTF data ownership taken by the container ImFontAtlas (will delete memory itself).
    int            FontNo;                // 0        // Index of font within TTF/OTF file
    float          SizePixels;            //          // Size in pixels for rasterizer (more or less maps to the resulting font height).
    int            OversampleH;           // 3        // Rasterize at higher quality for sub-pixel positioning. Note the difference between 2 and 3 is minimal so you can reduce this to 2 to save memory. Read https://github.com/nothings/stb/blob/master/tests/oversample/README.md for details.
    int            OversampleV;           // 1        // Rasterize at higher quality for sub-pixel positioning. This is not really useful as we don't use sub-pixel positions on the Y axis.
    bool           PixelSnapH;            // false    // Align every glyph to pixel boundary. Useful e.g. if you are merging a non-pixel aligned font with the default font. If enabled, you can set OversampleH/V to 1.
    ImVec2         GlyphExtraSpacing;     // 0, 0     // Extra spacing (in pixels) between glyphs. Only X axis is supported for now.
    ImVec2         GlyphOffset;           // 0, 0     // Offset all glyphs from this font input.
    const ImWchar* GlyphRanges;           // NULL     // Pointer to a user-provided list of Unicode range (2 value per range, values are inclusive, zero-terminated list). THE ARRAY DATA NEEDS TO PERSIST AS LONG AS THE FONT IS ALIVE.
    float          GlyphMinAdvanceX;      // 0        // Minimum AdvanceX for glyphs, set Min to align font icons, set both Min/Max to enforce mono-space font
    float          GlyphMaxAdvanceX;      // FLT_MAX  // Maximum AdvanceX for glyphs
    bool           MergeMode;             // false    // Merge into previous ImFont, so you can combine multiple inputs font into one ImFont (e.g. ASCII font + icons + Japanese glyphs). You may want to use GlyphOffset.y when merge font of different heights.
    unsigned int   FontBuilderFlags;      // 0        // Settings for custom font builder. THIS IS BUILDER IMPLEMENTATION DEPENDENT. Leave as zero if unsure.
    float          RasterizerMultiply;    // 1.0f     // Brighten (>1.0f) or darken (<1.0f) font output. Brightening small fonts may be a good workaround to make them more readable.
    ImWchar        EllipsisChar;          // -1       // Explicitly specify unicode codepoint of ellipsis character. When fonts are being merged first specified ellipsis will be used.

    // [Internal]
    char           Name[40];              // Name (strictly to ease debugging)
    ImFont*        DstFont;
} ImFontConfig;

// Hold rendering data for one glyph.
// (Note: some language parsers may fail to convert the 31+1 bitfield members, in this case maybe drop store a single u32 or we can rework this)
typedef struct ImFontGlyph_t
{
    unsigned int Colored : 1;     // Flag to indicate glyph is colored and should generally ignore tinting (make it usable with no shift on little-endian as this is used in loops)
    unsigned int Visible : 1;     // Flag to indicate glyph has no visible pixels (e.g. space). Allow early out when rendering.
    unsigned int Codepoint : 30;  // 0x0000..0x10FFFF
    float        AdvanceX;        // Distance to next character (= data from font + ImFontConfig::GlyphExtraSpacing.x baked in)
    float        X0, Y0, X1, Y1;  // Glyph corners
    float        U0, V0, U1, V1;  // Texture coordinates
} ImFontGlyph;

// Helper to build glyph ranges from text/string data. Feed your application strings/characters to it then call BuildRanges().
// This is essentially a tightly packed of vector of 64k booleans = 8KB storage.
typedef struct ImFontGlyphRangesBuilder_t
{
    ImVector_ImU32 UsedChars;  // Store 1-bit per Unicode code point (0=unused, 1=used)
} ImFontGlyphRangesBuilder;
CIMGUI_API void ImFontGlyphRangesBuilder_Clear(ImFontGlyphRangesBuilder* self);
CIMGUI_API bool ImFontGlyphRangesBuilder_GetBit(const ImFontGlyphRangesBuilder* self, size_t n);                                        // Get bit n in the array
CIMGUI_API void ImFontGlyphRangesBuilder_SetBit(ImFontGlyphRangesBuilder* self, size_t n);                                              // Set bit n in the array
CIMGUI_API void ImFontGlyphRangesBuilder_AddChar(ImFontGlyphRangesBuilder* self, ImWchar c);                                            // Add character
CIMGUI_API void ImFontGlyphRangesBuilder_AddText(ImFontGlyphRangesBuilder* self, const char* text, const char* text_end /* = NULL */);  // Add string (each character of the UTF-8 string are added)
CIMGUI_API void ImFontGlyphRangesBuilder_AddRanges(ImFontGlyphRangesBuilder* self, const ImWchar* ranges);                              // Add ranges, e.g. builder.AddRanges(ImFontAtlas::GetGlyphRangesDefault()) to force add all of ASCII/Latin+Ext
CIMGUI_API void ImFontGlyphRangesBuilder_BuildRanges(ImFontGlyphRangesBuilder* self, ImVector_ImWchar* out_ranges);                     // Output new ranges (ImVector_Construct()/ImVector_Destruct() can be used to safely construct out_ranges)

// See ImFontAtlas::AddCustomRectXXX functions.
typedef struct ImFontAtlasCustomRect_t
{
    unsigned short Width, Height;  // Input    // Desired rectangle dimension
    unsigned short X, Y;           // Output   // Packed position in Atlas
    unsigned int   GlyphID;        // Input    // For custom font glyphs only (ID < 0x110000)
    float          GlyphAdvanceX;  // Input    // For custom font glyphs only: glyph xadvance
    ImVec2         GlyphOffset;    // Input    // For custom font glyphs only: glyph display offset
    ImFont*        Font;           // Input    // For custom font glyphs only: target font
} ImFontAtlasCustomRect;
CIMGUI_API bool ImFontAtlasCustomRect_IsPacked(const ImFontAtlasCustomRect* self);

// Flags for ImFontAtlas build
typedef enum
{
    ImFontAtlasFlags_None               = 0,
    ImFontAtlasFlags_NoPowerOfTwoHeight = 1<<0,  // Don't round the height to next power of two
    ImFontAtlasFlags_NoMouseCursors     = 1<<1,  // Don't build software mouse cursors into the atlas (save a little texture memory)
    ImFontAtlasFlags_NoBakedLines       = 1<<2,  // Don't build thick line textures into the atlas (save a little texture memory, allow support for point/nearest filtering). The AntiAliasedLinesUseTex features uses them, otherwise they will be rendered using polygons (more expensive for CPU/GPU).
} ImFontAtlasFlags_;

// Load and rasterize multiple TTF/OTF fonts into a same texture. The font atlas will build a single texture holding:
//  - One or more fonts.
//  - Custom graphics data needed to render the shapes needed by Dear ImGui.
//  - Mouse cursor shapes for software cursor rendering (unless setting 'Flags |= ImFontAtlasFlags_NoMouseCursors' in the font atlas).
// It is the user-code responsibility to setup/build the atlas, then upload the pixel data into a texture accessible by your graphics api.
//  - Optionally, call any of the AddFont*** functions. If you don't call any, the default font embedded in the code will be loaded for you.
//  - Call GetTexDataAsAlpha8() or GetTexDataAsRGBA32() to build and retrieve pixels data.
//  - Upload the pixels data into a texture within your graphics system (see imgui_impl_xxxx.cpp examples)
//  - Call SetTexID(my_tex_id); and pass the pointer/identifier to your texture in a format natural to your graphics API.
//    This value will be passed back to you during rendering to identify the texture. Read FAQ entry about ImTextureID for more details.
// Common pitfalls:
// - If you pass a 'glyph_ranges' array to AddFont*** functions, you need to make sure that your array persist up until the
//   atlas is build (when calling GetTexData*** or Build()). We only copy the pointer, not the data.
// - Important: By default, AddFontFromMemoryTTF() takes ownership of the data. Even though we are not writing to it, we will free the pointer on destruction.
//   You can set font_cfg->FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed,
// - Even though many functions are suffixed with "TTF", OTF data is supported just as well.
// - This is an old API and it is currently awkward for those and various other reasons! We will address them in the future!
typedef struct ImFontAtlas_t
{
    //-------------------------------------------
    // Glyph Ranges
    //-------------------------------------------

    //-------------------------------------------
    // [BETA] Custom Rectangles/Glyphs API
    //-------------------------------------------

    //-------------------------------------------
    // Members
    //-------------------------------------------

    ImFontAtlasFlags       Flags;                                          // Build flags (see ImFontAtlasFlags_)
    ImTextureID            TexID;                                          // User data to refer to the texture once it has been uploaded to user's graphic systems. It is passed back to you during rendering via the ImDrawCmd structure.
    int                    TexDesiredWidth;                                // Texture width desired by user before Build(). Must be a power-of-two. If have many glyphs your graphics API have texture size restrictions you may want to increase texture width to decrease height.
    int                    TexGlyphPadding;                                // Padding between glyphs within texture in pixels. Defaults to 1. If your rendering method doesn't rely on bilinear filtering you may set this to 0 (will also need to set AntiAliasedLinesUseTex = false).
    bool                   Locked;                                         // Marked as Locked by ImGui::NewFrame() so attempt to modify the atlas will assert.

    // [Internal]
    // NB: Access texture data via GetTexData*() calls! Which will setup a default font for you.
    bool                   TexReady;                                       // Set when texture was built matching current font input
    bool                   TexPixelsUseColors;                             // Tell whether our texture data is known to use colors (rather than just alpha channel), in order to help backend select a format.
    unsigned char*         TexPixelsAlpha8;                                // 1 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight
    unsigned int*          TexPixelsRGBA32;                                // 4 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight * 4
    int                    TexWidth;                                       // Texture width calculated during Build().
    int                    TexHeight;                                      // Texture height calculated during Build().
    ImVec2                 TexUvScale;                                     // = (1.0f/TexWidth, 1.0f/TexHeight)
    ImVec2                 TexUvWhitePixel;                                // Texture coordinates to a white pixel
    ImVector_ImFontPtr     Fonts;                                          // Hold all the fonts returned by AddFont*. Fonts[0] is the default font upon calling ImGui::NewFrame(), use ImGui::PushFont()/PopFont() to change the current font.
    ImVector_ImFontAtlasCustomRect CustomRects;                            // Rectangles for packing custom texture data into the atlas.
    ImVector_ImFontConfig  ConfigData;                                     // Configuration data
    ImVec4                 TexUvLines[IM_DRAWLIST_TEX_LINES_WIDTH_MAX+1];  // UVs for baked anti-aliased lines

    // [Internal] Font builder
    const ImFontBuilderIO* FontBuilderIO;                                  // Opaque interface to a font builder (default to stb_truetype, can be changed to use FreeType by defining IMGUI_ENABLE_FREETYPE).
    unsigned int           FontBuilderFlags;                               // Shared flags (for all fonts) for custom font builder. THIS IS BUILD IMPLEMENTATION DEPENDENT. Per-font override is also available in ImFontConfig.

    // [Internal] Packing data
    int                    PackIdMouseCursors;                             // Custom texture rectangle ID for white pixel and mouse cursors
    int                    PackIdLines;                                    // Custom texture rectangle ID for baked anti-aliased lines

    // [Obsolete]
    //typedef ImFontAtlasCustomRect    CustomRect;         // OBSOLETED in 1.72+
    //typedef ImFontGlyphRangesBuilder GlyphRangesBuilder; // OBSOLETED in 1.67+
} ImFontAtlas;
CIMGUI_API ImFont*                ImFontAtlas_AddFont(ImFontAtlas* self, const ImFontConfig* font_cfg);
CIMGUI_API ImFont*                ImFontAtlas_AddFontDefault(ImFontAtlas* self, const ImFontConfig* font_cfg /* = NULL */);
CIMGUI_API ImFont*                ImFontAtlas_AddFontFromFileTTF(ImFontAtlas* self, const char* filename, float size_pixels, const ImFontConfig* font_cfg /* = NULL */, const ImWchar* glyph_ranges /* = NULL */);
CIMGUI_API ImFont*                ImFontAtlas_AddFontFromMemoryTTF(ImFontAtlas* self, void* font_data, int font_size, float size_pixels, const ImFontConfig* font_cfg /* = NULL */, const ImWchar* glyph_ranges /* = NULL */); // Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg->FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.
CIMGUI_API ImFont*                ImFontAtlas_AddFontFromMemoryCompressedTTF(ImFontAtlas* self, const void* compressed_font_data, int compressed_font_size, float size_pixels, const ImFontConfig* font_cfg /* = NULL */, const ImWchar* glyph_ranges /* = NULL */); // 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.
CIMGUI_API ImFont*                ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(ImFontAtlas* self, const char* compressed_font_data_base85, float size_pixels, const ImFontConfig* font_cfg /* = NULL */, const ImWchar* glyph_ranges /* = NULL */); // 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.
CIMGUI_API void                   ImFontAtlas_ClearInputData(ImFontAtlas* self);                                                                                     // Clear input data (all ImFontConfig structures including sizes, TTF data, glyph ranges, etc.) = all the data used to build the texture and fonts.
CIMGUI_API void                   ImFontAtlas_ClearTexData(ImFontAtlas* self);                                                                                       // Clear output texture data (CPU side). Saves RAM once the texture has been copied to graphics memory.
CIMGUI_API void                   ImFontAtlas_ClearFonts(ImFontAtlas* self);                                                                                         // Clear output font data (glyphs storage, UV coordinates).
CIMGUI_API void                   ImFontAtlas_Clear(ImFontAtlas* self);                                                                                              // Clear all input and output.
// Build atlas, retrieve pixel data.
// User is in charge of copying the pixels into graphics memory (e.g. create a texture with your engine). Then store your texture handle with SetTexID().
// The pitch is always = Width * BytesPerPixels (1 or 4)
// Building in RGBA32 format is provided for convenience and compatibility, but note that unless you manually manipulate or copy color data into
// the texture (e.g. when using the AddCustomRect*** api), then the RGB pixels emitted will always be white (~75% of memory/bandwidth waste.
CIMGUI_API bool                   ImFontAtlas_Build(ImFontAtlas* self);                                                                                              // Build pixels data. This is called automatically for you by the GetTexData*** functions.
CIMGUI_API void                   ImFontAtlas_GetTexDataAsAlpha8(ImFontAtlas* self, unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel /* = NULL */); // 1 byte per-pixel
CIMGUI_API void                   ImFontAtlas_GetTexDataAsRGBA32(ImFontAtlas* self, unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel /* = NULL */); // 4 bytes-per-pixel
CIMGUI_API bool                   ImFontAtlas_IsBuilt(const ImFontAtlas* self);                                                                                      // Bit ambiguous: used to detect when user didn't build texture but effectively we should check TexID != 0 except that would be backend dependent...
CIMGUI_API void                   ImFontAtlas_SetTexID(ImFontAtlas* self, ImTextureID id);
// Helpers to retrieve list of common Unicode ranges (2 value per range, values are inclusive, zero-terminated list)
// NB: Make sure that your string are UTF-8 and NOT in your local code page. In C++11, you can create UTF-8 string literal using the u8"Hello world" syntax. See FAQ for details.
// NB: Consider using ImFontGlyphRangesBuilder to build glyph ranges from textual data.
CIMGUI_API const ImWchar*         ImFontAtlas_GetGlyphRangesDefault(ImFontAtlas* self);                                                                              // Basic Latin, Extended Latin
CIMGUI_API const ImWchar*         ImFontAtlas_GetGlyphRangesGreek(ImFontAtlas* self);                                                                                // Default + Greek and Coptic
CIMGUI_API const ImWchar*         ImFontAtlas_GetGlyphRangesKorean(ImFontAtlas* self);                                                                               // Default + Korean characters
CIMGUI_API const ImWchar*         ImFontAtlas_GetGlyphRangesJapanese(ImFontAtlas* self);                                                                             // Default + Hiragana, Katakana, Half-Width, Selection of 2999 Ideographs
CIMGUI_API const ImWchar*         ImFontAtlas_GetGlyphRangesChineseFull(ImFontAtlas* self);                                                                          // Default + Half-Width + Japanese Hiragana/Katakana + full set of about 21000 CJK Unified Ideographs
CIMGUI_API const ImWchar*         ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(ImFontAtlas* self);                                                              // Default + Half-Width + Japanese Hiragana/Katakana + set of 2500 CJK Unified Ideographs for common simplified Chinese
CIMGUI_API const ImWchar*         ImFontAtlas_GetGlyphRangesCyrillic(ImFontAtlas* self);                                                                             // Default + about 400 Cyrillic characters
CIMGUI_API const ImWchar*         ImFontAtlas_GetGlyphRangesThai(ImFontAtlas* self);                                                                                 // Default + Thai characters
CIMGUI_API const ImWchar*         ImFontAtlas_GetGlyphRangesVietnamese(ImFontAtlas* self);                                                                           // Default + Vietnamese characters
// You can request arbitrary rectangles to be packed into the atlas, for your own purposes.
// - After calling Build(), you can query the rectangle position and render your pixels.
// - If you render colored output, set 'atlas->TexPixelsUseColors = true' as this may help some backends decide of prefered texture format.
// - You can also request your rectangles to be mapped as font glyph (given a font + Unicode point),
//   so you can render e.g. custom colorful icons and use them as regular glyphs.
// - Read docs/FONTS.md for more details about using colorful icons.
// - Note: this API may be redesigned later in order to support multi-monitor varying DPI settings.
CIMGUI_API int                    ImFontAtlas_AddCustomRectRegular(ImFontAtlas* self, int width, int height);
CIMGUI_API int                    ImFontAtlas_AddCustomRectFontGlyph(ImFontAtlas* self, ImFont* font, ImWchar id, int width, int height, float advance_x, ImVec2 offset /* = ImVec2(0, 0) */);
CIMGUI_API ImFontAtlasCustomRect* ImFontAtlas_GetCustomRectByIndex(ImFontAtlas* self, int index);
// [Internal]
CIMGUI_API void                   ImFontAtlas_CalcCustomRectUV(const ImFontAtlas* self, const ImFontAtlasCustomRect* rect, ImVec2* out_uv_min, ImVec2* out_uv_max);
CIMGUI_API bool                   ImFontAtlas_GetMouseCursorTexData(ImFontAtlas* self, ImGuiMouseCursor cursor, ImVec2* out_offset, ImVec2* out_size, ImVec2 out_uv_border[2], ImVec2 out_uv_fill[2]);

// Font runtime data and rendering
// ImFontAtlas automatically loads a default embedded font for you when you call GetTexDataAsAlpha8() or GetTexDataAsRGBA32().
typedef struct ImFont_t
{
    // Members: Hot ~20/24 bytes (for CalcTextSize)
    ImVector_float       IndexAdvanceX;                                         // 12-16 // out //            // Sparse. Glyphs->AdvanceX in a directly indexable way (cache-friendly for CalcTextSize functions which only this this info, and are often bottleneck in large UI).
    float                FallbackAdvanceX;                                      // 4     // out // = FallbackGlyph->AdvanceX
    float                FontSize;                                              // 4     // in  //            // Height of characters/line, set during loading (don't change after loading)

    // Members: Hot ~28/40 bytes (for CalcTextSize + render loop)
    ImVector_ImWchar     IndexLookup;                                           // 12-16 // out //            // Sparse. Index glyphs by Unicode code-point.
    ImVector_ImFontGlyph Glyphs;                                                // 12-16 // out //            // All glyphs.
    const ImFontGlyph*   FallbackGlyph;                                         // 4-8   // out // = FindGlyph(FontFallbackChar)

    // Members: Cold ~32/40 bytes
    ImFontAtlas*         ContainerAtlas;                                        // 4-8   // out //            // What we has been loaded into
    const ImFontConfig*  ConfigData;                                            // 4-8   // in  //            // Pointer within ContainerAtlas->ConfigData
    short                ConfigDataCount;                                       // 2     // in  // ~ 1        // Number of ImFontConfig involved in creating this font. Bigger than 1 when merging multiple font sources into one ImFont.
    ImWchar              FallbackChar;                                          // 2     // out // = FFFD/'?' // Character used if a glyph isn't found.
    ImWchar              EllipsisChar;                                          // 2     // out // = '...'    // Character used for ellipsis rendering.
    ImWchar              DotChar;                                               // 2     // out // = '.'      // Character used for ellipsis rendering (if a single '...' character isn't found)
    bool                 DirtyLookupTables;                                     // 1     // out //
    float                Scale;                                                 // 4     // in  // = 1.f      // Base font scale, multiplied by the per-window font scale which you can adjust with SetWindowFontScale()
    float                Ascent, Descent;                                       // 4+4   // out //            // Ascent: distance from top to bottom of e.g. 'A' [0..FontSize]
    int                  MetricsTotalSurface;                                   // 4     // out //            // Total surface in pixels to get an idea of the font rasterization/texture cost (not exact, we approximate the cost of padding between glyphs)
    ImU8                 Used4kPagesMap[(IM_UNICODE_CODEPOINT_MAX +1)/4096/8];  // 2 bytes if ImWchar=ImWchar16, 34 bytes if ImWchar==ImWchar32. Store 1-bit for each block of 4K codepoints that has one active glyph. This is mainly used to facilitate iterations across all used codepoints.
} ImFont;
CIMGUI_API const ImFontGlyph* ImFont_FindGlyph(const ImFont* self, ImWchar c);
CIMGUI_API const ImFontGlyph* ImFont_FindGlyphNoFallback(const ImFont* self, ImWchar c);
CIMGUI_API float              ImFont_GetCharAdvance(const ImFont* self, ImWchar c);
CIMGUI_API bool               ImFont_IsLoaded(const ImFont* self);
CIMGUI_API const char*        ImFont_GetDebugName(const ImFont* self);
// 'max_width' stops rendering after a certain width (could be turned into a 2d size). FLT_MAX to disable.
// 'wrap_width' enable automatic word-wrapping across multiple lines to fit into given width. 0.0f to disable.
CIMGUI_API ImVec2             ImFont_CalcTextSizeA(const ImFont* self, float size, float max_width, float wrap_width, const char* text_begin);          // Implied text_end = NULL, remaining = NULL
CIMGUI_API ImVec2             ImFont_CalcTextSizeAEx(const ImFont* self, float size, float max_width, float wrap_width, const char* text_begin, const char* text_end /* = NULL */, const char** remaining /* = NULL */); // utf8
CIMGUI_API const char*        ImFont_CalcWordWrapPositionA(const ImFont* self, float scale, const char* text, const char* text_end, float wrap_width);
CIMGUI_API void               ImFont_RenderChar(const ImFont* self, ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, ImWchar c);
CIMGUI_API void               ImFont_RenderText(const ImFont* self, ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, ImVec4 clip_rect, const char* text_begin, const char* text_end, float wrap_width /* = 0.0f */, bool cpu_fine_clip /* = false */);
// [Internal] Don't use!
CIMGUI_API void               ImFont_BuildLookupTable(ImFont* self);
CIMGUI_API void               ImFont_ClearOutputData(ImFont* self);
CIMGUI_API void               ImFont_GrowIndex(ImFont* self, int new_size);
CIMGUI_API void               ImFont_AddGlyph(ImFont* self, const ImFontConfig* src_cfg, ImWchar c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x);
CIMGUI_API void               ImFont_AddRemapChar(ImFont* self, ImWchar dst, ImWchar src, bool overwrite_dst /* = true */);                             // Makes 'dst' character/glyph points to 'src' character/glyph. Currently needs to be called AFTER fonts have been built.
CIMGUI_API void               ImFont_SetGlyphVisible(ImFont* self, ImWchar c, bool visible);
CIMGUI_API bool               ImFont_IsGlyphRangeUnused(ImFont* self, unsigned int c_begin, unsigned int c_last);

//-----------------------------------------------------------------------------
// [SECTION] Viewports
//-----------------------------------------------------------------------------

// Flags stored in ImGuiViewport::Flags, giving indications to the platform backends.
typedef enum
{
    ImGuiViewportFlags_None              = 0,
    ImGuiViewportFlags_IsPlatformWindow  = 1<<0,  // Represent a Platform Window
    ImGuiViewportFlags_IsPlatformMonitor = 1<<1,  // Represent a Platform Monitor (unused yet)
    ImGuiViewportFlags_OwnedByApp        = 1<<2,  // Platform Window: is created/managed by the application (rather than a dear imgui backend)
} ImGuiViewportFlags_;

// - Currently represents the Platform Window created by the application which is hosting our Dear ImGui windows.
// - In 'docking' branch with multi-viewport enabled, we extend this concept to have multiple active viewports.
// - In the future we will extend this concept further to also represent Platform Monitor and support a "no main platform window" operation mode.
// - About Main Area vs Work Area:
//   - Main Area = entire viewport.
//   - Work Area = entire viewport minus sections used by main menu bars (for platform windows), or by task bar (for platform monitor).
//   - Windows are generally trying to stay within the Work Area of their host viewport.
typedef struct ImGuiViewport_t
{
    ImGuiViewportFlags Flags;              // See ImGuiViewportFlags_
    ImVec2             Pos;                // Main Area: Position of the viewport (Dear ImGui coordinates are the same as OS desktop/native coordinates)
    ImVec2             Size;               // Main Area: Size of the viewport.
    ImVec2             WorkPos;            // Work Area: Position of the viewport minus task bars, menus bars, status bars (>= Pos)
    ImVec2             WorkSize;           // Work Area: Size of the viewport minus task bars, menu bars, status bars (<= Size)

    // Platform/Backend Dependent Data
    void*              PlatformHandleRaw;  // void* to hold lower-level, platform-native window handle (under Win32 this is expected to be a HWND, unused for other platforms)
} ImGuiViewport;
// Helpers
CIMGUI_API ImVec2 ImGuiViewport_GetCenter(const ImGuiViewport* self);
CIMGUI_API ImVec2 ImGuiViewport_GetWorkCenter(const ImGuiViewport* self);

//-----------------------------------------------------------------------------
// [SECTION] Platform Dependent Interfaces
//-----------------------------------------------------------------------------

// (Optional) Support for IME (Input Method Editor) via the io.SetPlatformImeDataFn() function.
typedef struct ImGuiPlatformImeData_t
{
    bool   WantVisible;      // A widget wants the IME to be visible
    ImVec2 InputPos;         // Position of the input cursor
    float  InputLineHeight;  // Line height
} ImGuiPlatformImeData;

//-----------------------------------------------------------------------------
// [SECTION] Obsolete functions and types
// (Will be removed! Read 'API BREAKING CHANGES' section in imgui.cpp for details)
// Please keep your copy of dear imgui up to date! Occasionally set '#define IMGUI_DISABLE_OBSOLETE_FUNCTIONS' in imconfig.h to stay ahead.
//-----------------------------------------------------------------------------

#ifndef IMGUI_DISABLE_OBSOLETE_KEYIO
CIMGUI_API ImGuiKey GetKeyIndex(ImGuiKey key);  // map ImGuiKey_* values into legacy native key index. == io.KeyMap[key]
#else
CIMGUI_API ImGuiKey GetKeyIndex(ImGuiKey key);
#endif // #ifndef IMGUI_DISABLE_OBSOLETE_KEYIO

#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
// OBSOLETED in 1.89 (from August 2022)
CIMGUI_API bool  ImGui_ImageButtonImTextureID(ImTextureID user_texture_id, ImVec2 size, ImVec2 uv0 /* = ImVec2(0, 0) */, ImVec2 uv1 /* = ImVec2(1, 1) */, int frame_padding /* = -1 */, ImVec4 bg_col /* = ImVec4(0, 0, 0, 0) */, ImVec4 tint_col /* = ImVec4(1, 1, 1, 1) */); // Use new ImageButton() signature (explicit item id, regular FramePadding)
// OBSOLETED in 1.88 (from May 2022)
CIMGUI_API void  ImGui_CaptureKeyboardFromApp(bool want_capture_keyboard /* = true */);                                                  // Renamed as name was misleading + removed default value.
CIMGUI_API void  ImGui_CaptureMouseFromApp(bool want_capture_mouse /* = true */);                                                        // Renamed as name was misleading + removed default value.
// OBSOLETED in 1.86 (from November 2021)
CIMGUI_API void  ImGui_CalcListClipping(int items_count, float items_height, int* out_items_display_start, int* out_items_display_end);  // Calculate coarse clipping for large list of evenly sized items. Prefer using ImGuiListClipper.
// OBSOLETED in 1.85 (from August 2021)
CIMGUI_API float ImGui_GetWindowContentRegionWidth(void);
// OBSOLETED in 1.81 (from February 2021)
CIMGUI_API bool  ImGui_ListBoxHeaderInt(const char* label, int items_count, int height_in_items /* = -1 */);                             // Helper to calculate size from items_count and height_in_items
CIMGUI_API bool  ImGui_ListBoxHeader(const char* label, ImVec2 size /* = ImVec2(0, 0) */);
CIMGUI_API void  ImGui_ListBoxFooter(void);

// Some of the older obsolete names along with their replacement (commented out so they are not reported in IDE)
//-- OBSOLETED in 1.79 (from August 2020)
//static inline void  OpenPopupContextItem(const char* str_id = NULL, ImGuiMouseButton mb = 1)    { OpenPopupOnItemClick(str_id, mb); } // Bool return value removed. Use IsWindowAppearing() in BeginPopup() instead. Renamed in 1.77, renamed back in 1.79. Sorry!
//-- OBSOLETED in 1.78 (from June 2020): Old drag/sliders functions that took a 'float power > 1.0f' argument instead of ImGuiSliderFlags_Logarithmic. See github.com/ocornut/imgui/issues/3361 for details.
//IMGUI_API bool      DragScalar(const char* label, ImGuiDataType data_type, void* p_data, float v_speed, const void* p_min, const void* p_max, const char* format, float power = 1.0f)                                                            // OBSOLETED in 1.78 (from June 2020)
//IMGUI_API bool      DragScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, float v_speed, const void* p_min, const void* p_max, const char* format, float power = 1.0f);                                          // OBSOLETED in 1.78 (from June 2020)
//IMGUI_API bool      SliderScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format, float power = 1.0f);                                                                        // OBSOLETED in 1.78 (from June 2020)
//IMGUI_API bool      SliderScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_min, const void* p_max, const char* format, float power = 1.0f);                                                       // OBSOLETED in 1.78 (from June 2020)
//static inline bool  DragFloat(const char* label, float* v, float v_speed, float v_min, float v_max, const char* format, float power = 1.0f)    { return DragScalar(label, ImGuiDataType_Float, v, v_speed, &v_min, &v_max, format, power); }     // OBSOLETED in 1.78 (from June 2020)
//static inline bool  DragFloat2(const char* label, float v[2], float v_speed, float v_min, float v_max, const char* format, float power = 1.0f) { return DragScalarN(label, ImGuiDataType_Float, v, 2, v_speed, &v_min, &v_max, format, power); } // OBSOLETED in 1.78 (from June 2020)
//static inline bool  DragFloat3(const char* label, float v[3], float v_speed, float v_min, float v_max, const char* format, float power = 1.0f) { return DragScalarN(label, ImGuiDataType_Float, v, 3, v_speed, &v_min, &v_max, format, power); } // OBSOLETED in 1.78 (from June 2020)
//static inline bool  DragFloat4(const char* label, float v[4], float v_speed, float v_min, float v_max, const char* format, float power = 1.0f) { return DragScalarN(label, ImGuiDataType_Float, v, 4, v_speed, &v_min, &v_max, format, power); } // OBSOLETED in 1.78 (from June 2020)
//static inline bool  SliderFloat(const char* label, float* v, float v_min, float v_max, const char* format, float power = 1.0f)                 { return SliderScalar(label, ImGuiDataType_Float, v, &v_min, &v_max, format, power); }            // OBSOLETED in 1.78 (from June 2020)
//static inline bool  SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* format, float power = 1.0f)              { return SliderScalarN(label, ImGuiDataType_Float, v, 2, &v_min, &v_max, format, power); }        // OBSOLETED in 1.78 (from June 2020)
//static inline bool  SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* format, float power = 1.0f)              { return SliderScalarN(label, ImGuiDataType_Float, v, 3, &v_min, &v_max, format, power); }        // OBSOLETED in 1.78 (from June 2020)
//static inline bool  SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* format, float power = 1.0f)              { return SliderScalarN(label, ImGuiDataType_Float, v, 4, &v_min, &v_max, format, power); }        // OBSOLETED in 1.78 (from June 2020)
//-- OBSOLETED in 1.77 and before
//static inline bool  BeginPopupContextWindow(const char* str_id, ImGuiMouseButton mb, bool over_items) { return BeginPopupContextWindow(str_id, mb | (over_items ? 0 : ImGuiPopupFlags_NoOpenOverItems)); } // OBSOLETED in 1.77 (from June 2020)
//static inline void  TreeAdvanceToLabelPos()               { SetCursorPosX(GetCursorPosX() + GetTreeNodeToLabelSpacing()); }   // OBSOLETED in 1.72 (from July 2019)
//static inline void  SetNextTreeNodeOpen(bool open, ImGuiCond cond = 0) { SetNextItemOpen(open, cond); }                       // OBSOLETED in 1.71 (from June 2019)
//static inline float GetContentRegionAvailWidth()          { return GetContentRegionAvail().x; }                               // OBSOLETED in 1.70 (from May 2019)
//static inline ImDrawList* GetOverlayDrawList()            { return GetForegroundDrawList(); }                                 // OBSOLETED in 1.69 (from Mar 2019)
//static inline void  SetScrollHere(float ratio = 0.5f)     { SetScrollHereY(ratio); }                                          // OBSOLETED in 1.66 (from Nov 2018)
//static inline bool  IsItemDeactivatedAfterChange()        { return IsItemDeactivatedAfterEdit(); }                            // OBSOLETED in 1.63 (from Aug 2018)
//-- OBSOLETED in 1.60 and before
//static inline bool  IsAnyWindowFocused()                  { return IsWindowFocused(ImGuiFocusedFlags_AnyWindow); }            // OBSOLETED in 1.60 (from Apr 2018)
//static inline bool  IsAnyWindowHovered()                  { return IsWindowHovered(ImGuiHoveredFlags_AnyWindow); }            // OBSOLETED in 1.60 (between Dec 2017 and Apr 2018)
//static inline void  ShowTestWindow()                      { return ShowDemoWindow(); }                                        // OBSOLETED in 1.53 (between Oct 2017 and Dec 2017)
//static inline bool  IsRootWindowFocused()                 { return IsWindowFocused(ImGuiFocusedFlags_RootWindow); }           // OBSOLETED in 1.53 (between Oct 2017 and Dec 2017)
//static inline bool  IsRootWindowOrAnyChildFocused()       { return IsWindowFocused(ImGuiFocusedFlags_RootAndChildWindows); }  // OBSOLETED in 1.53 (between Oct 2017 and Dec 2017)
//static inline void  SetNextWindowContentWidth(float w)    { SetNextWindowContentSize(ImVec2(w, 0.0f)); }                      // OBSOLETED in 1.53 (between Oct 2017 and Dec 2017)
//static inline float GetItemsLineHeightWithSpacing()       { return GetFrameHeightWithSpacing(); }                             // OBSOLETED in 1.53 (between Oct 2017 and Dec 2017)
//IMGUI_API bool      Begin(char* name, bool* p_open, ImVec2 size_first_use, float bg_alpha = -1.0f, ImGuiWindowFlags flags=0); // OBSOLETED in 1.52 (between Aug 2017 and Oct 2017): Equivalent of using SetNextWindowSize(size, ImGuiCond_FirstUseEver) and SetNextWindowBgAlpha().
//static inline bool  IsRootWindowOrAnyChildHovered()       { return IsWindowHovered(ImGuiHoveredFlags_RootAndChildWindows); }  // OBSOLETED in 1.52 (between Aug 2017 and Oct 2017)
//static inline void  AlignFirstTextHeightToWidgets()       { AlignTextToFramePadding(); }                                      // OBSOLETED in 1.52 (between Aug 2017 and Oct 2017)
//static inline void  SetNextWindowPosCenter(ImGuiCond c=0) { SetNextWindowPos(GetMainViewport()->GetCenter(), c, ImVec2(0.5f,0.5f)); } // OBSOLETED in 1.52 (between Aug 2017 and Oct 2017)
//static inline bool  IsItemHoveredRect()                   { return IsItemHovered(ImGuiHoveredFlags_RectOnly); }               // OBSOLETED in 1.51 (between Jun 2017 and Aug 2017)
//static inline bool  IsPosHoveringAnyWindow(const ImVec2&) { IM_ASSERT(0); return false; }                                     // OBSOLETED in 1.51 (between Jun 2017 and Aug 2017): This was misleading and partly broken. You probably want to use the io.WantCaptureMouse flag instead.
//static inline bool  IsMouseHoveringAnyWindow()            { return IsWindowHovered(ImGuiHoveredFlags_AnyWindow); }            // OBSOLETED in 1.51 (between Jun 2017 and Aug 2017)
//static inline bool  IsMouseHoveringWindow()               { return IsWindowHovered(ImGuiHoveredFlags_AllowWhenBlockedByPopup | ImGuiHoveredFlags_AllowWhenBlockedByActiveItem); }       // OBSOLETED in 1.51 (between Jun 2017 and Aug 2017)
//-- OBSOLETED in 1.50 and before
//static inline bool  CollapsingHeader(char* label, const char* str_id, bool framed = true, bool default_open = false) { return CollapsingHeader(label, (default_open ? (1 << 5) : 0)); } // OBSOLETED in 1.49
//static inline ImFont*GetWindowFont()                      { return GetFont(); }                                               // OBSOLETED in 1.48
//static inline float GetWindowFontSize()                   { return GetFontSize(); }                                           // OBSOLETED in 1.48
//static inline void  SetScrollPosHere()                    { SetScrollHere(); }                                                // OBSOLETED in 1.42

// OBSOLETED in 1.82 (from Mars 2021): flags for AddRect(), AddRectFilled(), AddImageRounded(), PathRect()
typedef ImDrawFlags ImDrawCornerFlags;
typedef enum
{
    ImDrawCornerFlags_None     = ImDrawFlags_RoundCornersNone,         // Was == 0 prior to 1.82, this is now == ImDrawFlags_RoundCornersNone which is != 0 and not implicit
    ImDrawCornerFlags_TopLeft  = ImDrawFlags_RoundCornersTopLeft,      // Was == 0x01 (1 << 0) prior to 1.82. Order matches ImDrawFlags_NoRoundCorner* flag (we exploit this internally).
    ImDrawCornerFlags_TopRight = ImDrawFlags_RoundCornersTopRight,     // Was == 0x02 (1 << 1) prior to 1.82.
    ImDrawCornerFlags_BotLeft  = ImDrawFlags_RoundCornersBottomLeft,   // Was == 0x04 (1 << 2) prior to 1.82.
    ImDrawCornerFlags_BotRight = ImDrawFlags_RoundCornersBottomRight,  // Was == 0x08 (1 << 3) prior to 1.82.
    ImDrawCornerFlags_All      = ImDrawFlags_RoundCornersAll,          // Was == 0x0F prior to 1.82
    ImDrawCornerFlags_Top      = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_TopRight,
    ImDrawCornerFlags_Bot      = ImDrawCornerFlags_BotLeft | ImDrawCornerFlags_BotRight,
    ImDrawCornerFlags_Left     = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_BotLeft,
    ImDrawCornerFlags_Right    = ImDrawCornerFlags_TopRight | ImDrawCornerFlags_BotRight,
} ImDrawCornerFlags_;

// RENAMED and MERGED both ImGuiKey_ModXXX and ImGuiModFlags_XXX into ImGuiMod_XXX (from September 2022)
// RENAMED ImGuiKeyModFlags -> ImGuiModFlags in 1.88 (from April 2022). Exceptionally commented out ahead of obscolescence schedule to reduce confusion and because they were not meant to be used in the first place.
typedef ImGuiKeyChord ImGuiModFlags;       // == int. We generally use ImGuiKeyChord to mean "a ImGuiKey or-ed with any number of ImGuiMod_XXX value", but you may store only mods in there.
typedef enum
{
    ImGuiModFlags_None  = 0,
    ImGuiModFlags_Ctrl  = ImGuiMod_Ctrl,
    ImGuiModFlags_Shift = ImGuiMod_Shift,
    ImGuiModFlags_Alt   = ImGuiMod_Alt,
    ImGuiModFlags_Super = ImGuiMod_Super,
} ImGuiModFlags_;
//typedef ImGuiKeyChord ImGuiKeyModFlags; // == int
//enum ImGuiKeyModFlags_ { ImGuiKeyModFlags_None = 0, ImGuiKeyModFlags_Ctrl = ImGuiMod_Ctrl, ImGuiKeyModFlags_Shift = ImGuiMod_Shift, ImGuiKeyModFlags_Alt = ImGuiMod_Alt, ImGuiKeyModFlags_Super = ImGuiMod_Super };
#endif// #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
// RENAMED IMGUI_DISABLE_METRICS_WINDOW > IMGUI_DISABLE_DEBUG_TOOLS in 1.88 (from June 2022)
#if defined(IMGUI_DISABLE_METRICS_WINDOW)&&!defined(IMGUI_DISABLE_OBSOLETE_FUNCTIONS)&&!defined(IMGUI_DISABLE_DEBUG_TOOLS)
#define IMGUI_DISABLE_DEBUG_TOOLS
#endif // #if defined(IMGUI_DISABLE_METRICS_WINDOW)&&!defined(IMGUI_DISABLE_OBSOLETE_FUNCTIONS)&&!defined(IMGUI_DISABLE_DEBUG_TOOLS)
#if defined(IMGUI_DISABLE_METRICS_WINDOW)&& defined(IMGUI_DISABLE_OBSOLETE_FUNCTIONS)
#error IMGUI_DISABLE_METRICS_WINDOW was renamed to IMGUI_DISABLE_DEBUG_TOOLS, please use new name.
#endif // #if defined(IMGUI_DISABLE_METRICS_WINDOW)&& defined(IMGUI_DISABLE_OBSOLETE_FUNCTIONS)
//-----------------------------------------------------------------------------

#if defined(__clang__)
#pragma clang diagnostic pop
#else
#if defined(__GNUC__)
#pragma GCC diagnostic pop
#endif // #if defined(__GNUC__)
#endif // #if defined(__clang__)
#ifdef _MSC_VER
#pragma warning (pop)
#endif // #ifdef _MSC_VER
// Include imgui_user.h at the end of imgui.h (convenient for user to only explicitly include vanilla imgui.h)
#ifdef IMGUI_INCLUDE_IMGUI_USER_H
#include "imgui_user.h"
#endif // #ifdef IMGUI_INCLUDE_IMGUI_USER_H
#endif// #ifndef IMGUI_DISABLE
#ifdef __cplusplus
} // End of extern "C" block
#endif
